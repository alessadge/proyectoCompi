package codigo;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

parser code
{:
    public static Node raiz;
    public static Symbol found;
    public static LinkedList<String> Errores = new LinkedList<String>();
    private static Symbol s;

    public Symbol getS(){
        return this.s;
} 
    public void report_error(String errorBody, Object info){
        found = (Symbol)info;
	Sintax.Errores.add("Se encontro Report_Error: " + found.value+"\n");
        Sintax.Errores.add(" Descripcion:\n");
    }

    public void report_fatal_error(String errorBody, Object info){ 
        //error = "Errores no Recuperables \n";
        found = (Symbol)info;
	Sintax.Errores.add("Se encontro Error_Fatal: " + found.value);
	Sintax.Errores.add(" Descripcion:\n");
    }
    public static void Main_Error(){
        switch(found.sym){
            case sym.Begin: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: main \n");
                break;
            case sym.Main:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Main \n");
            default:
                Sintax.Errores.add("Error en el Main \n");
                break;
        }
        Sintax.Errores.add("[Main Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Void_Error(){
        switch(found.sym){
            case sym.Call: 
                Sintax.Errores.add("Error en el llamado de la funcion.\n");
                break;
            case sym.Begin:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: call \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: begin \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.EndCall: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end call o ) \n");
                break;
        }
       Sintax.Errores.add("[Void_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Entrada_Error(){
        switch(found.sym){
            case sym.put:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: put \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: put \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o put ) \n");
                break;
        }
       Sintax.Errores.add("[Entrada_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Parametro_Error(){
        switch(found.sym){
            case sym.Begin:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Tipoe int/string/float/bool \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: begin \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Parametro \n");
                break;
            case sym.EndCall: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end call o ) \n");
                break;
        }
       Sintax.Errores.add("[Parametro_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void TReturn_Error(){
        switch(found.sym){
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: return \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Return_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
        public static void For_Error(){
        switch(found.sym){
            case sym.TypeInt: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: for \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( o TypeInt\n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.ENTERO: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.OP_RELA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.IN: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO \n");
                break;
            case sym.Range: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: in \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: range \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndFor: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end for o ) \n");
                break;
        }
        Sintax.Errores.add("[For_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+ "\n");
    }
   public static void While_Error(){
        switch(found.sym){
            case sym.While:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: while \n");
                break;
            case sym.Repeat:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndWhile: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end while \n");
                break;
        }
        Sintax.Errores.add("[While_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Normal_If_Error(){
        switch(found.sym){
            case sym.IF:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: If \n");
                break;
            case sym.Then:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            case sym.ElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end if \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: if else o then \n");
                break;
        }
        Sintax.Errores.add("[If_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void IfElse_Error(){
        switch(found.sym){
            case sym.Then:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION or Else \n");
                break;
            case sym.EndElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            case sym.ElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end else if or else if \n");
                break;
            case sym.EndElse: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: if else or end else \n");
                break;
        }
        Sintax.Errores.add("[IfElse_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Switch(){
        switch(found.sym){
            case sym.Case: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: switch \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: switch \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.Of: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            case sym.Default: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Casos \n");
                break;
            case sym.DosPuntos: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: default \n");
                break;
            case sym.EndCase: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end case o of \n");
                break;
        }
        Sintax.Errores.add("[Switch_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Else_Error(){
        Sintax.Errores.add("Error en el Else \n");
        Sintax.Errores.add("[IfElse_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Print_Error(){
        switch(found.sym){
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Print \n");
                break;
            case sym.CADENA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Print_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void Asignar_Error(){
        switch(found.sym){
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Asignacion_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
 
    public static void Declarar(){
        switch(found.sym){
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: type int/string/float/bool \n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Declaracion_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void TipoA_Error(){
        switch(found.sym){
            case sym.CADENA: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.TBool: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.CurlyIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.CurlyDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: LISTA \n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Type_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Parametro(){
            switch(found.sym){
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: TYPE \n");
                break;
            case sym.Coma: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: parametro\n");
                break;
            }
             Sintax.Errores.add("[Type_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
:};

terminal  IF,
        EndIf,
        Else,
        EndElse,
        ElseIf,
        EndElseIf,
        Then,
        For,
        IN,
        Range,
        EndFor,
        While,
        Repeat,
        EndWhile,
        TypeInt,
        TypeFloat,
        TypeString,
        TypeList,
        TypeMatriz,
        TypeBool,
        TBool,
        OP_SUMA,
        OP_MULT,
        OP_DIV,
        OP_LOGIC,
        OP_RELA,
        OP_ASIG,    
        Case,
        Of,
        Default,
        EndCase,    
        Main,
        Begin,
        ImpLn,
        Imp,
        Call,
        EndCall,
        RETURN,
        EndMain,
        put,
        get,    
        DosPuntos,
        PuntoComa,
        Punto,
        Coma,
        GuionBajo,
        Ampersand,
        Apostrofe,
        Arroba,
        Numeral,
        ParIzq,
        ParDer,
        SquareBIzq,
        SquareBDer,
        CurlyIzq,
        CurlyDer,
        special_characters,     
        IDENTIFICADOR,
        ENTERO,
        CADENA,
        DECIMAL,
        COMENTARIO,
        ERROR;

non terminal INICIO,SENTENCIA,PROPOSICION,PROP1,PROP2,PROP3, SENTENCIA_DEC_ASIG, DECLARAR_ASIGNAR,LISTA,
             ASIGNAR,LOOP_FOR,LOOP_WHILE,IF_ESTRUCTURA,IFELSE,SWITCH_ESTRUCTURA,TIPOA,PARAMETRO,CLASE,METODOS,
             OPERACION_ARITMETICA,IMPRIMIR,CONCAT,CASOS,CASOC,CASOE,M_MAIN,M_VOID,METODO_T,TYPE,RETORNO,
             TRETORNO,LLAMAR_METODO,ARGUMENTO,ENTRADA,SHOWCOORDENADAS,COMENTAR; 

start with INICIO;

INICIO ::= 
   CLASE:c {:  Sintax.raiz=(Node)c; :}

;
CLASE::=
     M_MAIN:m METODOS:me {: Node clase = new Node("main");
                            clase.addNode(m);
                            clase.addNode(me);
                            RESULT=clase;
     :} 
    |M_MAIN:m {: 
                Node clase = new Node("main");
                            clase.addNode(m);
                            RESULT=clase;
         :}
;
M_MAIN ::=
    Main Begin
        SENTENCIA:s
    EndMain
    {:  
        Node main = new Node("Main");
        main.addNode(new Node("Main", "main"));
        main.addNode(new Node("Begin", "begin"));
        main.addNode(s);
        main.addNode(new Node("EndMain", "end main"));
        RESULT=main;
:}| error:e {: System.out.println("MAIN");Sintax.Main_Error(); :}
;
METODOS::=
    M_VOID:mv METODOS:m
    {:  Node metodo = new Node("metodos"); 
        metodo.addNode(mv);
        metodo.addNode(m);
        RESULT=metodo;
    :}
|M_VOID:mv 
    {:
        Node metodo = new Node("metodos"); 
        metodo.addNode(mv);
        RESULT=metodo;
    :}
|METODO_T:mt METODOS:m
{:
        Node metodo = new Node("metodos"); 
        metodo.addNode(mt);
        metodo.addNode(m);
        RESULT=metodo;
:}
|METODO_T:mt
{:
        Node metodo = new Node("metodos"); 
        metodo.addNode(mt);
        RESULT=metodo;
:}
;

M_VOID::=
    Call Begin IDENTIFICADOR:i ParIzq ParDer
        SENTENCIA:se
    EndCall
{: 
        Node Void = new Node("void");
        Void.addNode(new Node("Call", "call"));
        Void.addNode(new Node("Begin", "begin"));
        Void.addNode(new Node("IDENTIFICADOR", ((String) i)));
        Void.addNode(se);
        Void.addNode(new Node("EndCall", "end call"));
        RESULT=Void;
:}| Call error:e {: System.out.println("FUNCION VOID"); Sintax.Void_Error(); :}
;
METODO_T::=
    TYPE:t Begin IDENTIFICADOR:i ParIzq PARAMETRO:p ParDer
        SENTENCIA:s
    EndCall
    {:
    Node metodoT = new Node("metodo parametro");
    metodoT.addNode(new Node("TYPE",((String) t)));
    metodoT.addNode(new Node("Begin", "begin"));
    metodoT.addNode(new Node("IDENTIFICADOR", ((String) i)));
    metodoT.addNode(p);
    metodoT.addNode(s);
    metodoT.addNode(new Node("EndCall", "end call"));
    RESULT=metodoT;
:}| TYPE error:e {: System.out.println("FUNCION PARAMETRO");Sintax.Parametro_Error(); :}
;
PARAMETRO::=
    TYPE:t IDENTIFICADOR:i Coma PARAMETRO:pa{:
    Node parametro = new Node("parametro"); 
    parametro.addNode(new Node("TYPE", ((String) t)));
    parametro.addNode(new Node("IDENTIFICADOR", ((String) i)));
    parametro.addNode(new Node("Coma", ","));
    parametro.addNode(pa);
    RESULT=parametro;
   :}
     |TYPE:t IDENTIFICADOR:i
    {:
    Node parametro = new Node("parametro"); 
    parametro.addNode(new Node("TYPE", ((String) t)));
    parametro.addNode(new Node("IDENTIFICADOR", ((String) i)));
    RESULT=parametro;
     :}| TYPE error:e {: System.out.println("FUNCION PARAMETRO");Sintax.Parametro(); :}
   
;

TYPE::=
TypeInt:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        :}
|TypeFloat:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        :}
|TypeString:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        :}
|TypeList:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        :}
|TypeMatriz:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        :}
|TypeBool:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        :}
|
;

RETORNO::=
    RETURN TRETORNO:t {: 
        Node retorno = new Node("Return");
        retorno.addNode(new Node("RETURN", "return"));
        retorno.addNode(t);
        RESULT=retorno;
        :}    
;
TRETORNO::=
     OPERACION_ARITMETICA:op PuntoComa
     {:
        Node tretorno = new Node("retorno");
        tretorno.addNode(op);
        tretorno.addNode(new Node("PuntoComa", ";"));
        RESULT=tretorno;
       :}
    |CADENA:c PuntoComa{:
        Node tretorno = new Node("retorno");
        tretorno.addNode(new Node("CADENA", ((String) c)));
        tretorno.addNode(new Node("PuntoComa", ";"));
        RESULT=tretorno;
        :}
    |TBool:tb PuntoComa {:
        Node tretorno = new Node("retorno");
        tretorno.addNode(new Node("TBool", ((String) tb)));
        tretorno.addNode(new Node("PuntoComa", ";"));
        RESULT=tretorno;
        :}| error:e {: System.out.println("RETURN");Sintax.TReturn_Error(); :}
;
SENTENCIA::=
SENTENCIA:s RETORNO:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|RETORNO:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s LOOP_FOR:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|LOOP_FOR:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s LOOP_WHILE:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|LOOP_WHILE:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s IF_ESTRUCTURA:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|IF_ESTRUCTURA:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s SENTENCIA_DEC_ASIG:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA_DEC_ASIG:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s IMPRIMIR:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|IMPRIMIR:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s SWITCH_ESTRUCTURA:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SWITCH_ESTRUCTURA:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s ENTRADA:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|ENTRADA:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s COMENTAR:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|COMENTAR:r{:
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|error
;

LOOP_FOR::=
    For TypeInt IDENTIFICADOR:i OP_ASIG ENTERO:e IN Range ParIzq PROP1:p ParDer SENTENCIA:s EndFor
{:
        Node For = new Node("FOR");
        For.addNode(new Node("For", "for"));
        For.addNode(new Node("TypeInt", "int"));
        For.addNode(new Node("IDENTIFICADOR", ((String) i)));
        For.addNode(new Node("OP_ASIG", "=>"));
        For.addNode(new Node("ENTERO",((String) e) ));
        For.addNode(new Node("Range", "range"));
        For.addNode(p);
        For.addNode(s);
        For.addNode(new Node("EndFor", "end for"));
        RESULT=For;
:}| For error:e {: System.out.println("FOR");Sintax.For_Error(); :}
;
LOOP_WHILE::=
    While PROPOSICION:p Repeat 
    SENTENCIA:s
    EndWhile
    {:
    Node While = new Node("While");
    While.addNode(new Node("While", "while"));
    While.addNode(p);
    While.addNode(s);
    While.addNode(new Node("EndWhile", "end while"));
    RESULT=While;
    :}| While error:e {: System.out.println("WHILE");Sintax.While_Error(); :}
;
IF_ESTRUCTURA::=
    IF PROPOSICION:t Then SENTENCIA:r EndIf IFELSE:i
    {:
    Node IF = new Node("If");
    IF.addNode(new Node("If", "if"));
    IF.addNode(t);
    IF.addNode(r);
    IF.addNode(new Node("EndIf", "end if"));
    IF.addNode(i);
    RESULT=IF;
    :}
    |IF PROPOSICION:p Then SENTENCIA:s EndIf
    {:
    Node IF = new Node("If");
    IF.addNode(new Node("If", "if"));
    IF.addNode(p);
    IF.addNode(s);
    IF.addNode(new Node("EndIf", "end if"));
    RESULT=IF;
    :}|  IF error:e {: System.out.println("IF NORMAL");Sintax.Normal_If_Error(); :}
;

IFELSE::=
ElseIf PROPOSICION:p Then SENTENCIA:s EndElseIf IFELSE:ie
{:
    Node eif = new Node("else If");
    eif.addNode(new Node("ElseIf", "else if"));
    eif.addNode(p);
    eif.addNode(s);
    eif.addNode(new Node("EndElseIf", "end else if"));
    eif.addNode(ie);
    RESULT=eif;
:}|  ElseIf error:e {: System.out.println("IFELSE");Sintax.IfElse_Error(); :}
|ElseIf PROPOSICION:p Then SENTENCIA:s EndElseIf
{:
    Node eif = new Node("else If");
    eif.addNode(new Node("ElseIf", "else if"));
    eif.addNode(p);
    eif.addNode(s);
    eif.addNode(new Node("EndElseIf", "end else if"));
    RESULT=eif;
:}

|Else Then SENTENCIA:s EndElse
{:
    Node eif = new Node("else");
    eif.addNode(new Node("Else", "else"));
    eif.addNode(s);
    eif.addNode(new Node("EndElse", "end else"));
    RESULT=eif;
:}|  Else error:e {: System.out.println("Else");Sintax.Else_Error(); :}
    
;

SENTENCIA_DEC_ASIG::=
    DECLARAR_ASIGNAR:d
    {:
    Node da= new Node("decl asig");
    da.addNode(d);
    RESULT=da;
    :}
    |ASIGNAR:d
    {:
        Node da= new Node("asig");
        da.addNode(d);
        RESULT=da;
    :}
;

DECLARAR_ASIGNAR::=
    TypeInt:t IDENTIFICADOR:i OP_ASIG OPERACION_ARITMETICA:oa PuntoComa
    {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(oa);
    RESULT=declararA;
    :}
    |
    TypeString:t IDENTIFICADOR:i OP_ASIG CADENA:c PuntoComa
        {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("CADENA", ((String) c)));
    RESULT=declararA;
    :}
    
|
    TypeFloat:t IDENTIFICADOR:i OP_ASIG OPERACION_ARITMETICA:oa PuntoComa
        {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(oa);
    RESULT=declararA;
    :}
    |
    TypeBool:t IDENTIFICADOR:i OP_ASIG TBool:c PuntoComa
            {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("BOOl", ((String) c)));
    RESULT=declararA;
    :}
    |
    TypeList:t IDENTIFICADOR:i ParIzq ENTERO:e ParDer OP_ASIG CurlyIzq LISTA:l CurlyDer PuntoComa
            {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("ENTERO",((String) e)));
    declararA.addNode(new Node("LISTA", ((String) l)));
    RESULT=declararA;
    :}
    |
    TypeMatriz:t IDENTIFICADOR:i ParIzq ENTERO:e1 ParDer ParIzq ENTERO:e2 ParDer OP_ASIG CurlyIzq LISTA:l1 CurlyDer CurlyIzq LISTA:l2 CurlyDer PuntoComa
    {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("ENTERO",((String) e1)));
    declararA.addNode(new Node("ENTERO",((String) e2)));
    declararA.addNode(new Node("LISTA", ((String) l1)));
    declararA.addNode(new Node("LISTA", ((String) l2)));
    RESULT=declararA;
    :}
|      
    TypeInt:t IDENTIFICADOR:i OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
    |
    TypeString:t IDENTIFICADOR:i OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
|
    TypeFloat:t IDENTIFICADOR:i OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
    |
    TypeBool:t IDENTIFICADOR:i OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}| TypeBool error:e {: System.out.println("DECLARAR");Sintax.Declarar(); :}
|
    TypeList:t IDENTIFICADOR:i  OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}| TypeList error:e {: System.out.println("DECLARAR");Sintax.Declarar(); :}
|
    TypeMatriz:t IDENTIFICADOR:i OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}| TypeMatriz error:e {: System.out.println("DECLARAR");Sintax.Declarar(); :}
|

    TypeInt:t IDENTIFICADOR:i OP_ASIG SHOWCOORDENADAS:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}| TypeInt error:e {: System.out.println("DECLARAR");Sintax.Declarar(); :}
|
    TypeString:t IDENTIFICADOR:i OP_ASIG SHOWCOORDENADAS:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(i);
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}| TypeString error:e {: System.out.println("DECLARAR");Sintax.Declarar(); :}
|
    TypeFloat:t IDENTIFICADOR:i OP_ASIG SHOWCOORDENADAS:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}| TypeFloat error:e {: System.out.println("DECLARAR");Sintax.Declarar(); :}
;
ASIGNAR::=
    IDENTIFICADOR:i OP_ASIG TIPOA:c
    {:
    Node Asignar= new Node("asignar");
    Asignar.addNode(new Node("IDENTIFICADOR", ((String) i)));
    Asignar.addNode(new Node("OP_ASIG","=>"));
    Asignar.addNode(c);
    RESULT=Asignar;
    :}| IDENTIFICADOR error:e {: System.out.println("ASIGNAR");Sintax.Asignar_Error(); :}
;
TIPOA::=
     CADENA:t PuntoComa
     {:
    Node tipo= new Node("TIPO");
    tipo.addNode(new Node("CADENA", ((String) t)));
    RESULT=tipo;
    :}
    |
     TBool:t PuntoComa
     {:
      Node tipo= new Node("TIPO");
        tipo.addNode(new Node("BOOL", ((String) t)));
        RESULT=tipo;
    :}
    |
     CurlyIzq LISTA:t CurlyDer PuntoComa
     {:
    Node tipo= new Node("TIPO");
    tipo.addNode(new Node("LISTA", ((String) t)));
    RESULT=tipo;
    :}
    |
     CurlyIzq LISTA:t1 CurlyDer CurlyIzq LISTA:t2 CurlyDer PuntoComa
     {:
    Node tipo= new Node("TIPO");
    tipo.addNode(new Node("CADENA", ((String) t1)));
    tipo.addNode(new Node("CADENA", ((String) t2)));
    RESULT=tipo;
    :}
     |
     OPERACION_ARITMETICA:oa PuntoComa
     {:
    Node tipo= new Node("TIPO");
    tipo.addNode(oa);
    RESULT=tipo;
    :}
|
     LLAMAR_METODO:l PuntoComa
     {:
    Node tipo= new Node("TIPO");
    tipo.addNode(l);
    RESULT=tipo;
    :}|  error:e {: System.out.println("TYPE");Sintax.TipoA_Error(); :}
;
LISTA::=
   ENTERO:t Coma LISTA:l
    {:
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("ENTERO", ((String) t)));
    LISTA.addNode(new Node("LISTA", ((String) l)));
    RESULT=LISTA;
    :}
    |
   CADENA:t Coma LISTA:l
{:
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("cadena", ((String) t)));
    LISTA.addNode(new Node("LISTA", ((String) l)));
    RESULT=LISTA;
    :}
    |
   DECIMAL:t Coma LISTA:l
    {:
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("decimal", ((String) t)));
    LISTA.addNode(new Node("LISTA", ((String) l)));
    RESULT=LISTA;
    :}
|
   ENTERO:t
    {:
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("ENTERO", ((String) t)));
    RESULT=LISTA;
    :}
|
   CADENA:t
    {:
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("CADENA", ((String) t)));
    RESULT=LISTA;
    :}
|
   DECIMAL:t
{:
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("DECIMAL", ((String) t)));
    RESULT=LISTA;
    :}
;

PROPOSICION::=
    PROP1:p
    {:
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    :}
    |
    PROP2:p
    {:
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    :}
    |
    PROP3:p
    {:
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    :}
    |
    TBool:t
{:
    Node prop= new Node("PROPOSICION");
    prop.addNode(new Node("BOOL", ((String) t)));
    RESULT=prop;
    :}|error
;

PROP3::=
   ParIzq PROP2:p ParDer OP_LOGIC:t PROP3:p1
    {:
    Node prop3= new Node("PROPOSICION3");
    prop3.addNode(p);
    prop3.addNode(new Node("OP_LOGIC", ((String) t)));
    prop3.addNode(p1);
    RESULT=prop3;
    :}
    |
   ParIzq PROP2:p ParDer
    {:
    Node prop3= new Node("PROPOSICION");
    prop3.addNode(p);
    RESULT=prop3;
    :}
;
PROP2::=
    ParIzq PROP1:p ParDer OP_LOGIC:t PROP2:p1
        {:
    Node prop2= new Node("PROPOSICION");
    prop2.addNode(p);
    prop2.addNode(new Node("OP_LOGIC", ((String) t)));
    prop2.addNode(p1);
    RESULT=prop2;
    :}
    |
    ParIzq PROP1:p ParDer
    {:
    Node prop2= new Node("PROPOSICION");
    prop2.addNode(p);
    RESULT=prop2;
    :}

;
PROP1::=
    IDENTIFICADOR:i1 OP_RELA:t IDENTIFICADOR:i2
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i2)));
    RESULT=prop1;
    :}
    |

    IDENTIFICADOR:i OP_RELA:t ENTERO:e
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("ENTERO", ((String) e)));
    RESULT=prop1;
    :}
    |
    ENTERO:e1 OP_RELA:t ENTERO:e2
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("ENTERO", ((String) e1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=prop1;
    :}
    |
    ENTERO:i1 OP_RELA:t IDENTIFICADOR:i2
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("ENTERO", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("ENTERO", ((String) i2))); 
    RESULT=prop1;
    :}    
    |

    IDENTIFICADOR:i1 OP_RELA:t CADENA:i2
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("CADENA", ((String) i2))); 
    RESULT=prop1;
    :}
    |
    CADENA:i1 OP_RELA:t CADENA:i2
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("CADENA", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("CADENA", ((String) i2))); 
    RESULT=prop1;
    :}
    |
    CADENA:i1 OP_RELA:t IDENTIFICADOR:i2
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("CADENA", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i2))); 
    RESULT=prop1;
    :}
    |

    IDENTIFICADOR:i1 OP_RELA:t DECIMAL:i2
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("DECIMAL", ((String) i2))); 
    RESULT=prop1;
    :}
    |
    DECIMAL:i1 OP_RELA:t DECIMAL:i2
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("DECIMAL", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("DECIMAL", ((String) i2))); 
    RESULT=prop1;
    :}
    |
    DECIMAL:i1 OP_RELA:t IDENTIFICADOR:i2
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("DECIMAL", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i2))); 
    RESULT=prop1;
    :}
    |

    IDENTIFICADOR:i1 OP_RELA:t SHOWCOORDENADAS:i2
    {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(i2); 
    RESULT=prop1;
    :}
    |
    SHOWCOORDENADAS:i1 OP_RELA:t SHOWCOORDENADAS:i2
        {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(i1);
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(i2); 
    RESULT=prop1;
    :}
    |
    SHOWCOORDENADAS:i1 OP_RELA:t IDENTIFICADOR:i2
        {:
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(i1);
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i2))); 
    RESULT=prop1;
    :}

    
;
OPERACION_ARITMETICA::=
    IDENTIFICADOR:i1 OP_SUMA:t OPERACION_ARITMETICA:oa
        {:
    Node operacionA= new Node("Op=Aritmetica");
    operacionA.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    operacionA.addNode(new Node("OP_SUMA", ((String) t)));
    operacionA.addNode(oa); 
    RESULT=operacionA;
    :}
    |
    ENTERO:i1 OP_SUMA:t OPERACION_ARITMETICA:oa
    {:
    Node operacionA= new Node("Op=Aritmetica");
    operacionA.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    operacionA.addNode(new Node("OP_SUMA", ((String) t)));
    operacionA.addNode(oa); 
    RESULT=operacionA;
    :}
    |
    DECIMAL:i1 OP_SUMA:t OPERACION_ARITMETICA:oa
        {:
    Node operacionA= new Node("Op=Aritmetica");
    operacionA.addNode(new Node("DECIMAL", ((String) i1)));
    operacionA.addNode(new Node("OP_SUMA", ((String) t)));
    operacionA.addNode(oa); 
    RESULT=operacionA;
    :}
    |
    IDENTIFICADOR:i1 OP_MULT:t OPERACION_ARITMETICA:oa
    {:
    Node operacionA= new Node("Op=Aritmetica");
    operacionA.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    operacionA.addNode(new Node("OP_MULT", ((String) t)));
    operacionA.addNode(oa); 
    RESULT=operacionA;
    :}
    |
    ENTERO:i1 OP_MULT:t OPERACION_ARITMETICA:oa
    {:
    Node operacionA= new Node("Op=Aritmetica");
    operacionA.addNode(new Node("ENTERO", ((String) i1)));
    operacionA.addNode(new Node("OP_MULT", ((String) t)));
    operacionA.addNode(oa); 
    RESULT=operacionA;
    :}
    |
    DECIMAL:i1 OP_MULT:t OPERACION_ARITMETICA:oa
    {:
    Node operacionA= new Node("Op=Aritmetica");
    operacionA.addNode(new Node("DECIMAL", ((String) i1)));
    operacionA.addNode(new Node("OP_MULT", ((String) t)));
    operacionA.addNode(oa); 
    RESULT=operacionA;
    :}
    |
    IDENTIFICADOR:i1 OP_DIV:t OPERACION_ARITMETICA:oa
    {:
    Node operacionA= new Node("Op=Aritmetica");
    operacionA.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    operacionA.addNode(new Node("OP_DIV", ((String) t)));
    operacionA.addNode(oa); 
    RESULT=operacionA;
    :}
    |
    ENTERO:i1 OP_DIV:t OPERACION_ARITMETICA:oa
    {:
    Node operacionA= new Node("Op=Aritmetica");
    operacionA.addNode(new Node("ENTERO", ((String) i1)));
    operacionA.addNode(new Node("OP_DIV", ((String) t)));
    operacionA.addNode(oa); 
    RESULT=operacionA;
    :}
    |
    DECIMAL:i1 OP_DIV:t OPERACION_ARITMETICA:oa
    {:
    Node operacionA= new Node("Op=Aritmetica");
    operacionA.addNode(new Node("DECIMAL", ((String) i1)));
    operacionA.addNode(new Node("OP_DIV", ((String) t)));
    operacionA.addNode(oa); 
    RESULT=operacionA;
    :}
    |
    ENTERO:i1
    {:
    Node operacionA= new Node("ENTERO");
    operacionA.addNode(new Node("ENTERO", ((String) i1)));
    RESULT=operacionA;
    :}
    |
    IDENTIFICADOR:i1
    {:
    Node operacionA= new Node("IDENTIFICADOR");
    operacionA.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    RESULT=operacionA;
    :}
    |
    DECIMAL:i1{:
    Node operacionA= new Node("DECIMAL");
    operacionA.addNode(new Node("DECIMAL", ((String) i1)));
    RESULT=operacionA;
    :}
;

IMPRIMIR::=
    ImpLn ParIzq CADENA:c CONCAT:c1 ParDer PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("ImpLn", "Println"));
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    :}
    |
    Imp ParIzq CADENA:c CONCAT:c1 ParDer  PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("Imp", "Print"));
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    :}
    |
    
    ImpLn ParIzq LLAMAR_METODO:c CONCAT:c1 ParDer PuntoComa
        {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("ImpLn", "Println"));
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    :}
    |
    Imp ParIzq LLAMAR_METODO:c CONCAT:c1 ParDer  PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("Imp", "Print"));
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    :}
    |
    
    ImpLn ParIzq SHOWCOORDENADAS:c CONCAT:c1 ParDer PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("ImpLn", "Println"));
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    :}
    |
    Imp ParIzq SHOWCOORDENADAS:c CONCAT:c1 ParDer  PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("Imp", "Print"));
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    :}| ImpLn error:e {: System.out.println("PRINTLN");Sintax.Print_Error(); :}
    |

    ImpLn ParIzq IDENTIFICADOR:c CONCAT:c1 ParDer PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("ImpLn", "Println"));
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    :}
    |
    Imp ParIzq IDENTIFICADOR:c CONCAT:c1 ParDer  PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("Imp", "Print"));
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    :}| Imp error:e {: System.out.println("PRINTLN");Sintax.Print_Error(); :}
;
CONCAT::=
    Coma CADENA:c CONCAT:c1
    {:
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(new Node("cadena", ((String) c)));
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    :}
    |
    Coma LLAMAR_METODO:c CONCAT:c1
    {:
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(c);
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    :}
    |
    Coma SHOWCOORDENADAS:c CONCAT:c1
    {:
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(c);
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    :}
    |
    Coma IDENTIFICADOR:c CONCAT:c1
    {:
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(new Node("IDENTIFICADOR", ((String) c)));
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    :}
    |
;
SWITCH_ESTRUCTURA::=
    Case ParIzq IDENTIFICADOR:i ParDer Of
        CASOS:c
        Default DosPuntos SENTENCIA:s
    EndCase
    {:
    Node Switch= new Node("switch");
    Switch.addNode(new Node("Case", "case"));
    Switch.addNode(new Node("IDENTIFICADOR", ((String) i)));
    Switch.addNode(c);
    Switch.addNode(new Node("Default", "default"));
    Switch.addNode(s);
    RESULT=Switch;
    :}|  Case error:e {: System.out.println("SWITCH");Sintax.Switch(); :}
;
CASOS::=
    CASOC:c
    {:
    Node caso= new Node("case");
    caso.addNode(c);
    RESULT=caso;
    :}
    |CASOE:c
    {:
    Node caso= new Node("case");
    caso.addNode(c);
    RESULT=caso;
    :}
    
;
CASOC::=
    CADENA:c DosPuntos SENTENCIA:s CASOC:c1
    {:
    Node casoc= new Node("caseC");
    casoc.addNode(new Node("cadena", ((String) c)));    
    casoc.addNode(s);    
    casoc.addNode(c1);
    RESULT=casoc;
    :}
    |
    CADENA:c DosPuntos SENTENCIA:s
    {:
    Node casoc= new Node("caseC");
    casoc.addNode(new Node("cadena", ((String) c)));    
    casoc.addNode(s);    
    RESULT=casoc;
    :}
;
CASOE::=
    ENTERO:e DosPuntos SENTENCIA:s CASOE:c1
    {:
    Node casoe= new Node("caseE");
    casoe.addNode(new Node("entero", ((String) e)));    
    casoe.addNode(s);    
    casoe.addNode(c1);
    RESULT=casoe;
    :}
    |
    ENTERO:e DosPuntos SENTENCIA:s
    {:
    Node casoe= new Node("caseE");
    casoe.addNode(new Node("entero", ((String) e)));    
    casoe.addNode(s);    
    RESULT=casoe;
    :}
;
LLAMAR_METODO::=
    IDENTIFICADOR:i ParIzq ARGUMENTO:a ParDer OP_SUMA:o OPERACION_ARITMETICA:oa
    {:
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    cmetodo.addNode(new Node("OP_SUMA", ((String) o)));
    cmetodo.addNode(oa);
    RESULT=cmetodo;
    :}
    |
    IDENTIFICADOR:i ParIzq ARGUMENTO:a ParDer OP_DIV:o OPERACION_ARITMETICA:oa
    {:
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    cmetodo.addNode(new Node("OP_DIV", ((String) o)));
    cmetodo.addNode(oa);
    RESULT=cmetodo;
    :}
    |
    IDENTIFICADOR:i ParIzq ARGUMENTO:a ParDer OP_MULT:o OPERACION_ARITMETICA:oa
    {:
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    cmetodo.addNode(new Node("OP_MULT", ((String) o)));
    cmetodo.addNode(oa);
    RESULT=cmetodo;
    :}
    |
    IDENTIFICADOR:i ParIzq ARGUMENTO:a ParDer 
    {:
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    RESULT=cmetodo;
    :}
    |
    IDENTIFICADOR:i ParIzq ParDer
    {:
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    RESULT=cmetodo;
    :}|  IDENTIFICADOR error:e {: System.out.println("FUNCION PARAMETRO");Sintax.Parametro_Error(); :}
;
ARGUMENTO::=
    OPERACION_ARITMETICA:oa Coma ARGUMENTO:a
    {:
    Node argumento= new Node("argumento");    
    argumento.addNode(oa);
    argumento.addNode(a);
    RESULT=argumento;
    :}
    |
    OPERACION_ARITMETICA:oa
    {:
    Node argumento= new Node("argumento");    
    argumento.addNode(oa);
    RESULT=argumento;
    :}
;

ENTRADA::=
    put IDENTIFICADOR:i PuntoComa
    {:
    Node entrada= new Node("Entrada");
    entrada.addNode(new Node("PUT", "put"));
    entrada.addNode(new Node("IDENTIFICADOR", ((String) i)));
    RESULT=entrada;
    :}|put error:e {: System.out.println("ENTRADA"); Sintax.Entrada_Error(); :}
;
SHOWCOORDENADAS::=
    IDENTIFICADOR:i SquareBIzq ENTERO:e SquareBDer
    {:
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("ENTERO", ((String) e)));
    RESULT=showCoor;
    :}
    |
    IDENTIFICADOR:i SquareBIzq ENTERO:e1 SquareBDer SquareBIzq ENTERO:e2 SquareBDer
    {:
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("ENTERO", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    :}
    |
    IDENTIFICADOR:i SquareBIzq CADENA:e1 SquareBDer
    {:
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("CADENA", ((String) e1)));
    RESULT=showCoor;
    :}
    |
    IDENTIFICADOR:i SquareBIzq CADENA:e1 SquareBDer SquareBIzq ENTERO:e2 SquareBDer
    {:
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("CADENA", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    :}
    |
    IDENTIFICADOR:i SquareBIzq DECIMAL:e1 SquareBDer
    {:
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("DECIMAL", ((String) e1)));
    RESULT=showCoor;
    :}
    |
    IDENTIFICADOR:i SquareBIzq DECIMAL:e1 SquareBDer SquareBIzq ENTERO:e2 SquareBDer
    {:
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("DECIMAL", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    :}
    |
    IDENTIFICADOR:i SquareBIzq IDENTIFICADOR:e1 SquareBDer
    {:
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) e1)));
    RESULT=showCoor;
    :}
    |
    IDENTIFICADOR:i SquareBIzq IDENTIFICADOR:e1 SquareBDer SquareBIzq ENTERO:e2 SquareBDer
    {:
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    :}
;
COMENTAR::=
    COMENTARIO
;