
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 28 22:38:03 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 28 22:38:03 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\023\004\000\002\023\003" +
    "\000\002\046\003\000\002\033\006\000\002\024\004\000" +
    "\002\024\003\000\002\024\004\000\002\024\003\000\002" +
    "\034\011\000\002\035\012\000\002\022\006\000\002\022" +
    "\004\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\002\000\002\037\004\000\002\040\004\000\002" +
    "\040\004\000\002\040\004\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\014\016\000\002\015\007\000" +
    "\002\016\010\000\002\016\007\000\002\017\010\000\002" +
    "\017\007\000\002\017\006\000\002\010\003\000\002\010" +
    "\003\000\002\011\007\000\002\011\007\000\002\011\007" +
    "\000\002\011\007\000\002\011\014\000\002\011\022\000" +
    "\002\011\007\000\002\011\007\000\002\011\007\000\002" +
    "\011\007\000\002\011\007\000\002\011\007\000\002\011" +
    "\007\000\002\011\007\000\002\011\007\000\002\013\005" +
    "\000\002\021\004\000\002\021\004\000\002\021\006\000" +
    "\002\021\011\000\002\021\004\000\002\021\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\007\007\000\002\007\005\000\002\006\007\000\002" +
    "\006\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\010\000\002\026\010\000\002\026\010\000\002\026" +
    "\010\000\002\026\010\000\002\026\010\000\002\026\010" +
    "\000\002\026\010\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\002\000\002" +
    "\020\014\000\002\030\003\000\002\030\003\000\002\031" +
    "\006\000\002\031\005\000\002\032\006\000\002\032\005" +
    "\000\002\041\010\000\002\041\010\000\002\041\010\000" +
    "\002\041\006\000\002\041\005\000\002\042\005\000\002" +
    "\042\003\000\002\043\004\000\002\044\006\000\002\044" +
    "\011\000\002\044\006\000\002\044\011\000\002\044\006" +
    "\000\002\044\011\000\002\044\006\000\002\044\011\000" +
    "\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\006\003\004\043\006\001\002\000\006\002" +
    "\ufffe\043\ufffe\001\002\000\026\002\ufffc\022\u0150\023\u0155" +
    "\024\u0151\025\u014f\026\u0154\027\u0158\043\ufffc\044\uffeb\047" +
    "\u0153\001\002\000\004\044\013\001\002\000\006\002\011" +
    "\043\006\001\002\000\006\002\uffff\043\uffff\001\002\000" +
    "\004\002\001\001\002\000\006\002\000\043\000\001\002" +
    "\000\044\003\037\004\026\013\015\017\046\022\027\023" +
    "\035\024\047\025\022\026\033\027\050\037\034\045\043" +
    "\046\016\051\021\053\023\075\042\101\045\001\002\000" +
    "\070\004\uffdd\005\uffdd\007\uffdd\011\uffdd\013\uffdd\016\uffdd" +
    "\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\037\uffdd\041\uffdd\042\uffdd\045\uffdd\046\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\075\uffdd\076\uffdd\077" +
    "\uffdd\101\uffdd\001\002\000\004\022\u0144\001\002\000\004" +
    "\066\u0133\001\002\000\070\004\uffe1\005\uffe1\007\uffe1\011" +
    "\uffe1\013\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\037\uffe1\041\uffe1\042" +
    "\uffe1\045\uffe1\046\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\075\uffe1\076\uffe1\077\uffe1\101\uffe1\001\002\000\044\004" +
    "\026\013\015\017\046\022\027\023\035\024\047\025\022" +
    "\026\033\027\050\037\034\045\043\046\016\051\021\052" +
    "\u0132\053\023\075\042\101\045\001\002\000\014\030\u012d" +
    "\075\060\076\065\077\u012e\100\063\001\002\000\004\075" +
    "\u011f\001\002\000\004\075\u011e\001\002\000\070\004\uffdb" +
    "\005\uffdb\007\uffdb\011\uffdb\013\uffdb\016\uffdb\017\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\037\uffdb\041\uffdb\042\uffdb\045\uffdb\046\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\075\uffdb\076\uffdb\077\uffdb\101\uffdb" +
    "\001\002\000\070\004\uffe5\005\uffe5\007\uffe5\011\uffe5\013" +
    "\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\037\uffe5\041\uffe5\042\uffe5\045" +
    "\uffe5\046\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\075\uffe5" +
    "\076\uffe5\077\uffe5\101\uffe5\001\002\000\016\030\162\066" +
    "\172\075\171\076\163\077\160\100\161\001\002\000\004" +
    "\075\u0107\001\002\000\070\004\uffcb\005\uffcb\007\uffcb\011" +
    "\uffcb\013\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\037\uffcb\041\uffcb\042" +
    "\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\101\uffcb\001\002\000\070\004" +
    "\uffdf\005\uffdf\007\uffdf\011\uffdf\013\uffdf\016\uffdf\017\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\037\uffdf\041\uffdf\042\uffdf\045\uffdf\046\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\075\uffdf\076\uffdf\077\uffdf\101" +
    "\uffdf\001\002\000\070\004\uffcc\005\uffcc\007\uffcc\011\uffcc" +
    "\013\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\037\uffcc\041\uffcc\042\uffcc" +
    "\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\075" +
    "\uffcc\076\uffcc\077\uffcc\101\uffcc\001\002\000\004\075\365" +
    "\001\002\000\004\066\342\001\002\000\004\075\331\001" +
    "\002\000\070\004\uffd5\005\uffd5\007\uffd5\011\uffd5\013\uffd5" +
    "\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\037\uffd5\041\uffd5\042\uffd5\045\uffd5" +
    "\046\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\075\uffd5\076" +
    "\uffd5\077\uffd5\101\uffd5\001\002\000\070\004\uffd4\005\uffd4" +
    "\007\uffd4\011\uffd4\013\uffd4\016\uffd4\017\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\037\uffd4" +
    "\041\uffd4\042\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\075\uffd4\076\uffd4\077\uffd4\101\uffd4\001\002" +
    "\000\070\004\uffd9\005\uffd9\007\uffd9\011\uffd9\013\uffd9\016" +
    "\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\037\uffd9\041\uffd9\042\uffd9\045\uffd9\046" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\075\uffd9\076\uffd9" +
    "\077\uffd9\101\uffd9\001\002\000\070\004\uffd7\005\uffd7\007" +
    "\uffd7\011\uffd7\013\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\037\uffd7\041" +
    "\uffd7\042\uffd7\045\uffd7\046\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\075\uffd7\076\uffd7\077\uffd7\101\uffd7\001\002\000" +
    "\004\036\275\001\002\000\004\066\243\001\002\000\070" +
    "\004\uffe3\005\uffe3\007\uffe3\011\uffe3\013\uffe3\016\uffe3\017" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\037\uffe3\041\uffe3\042\uffe3\045\uffe3\046\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\075\uffe3\076\uffe3\077\uffe3" +
    "\101\uffe3\001\002\000\070\004\uff69\005\uff69\007\uff69\011" +
    "\uff69\013\uff69\016\uff69\017\uff69\021\uff69\022\uff69\023\uff69" +
    "\024\uff69\025\uff69\026\uff69\027\uff69\037\uff69\041\uff69\042" +
    "\uff69\045\uff69\046\uff69\050\uff69\051\uff69\052\uff69\053\uff69" +
    "\075\uff69\076\uff69\077\uff69\101\uff69\001\002\000\016\030" +
    "\162\066\172\075\171\076\163\077\160\100\161\001\002" +
    "\000\004\075\122\001\002\000\004\075\051\001\002\000" +
    "\004\036\052\001\002\000\006\030\055\075\054\001\002" +
    "\000\004\056\121\001\002\000\004\066\057\001\002\000" +
    "\004\056\056\001\002\000\070\004\uffc7\005\uffc7\007\uffc7" +
    "\011\uffc7\013\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\037\uffc7\041\uffc7" +
    "\042\uffc7\045\uffc7\046\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\075\uffc7\076\uffc7\077\uffc7\101\uffc7\001\002\000\012" +
    "\067\064\075\060\076\065\100\063\001\002\000\016\031" +
    "\115\032\113\033\114\056\uff8f\060\uff8f\067\uff8f\001\002" +
    "\000\006\060\111\067\uff73\001\002\000\004\067\102\001" +
    "\002\000\016\031\075\032\074\033\076\056\uff8e\060\uff8e" +
    "\067\uff8e\001\002\000\010\056\uff75\060\uff75\067\uff75\001" +
    "\002\000\016\031\067\032\066\033\070\056\uff90\060\uff90" +
    "\067\uff90\001\002\000\010\075\060\076\065\100\063\001" +
    "\002\000\010\075\060\076\065\100\063\001\002\000\010" +
    "\075\060\076\065\100\063\001\002\000\010\056\uff92\060" +
    "\uff92\067\uff92\001\002\000\010\056\uff98\060\uff98\067\uff98" +
    "\001\002\000\010\056\uff95\060\uff95\067\uff95\001\002\000" +
    "\010\075\060\076\065\100\063\001\002\000\010\075\060" +
    "\076\065\100\063\001\002\000\010\075\060\076\065\100" +
    "\063\001\002\000\010\056\uff91\060\uff91\067\uff91\001\002" +
    "\000\010\056\uff97\060\uff97\067\uff97\001\002\000\010\056" +
    "\uff94\060\uff94\067\uff94\001\002\000\016\031\105\032\103" +
    "\033\104\056\uff76\060\uff76\067\uff76\001\002\000\010\075" +
    "\060\076\065\100\063\001\002\000\010\075\060\076\065" +
    "\100\063\001\002\000\010\075\060\076\065\100\063\001" +
    "\002\000\010\056\uff79\060\uff79\067\uff79\001\002\000\010" +
    "\056\uff78\060\uff78\067\uff78\001\002\000\010\056\uff77\060" +
    "\uff77\067\uff77\001\002\000\010\075\060\076\065\100\063" +
    "\001\002\000\004\067\uff74\001\002\000\010\075\060\076" +
    "\065\100\063\001\002\000\010\075\060\076\065\100\063" +
    "\001\002\000\010\075\060\076\065\100\063\001\002\000" +
    "\010\056\uff99\060\uff99\067\uff99\001\002\000\010\056\uff93" +
    "\060\uff93\067\uff93\001\002\000\010\056\uff96\060\uff96\067" +
    "\uff96\001\002\000\070\004\uffc1\005\uffc1\007\uffc1\011\uffc1" +
    "\013\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\037\uffc1\041\uffc1\042\uffc1" +
    "\045\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\075" +
    "\uffc1\076\uffc1\077\uffc1\101\uffc1\001\002\000\004\036\123" +
    "\001\002\000\006\075\125\077\127\001\002\000\004\056" +
    "\157\001\002\000\006\066\057\070\132\001\002\000\004" +
    "\056\131\001\002\000\004\056\130\001\002\000\070\004" +
    "\uffc9\005\uffc9\007\uffc9\011\uffc9\013\uffc9\016\uffc9\017\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\037\uffc9\041\uffc9\042\uffc9\045\uffc9\046\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\075\uffc9\076\uffc9\077\uffc9\101" +
    "\uffc9\001\002\000\070\004\uffbd\005\uffbd\007\uffbd\011\uffbd" +
    "\013\uffbd\016\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\037\uffbd\041\uffbd\042\uffbd" +
    "\045\uffbd\046\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\075" +
    "\uffbd\076\uffbd\077\uffbd\101\uffbd\001\002\000\012\075\133" +
    "\076\136\077\135\100\134\001\002\000\004\071\153\001" +
    "\002\000\004\071\147\001\002\000\004\071\143\001\002" +
    "\000\004\071\137\001\002\000\020\012\uff71\020\uff71\035" +
    "\uff71\056\uff71\060\uff71\067\uff71\070\140\001\002\000\004" +
    "\076\141\001\002\000\004\071\142\001\002\000\016\012" +
    "\uff70\020\uff70\035\uff70\056\uff70\060\uff70\067\uff70\001\002" +
    "\000\020\012\uff6f\020\uff6f\035\uff6f\056\uff6f\060\uff6f\067" +
    "\uff6f\070\144\001\002\000\004\076\145\001\002\000\004" +
    "\071\146\001\002\000\016\012\uff6e\020\uff6e\035\uff6e\056" +
    "\uff6e\060\uff6e\067\uff6e\001\002\000\020\012\uff6d\020\uff6d" +
    "\035\uff6d\056\uff6d\060\uff6d\067\uff6d\070\150\001\002\000" +
    "\004\076\151\001\002\000\004\071\152\001\002\000\016" +
    "\012\uff6c\020\uff6c\035\uff6c\056\uff6c\060\uff6c\067\uff6c\001" +
    "\002\000\020\012\uff6b\020\uff6b\035\uff6b\056\uff6b\060\uff6b" +
    "\067\uff6b\070\154\001\002\000\004\076\155\001\002\000" +
    "\004\071\156\001\002\000\016\012\uff6a\020\uff6a\035\uff6a" +
    "\056\uff6a\060\uff6a\067\uff6a\001\002\000\070\004\uffc3\005" +
    "\uffc3\007\uffc3\011\uffc3\013\uffc3\016\uffc3\017\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\037" +
    "\uffc3\041\uffc3\042\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\075\uffc3\076\uffc3\077\uffc3\101\uffc3\001" +
    "\002\000\004\035\240\001\002\000\004\035\235\001\002" +
    "\000\006\012\uffab\020\uffab\001\002\000\004\035\232\001" +
    "\002\000\004\035\227\001\002\000\006\012\uffac\020\uffac" +
    "\001\002\000\006\012\uffad\020\uffad\001\002\000\006\012" +
    "\uffae\020\uffae\001\002\000\004\020\213\001\002\000\006" +
    "\035\205\070\132\001\002\000\014\066\173\075\171\076" +
    "\163\077\160\100\161\001\002\000\012\075\171\076\163" +
    "\077\160\100\161\001\002\000\004\067\201\001\002\000" +
    "\004\067\176\001\002\000\012\012\uffa7\020\uffa7\034\177" +
    "\067\uffa7\001\002\000\004\066\173\001\002\000\010\012" +
    "\uffa8\020\uffa8\067\uffa8\001\002\000\010\012\uffa9\020\uffa9" +
    "\034\202\001\002\000\004\066\203\001\002\000\004\066" +
    "\173\001\002\000\006\012\uffaa\020\uffaa\001\002\000\012" +
    "\075\206\076\211\077\212\100\210\001\002\000\012\012" +
    "\uffa6\020\uffa6\067\uffa6\070\132\001\002\000\010\012\uff9c" +
    "\020\uff9c\067\uff9c\001\002\000\010\012\uff9f\020\uff9f\067" +
    "\uff9f\001\002\000\010\012\uffa5\020\uffa5\067\uffa5\001\002" +
    "\000\010\012\uffa2\020\uffa2\067\uffa2\001\002\000\044\003" +
    "\037\004\026\013\015\017\046\022\027\023\035\024\047" +
    "\025\022\026\033\027\050\037\034\045\043\046\016\051" +
    "\021\053\023\075\042\101\045\001\002\000\044\004\026" +
    "\013\015\017\046\021\221\022\027\023\035\024\047\025" +
    "\022\026\033\027\050\037\034\045\043\046\016\051\021" +
    "\053\023\075\042\101\045\001\002\000\070\004\uffde\005" +
    "\uffde\007\uffde\011\uffde\013\uffde\016\uffde\017\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\037" +
    "\uffde\041\uffde\042\uffde\045\uffde\046\uffde\050\uffde\051\uffde" +
    "\052\uffde\053\uffde\075\uffde\076\uffde\077\uffde\101\uffde\001" +
    "\002\000\070\004\uffe2\005\uffe2\007\uffe2\011\uffe2\013\uffe2" +
    "\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\037\uffe2\041\uffe2\042\uffe2\045\uffe2" +
    "\046\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\075\uffe2\076" +
    "\uffe2\077\uffe2\101\uffe2\001\002\000\070\004\uffdc\005\uffdc" +
    "\007\uffdc\011\uffdc\013\uffdc\016\uffdc\017\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\037\uffdc" +
    "\041\uffdc\042\uffdc\045\uffdc\046\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\075\uffdc\076\uffdc\077\uffdc\101\uffdc\001\002" +
    "\000\070\004\uffe6\005\uffe6\007\uffe6\011\uffe6\013\uffe6\016" +
    "\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\037\uffe6\041\uffe6\042\uffe6\045\uffe6\046" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\075\uffe6\076\uffe6" +
    "\077\uffe6\101\uffe6\001\002\000\070\004\uffd2\005\uffd2\007" +
    "\uffd2\011\uffd2\013\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\037\uffd2\041" +
    "\uffd2\042\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\075\uffd2\076\uffd2\077\uffd2\101\uffd2\001\002\000" +
    "\070\004\uffe0\005\uffe0\007\uffe0\011\uffe0\013\uffe0\016\uffe0" +
    "\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\037\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\075\uffe0\076\uffe0\077" +
    "\uffe0\101\uffe0\001\002\000\070\004\uffd6\005\uffd6\007\uffd6" +
    "\011\uffd6\013\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\037\uffd6\041\uffd6" +
    "\042\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\075\uffd6\076\uffd6\077\uffd6\101\uffd6\001\002\000\070" +
    "\004\uffda\005\uffda\007\uffda\011\uffda\013\uffda\016\uffda\017" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\037\uffda\041\uffda\042\uffda\045\uffda\046\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\075\uffda\076\uffda\077\uffda" +
    "\101\uffda\001\002\000\070\004\uffd8\005\uffd8\007\uffd8\011" +
    "\uffd8\013\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\037\uffd8\041\uffd8\042" +
    "\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\075\uffd8\076\uffd8\077\uffd8\101\uffd8\001\002\000\070\004" +
    "\uffe4\005\uffe4\007\uffe4\011\uffe4\013\uffe4\016\uffe4\017\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\037\uffe4\041\uffe4\042\uffe4\045\uffe4\046\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\075\uffe4\076\uffe4\077\uffe4\101" +
    "\uffe4\001\002\000\004\075\230\001\002\000\012\012\uff9a" +
    "\020\uff9a\067\uff9a\070\132\001\002\000\010\012\uff9b\020" +
    "\uff9b\067\uff9b\001\002\000\006\075\233\076\234\001\002" +
    "\000\010\012\uffa3\020\uffa3\067\uffa3\001\002\000\010\012" +
    "\uffa4\020\uffa4\067\uffa4\001\002\000\006\075\236\100\237" +
    "\001\002\000\010\012\uff9d\020\uff9d\067\uff9d\001\002\000" +
    "\010\012\uff9e\020\uff9e\067\uff9e\001\002\000\006\075\241" +
    "\077\242\001\002\000\010\012\uffa0\020\uffa0\067\uffa0\001" +
    "\002\000\010\012\uffa1\020\uffa1\067\uffa1\001\002\000\006" +
    "\075\245\077\247\001\002\000\006\060\250\067\uff81\001" +
    "\002\000\012\060\250\066\057\067\uff81\070\132\001\002" +
    "\000\006\060\250\067\uff81\001\002\000\006\060\250\067" +
    "\uff81\001\002\000\006\075\255\077\257\001\002\000\004" +
    "\067\252\001\002\000\004\056\253\001\002\000\070\004" +
    "\uff8d\005\uff8d\007\uff8d\011\uff8d\013\uff8d\016\uff8d\017\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\037\uff8d\041\uff8d\042\uff8d\045\uff8d\046\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\075\uff8d\076\uff8d\077\uff8d\101" +
    "\uff8d\001\002\000\006\060\250\067\uff81\001\002\000\012" +
    "\060\250\066\057\067\uff81\070\132\001\002\000\006\060" +
    "\250\067\uff81\001\002\000\006\060\250\067\uff81\001\002" +
    "\000\004\067\uff85\001\002\000\004\067\uff83\001\002\000" +
    "\004\067\uff82\001\002\000\004\067\uff84\001\002\000\004" +
    "\067\265\001\002\000\004\056\266\001\002\000\070\004" +
    "\uff89\005\uff89\007\uff89\011\uff89\013\uff89\016\uff89\017\uff89" +
    "\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027" +
    "\uff89\037\uff89\041\uff89\042\uff89\045\uff89\046\uff89\050\uff89" +
    "\051\uff89\052\uff89\053\uff89\075\uff89\076\uff89\077\uff89\101" +
    "\uff89\001\002\000\004\067\270\001\002\000\004\056\271" +
    "\001\002\000\070\004\uff87\005\uff87\007\uff87\011\uff87\013" +
    "\uff87\016\uff87\017\uff87\021\uff87\022\uff87\023\uff87\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\037\uff87\041\uff87\042\uff87\045" +
    "\uff87\046\uff87\050\uff87\051\uff87\052\uff87\053\uff87\075\uff87" +
    "\076\uff87\077\uff87\101\uff87\001\002\000\004\067\273\001" +
    "\002\000\004\056\274\001\002\000\070\004\uff8b\005\uff8b" +
    "\007\uff8b\011\uff8b\013\uff8b\016\uff8b\017\uff8b\021\uff8b\022" +
    "\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\037\uff8b" +
    "\041\uff8b\042\uff8b\045\uff8b\046\uff8b\050\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\075\uff8b\076\uff8b\077\uff8b\101\uff8b\001\002" +
    "\000\016\030\301\072\277\075\304\076\065\077\276\100" +
    "\063\001\002\000\004\056\330\001\002\000\010\076\312" +
    "\077\313\100\311\001\002\000\004\056\307\001\002\000" +
    "\004\056\306\001\002\000\070\004\uffbb\005\uffbb\007\uffbb" +
    "\011\uffbb\013\uffbb\016\uffbb\017\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\037\uffbb\041\uffbb" +
    "\042\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\075\uffbb\076\uffbb\077\uffbb\101\uffbb\001\002\000\004" +
    "\056\305\001\002\000\014\031\115\032\113\033\114\056" +
    "\uff8f\066\057\001\002\000\070\004\uffb6\005\uffb6\007\uffb6" +
    "\011\uffb6\013\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\037\uffb6\041\uffb6" +
    "\042\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\075\uffb6\076\uffb6\077\uffb6\101\uffb6\001\002\000\070" +
    "\004\uffb9\005\uffb9\007\uffb9\011\uffb9\013\uffb9\016\uffb9\017" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\037\uffb9\041\uffb9\042\uffb9\045\uffb9\046\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\101\uffb9\001\002\000\070\004\uffb5\005\uffb5\007\uffb5\011" +
    "\uffb5\013\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\037\uffb5\041\uffb5\042" +
    "\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\075\uffb5\076\uffb5\077\uffb5\101\uffb5\001\002\000\004\073" +
    "\322\001\002\000\006\060\320\073\uffaf\001\002\000\006" +
    "\060\316\073\uffb1\001\002\000\006\060\314\073\uffb0\001" +
    "\002\000\010\076\312\077\313\100\311\001\002\000\004" +
    "\073\uffb3\001\002\000\010\076\312\077\313\100\311\001" +
    "\002\000\004\073\uffb4\001\002\000\010\076\312\077\313" +
    "\100\311\001\002\000\004\073\uffb2\001\002\000\006\056" +
    "\323\072\324\001\002\000\070\004\uffb8\005\uffb8\007\uffb8" +
    "\011\uffb8\013\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\037\uffb8\041\uffb8" +
    "\042\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\075\uffb8\076\uffb8\077\uffb8\101\uffb8\001\002\000\010" +
    "\076\312\077\313\100\311\001\002\000\004\073\326\001" +
    "\002\000\004\056\327\001\002\000\070\004\uffb7\005\uffb7" +
    "\007\uffb7\011\uffb7\013\uffb7\016\uffb7\017\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\037\uffb7" +
    "\041\uffb7\042\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\075\uffb7\076\uffb7\077\uffb7\101\uffb7\001\002" +
    "\000\070\004\uffba\005\uffba\007\uffba\011\uffba\013\uffba\016" +
    "\uffba\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\037\uffba\041\uffba\042\uffba\045\uffba\046" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\075\uffba\076\uffba" +
    "\077\uffba\101\uffba\001\002\000\004\036\332\001\002\000" +
    "\010\075\334\076\065\100\063\001\002\000\004\056\341" +
    "\001\002\000\016\031\115\032\113\033\114\056\uff8f\066" +
    "\057\070\132\001\002\000\004\056\340\001\002\000\004" +
    "\056\337\001\002\000\070\004\uffbc\005\uffbc\007\uffbc\011" +
    "\uffbc\013\uffbc\016\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\037\uffbc\041\uffbc\042" +
    "\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\075\uffbc\076\uffbc\077\uffbc\101\uffbc\001\002\000\070\004" +
    "\uffc8\005\uffc8\007\uffc8\011\uffc8\013\uffc8\016\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\037\uffc8\041\uffc8\042\uffc8\045\uffc8\046\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\075\uffc8\076\uffc8\077\uffc8\101" +
    "\uffc8\001\002\000\070\004\uffc2\005\uffc2\007\uffc2\011\uffc2" +
    "\013\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\037\uffc2\041\uffc2\042\uffc2" +
    "\045\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\075" +
    "\uffc2\076\uffc2\077\uffc2\101\uffc2\001\002\000\004\075\343" +
    "\001\002\000\004\067\344\001\002\000\004\040\345\001" +
    "\002\000\006\076\352\077\351\001\002\000\004\041\361" +
    "\001\002\000\004\041\uff7e\001\002\000\004\041\uff7f\001" +
    "\002\000\004\055\356\001\002\000\004\055\353\001\002" +
    "\000\044\003\037\004\026\013\015\017\046\022\027\023" +
    "\035\024\047\025\022\026\033\027\050\037\034\045\043" +
    "\046\016\051\021\053\023\075\042\101\045\001\002\000" +
    "\046\004\026\013\015\017\046\022\027\023\035\024\047" +
    "\025\022\026\033\027\050\037\034\041\uff7a\045\043\046" +
    "\016\051\021\053\023\075\042\076\352\101\045\001\002" +
    "\000\004\041\uff7b\001\002\000\044\003\037\004\026\013" +
    "\015\017\046\022\027\023\035\024\047\025\022\026\033" +
    "\027\050\037\034\045\043\046\016\051\021\053\023\075" +
    "\042\101\045\001\002\000\046\004\026\013\015\017\046" +
    "\022\027\023\035\024\047\025\022\026\033\027\050\037" +
    "\034\041\uff7c\045\043\046\016\051\021\053\023\075\042" +
    "\077\351\101\045\001\002\000\004\041\uff7d\001\002\000" +
    "\004\055\362\001\002\000\044\003\037\004\026\013\015" +
    "\017\046\022\027\023\035\024\047\025\022\026\033\027" +
    "\050\037\034\045\043\046\016\051\021\053\023\075\042" +
    "\101\045\001\002\000\044\004\026\013\015\017\046\022" +
    "\027\023\035\024\047\025\022\026\033\027\050\037\034" +
    "\042\364\045\043\046\016\051\021\053\023\075\042\101" +
    "\045\001\002\000\070\004\uff80\005\uff80\007\uff80\011\uff80" +
    "\013\uff80\016\uff80\017\uff80\021\uff80\022\uff80\023\uff80\024" +
    "\uff80\025\uff80\026\uff80\027\uff80\037\uff80\041\uff80\042\uff80" +
    "\045\uff80\046\uff80\050\uff80\051\uff80\052\uff80\053\uff80\075" +
    "\uff80\076\uff80\077\uff80\101\uff80\001\002\000\006\036\367" +
    "\066\366\001\002\000\004\076\372\001\002\000\004\075" +
    "\054\001\002\000\004\056\371\001\002\000\070\004\uffbf" +
    "\005\uffbf\007\uffbf\011\uffbf\013\uffbf\016\uffbf\017\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\037\uffbf\041\uffbf\042\uffbf\045\uffbf\046\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\075\uffbf\076\uffbf\077\uffbf\101\uffbf" +
    "\001\002\000\004\067\373\001\002\000\004\066\374\001" +
    "\002\000\004\076\375\001\002\000\004\067\376\001\002" +
    "\000\004\036\377\001\002\000\004\072\u0100\001\002\000" +
    "\010\076\312\077\313\100\311\001\002\000\004\073\u0102" +
    "\001\002\000\004\072\u0103\001\002\000\010\076\312\077" +
    "\313\100\311\001\002\000\004\073\u0105\001\002\000\004" +
    "\056\u0106\001\002\000\070\004\uffc5\005\uffc5\007\uffc5\011" +
    "\uffc5\013\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\037\uffc5\041\uffc5\042" +
    "\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\101\uffc5\001\002\000\004\036" +
    "\u0108\001\002\000\010\075\334\076\065\100\063\001\002" +
    "\000\004\056\u010e\001\002\000\004\056\u010d\001\002\000" +
    "\004\056\u010c\001\002\000\070\004\uffbe\005\uffbe\007\uffbe" +
    "\011\uffbe\013\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\037\uffbe\041\uffbe" +
    "\042\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\075\uffbe\076\uffbe\077\uffbe\101\uffbe\001\002\000\070" +
    "\004\uffca\005\uffca\007\uffca\011\uffca\013\uffca\016\uffca\017" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\037\uffca\041\uffca\042\uffca\045\uffca\046\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\075\uffca\076\uffca\077\uffca" +
    "\101\uffca\001\002\000\070\004\uffc4\005\uffc4\007\uffc4\011" +
    "\uffc4\013\uffc4\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\037\uffc4\041\uffc4\042" +
    "\uffc4\045\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\101\uffc4\001\002\000\004\012" +
    "\u0110\001\002\000\044\003\037\004\026\013\015\017\046" +
    "\022\027\023\035\024\047\025\022\026\033\027\050\037" +
    "\034\045\043\046\016\051\021\053\023\075\042\101\045" +
    "\001\002\000\044\004\026\005\u0112\013\015\017\046\022" +
    "\027\023\035\024\047\025\022\026\033\027\050\037\034" +
    "\045\043\046\016\051\021\053\023\075\042\101\045\001" +
    "\002\000\074\004\uffd0\005\uffd0\006\u0115\007\uffd0\010\u0114" +
    "\011\uffd0\013\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\037\uffd0\041\uffd0" +
    "\042\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\101\uffd0\001\002\000\070" +
    "\004\uffd1\005\uffd1\007\uffd1\011\uffd1\013\uffd1\016\uffd1\017" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\037\uffd1\041\uffd1\042\uffd1\045\uffd1\046\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\075\uffd1\076\uffd1\077\uffd1" +
    "\101\uffd1\001\002\000\016\030\162\066\172\075\171\076" +
    "\163\077\160\100\161\001\002\000\004\012\u0116\001\002" +
    "\000\044\003\037\004\026\013\015\017\046\022\027\023" +
    "\035\024\047\025\022\026\033\027\050\037\034\045\043" +
    "\046\016\051\021\053\023\075\042\101\045\001\002\000" +
    "\044\004\026\007\u0118\013\015\017\046\022\027\023\035" +
    "\024\047\025\022\026\033\027\050\037\034\045\043\046" +
    "\016\051\021\053\023\075\042\101\045\001\002\000\070" +
    "\004\uffcd\005\uffcd\007\uffcd\011\uffcd\013\uffcd\016\uffcd\017" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\037\uffcd\041\uffcd\042\uffcd\045\uffcd\046\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\075\uffcd\076\uffcd\077\uffcd" +
    "\101\uffcd\001\002\000\004\012\u011a\001\002\000\044\003" +
    "\037\004\026\013\015\017\046\022\027\023\035\024\047" +
    "\025\022\026\033\027\050\037\034\045\043\046\016\051" +
    "\021\053\023\075\042\101\045\001\002\000\044\004\026" +
    "\011\u011c\013\015\017\046\022\027\023\035\024\047\025" +
    "\022\026\033\027\050\037\034\045\043\046\016\051\021" +
    "\053\023\075\042\101\045\001\002\000\074\004\uffce\005" +
    "\uffce\006\u0115\007\uffce\010\u0114\011\uffce\013\uffce\016\uffce" +
    "\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\037\uffce\041\uffce\042\uffce\045\uffce\046\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\075\uffce\076\uffce\077" +
    "\uffce\101\uffce\001\002\000\070\004\uffcf\005\uffcf\007\uffcf" +
    "\011\uffcf\013\uffcf\016\uffcf\017\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\037\uffcf\041\uffcf" +
    "\042\uffcf\045\uffcf\046\uffcf\050\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\075\uffcf\076\uffcf\077\uffcf\101\uffcf\001\002\000\070" +
    "\004\uff72\005\uff72\007\uff72\011\uff72\013\uff72\016\uff72\017" +
    "\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72" +
    "\027\uff72\037\uff72\041\uff72\042\uff72\045\uff72\046\uff72\050" +
    "\uff72\051\uff72\052\uff72\053\uff72\075\uff72\076\uff72\077\uff72" +
    "\101\uff72\001\002\000\006\036\u0121\066\u0120\001\002\000" +
    "\004\076\u0124\001\002\000\004\075\054\001\002\000\004" +
    "\056\u0123\001\002\000\070\004\uffc0\005\uffc0\007\uffc0\011" +
    "\uffc0\013\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\037\uffc0\041\uffc0\042" +
    "\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\101\uffc0\001\002\000\004\067" +
    "\u0125\001\002\000\004\036\u0126\001\002\000\004\072\u0127" +
    "\001\002\000\010\076\312\077\313\100\311\001\002\000" +
    "\004\073\u0129\001\002\000\004\056\u012a\001\002\000\070" +
    "\004\uffc6\005\uffc6\007\uffc6\011\uffc6\013\uffc6\016\uffc6\017" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\037\uffc6\041\uffc6\042\uffc6\045\uffc6\046\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\075\uffc6\076\uffc6\077\uffc6" +
    "\101\uffc6\001\002\000\070\004\uffea\005\uffea\007\uffea\011" +
    "\uffea\013\uffea\016\uffea\017\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\037\uffea\041\uffea\042" +
    "\uffea\045\uffea\046\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\075\uffea\076\uffea\077\uffea\101\uffea\001\002\000\004\056" +
    "\u0131\001\002\000\004\056\u0130\001\002\000\004\056\u012f" +
    "\001\002\000\070\004\uffe8\005\uffe8\007\uffe8\011\uffe8\013" +
    "\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\037\uffe8\041\uffe8\042\uffe8\045" +
    "\uffe8\046\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\075\uffe8" +
    "\076\uffe8\077\uffe8\101\uffe8\001\002\000\070\004\uffe7\005" +
    "\uffe7\007\uffe7\011\uffe7\013\uffe7\016\uffe7\017\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\037" +
    "\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\075\uffe7\076\uffe7\077\uffe7\101\uffe7\001" +
    "\002\000\070\004\uffe9\005\uffe9\007\uffe9\011\uffe9\013\uffe9" +
    "\016\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\037\uffe9\041\uffe9\042\uffe9\045\uffe9" +
    "\046\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\075\uffe9\076" +
    "\uffe9\077\uffe9\101\uffe9\001\002\000\026\002\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\043\ufffa\044" +
    "\ufffa\047\ufffa\001\002\000\006\075\u0135\077\u0137\001\002" +
    "\000\006\060\250\067\uff81\001\002\000\012\060\250\066" +
    "\057\067\uff81\070\132\001\002\000\006\060\250\067\uff81" +
    "\001\002\000\006\060\250\067\uff81\001\002\000\004\067" +
    "\u0139\001\002\000\004\056\u013a\001\002\000\070\004\uff8c" +
    "\005\uff8c\007\uff8c\011\uff8c\013\uff8c\016\uff8c\017\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c" +
    "\037\uff8c\041\uff8c\042\uff8c\045\uff8c\046\uff8c\050\uff8c\051" +
    "\uff8c\052\uff8c\053\uff8c\075\uff8c\076\uff8c\077\uff8c\101\uff8c" +
    "\001\002\000\004\067\u013c\001\002\000\004\056\u013d\001" +
    "\002\000\070\004\uff88\005\uff88\007\uff88\011\uff88\013\uff88" +
    "\016\uff88\017\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\037\uff88\041\uff88\042\uff88\045\uff88" +
    "\046\uff88\050\uff88\051\uff88\052\uff88\053\uff88\075\uff88\076" +
    "\uff88\077\uff88\101\uff88\001\002\000\004\067\u013f\001\002" +
    "\000\004\056\u0140\001\002\000\070\004\uff86\005\uff86\007" +
    "\uff86\011\uff86\013\uff86\016\uff86\017\uff86\021\uff86\022\uff86" +
    "\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\037\uff86\041" +
    "\uff86\042\uff86\045\uff86\046\uff86\050\uff86\051\uff86\052\uff86" +
    "\053\uff86\075\uff86\076\uff86\077\uff86\101\uff86\001\002\000" +
    "\004\067\u0142\001\002\000\004\056\u0143\001\002\000\070" +
    "\004\uff8a\005\uff8a\007\uff8a\011\uff8a\013\uff8a\016\uff8a\017" +
    "\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a" +
    "\027\uff8a\037\uff8a\041\uff8a\042\uff8a\045\uff8a\046\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\075\uff8a\076\uff8a\077\uff8a" +
    "\101\uff8a\001\002\000\004\075\u0145\001\002\000\004\036" +
    "\u0146\001\002\000\004\076\u0147\001\002\000\004\014\u0148" +
    "\001\002\000\004\015\u0149\001\002\000\004\066\u014a\001" +
    "\002\000\012\075\171\076\163\077\160\100\161\001\002" +
    "\000\004\067\u014c\001\002\000\044\003\037\004\026\013" +
    "\015\017\046\022\027\023\035\024\047\025\022\026\033" +
    "\027\050\037\034\045\043\046\016\051\021\053\023\075" +
    "\042\101\045\001\002\000\044\004\026\013\015\016\u014e" +
    "\017\046\022\027\023\035\024\047\025\022\026\033\027" +
    "\050\037\034\045\043\046\016\051\021\053\023\075\042" +
    "\101\045\001\002\000\070\004\uffd3\005\uffd3\007\uffd3\011" +
    "\uffd3\013\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\037\uffd3\041\uffd3\042" +
    "\uffd3\045\uffd3\046\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\075\uffd3\076\uffd3\077\uffd3\101\uffd3\001\002\000\006\044" +
    "\uffee\075\uffee\001\002\000\006\044\ufff1\075\ufff1\001\002" +
    "\000\006\044\uffef\075\uffef\001\002\000\026\002\ufff6\022" +
    "\u0150\023\u0155\024\u0151\025\u014f\026\u0154\027\u0158\043\ufff6" +
    "\044\uffeb\047\u0153\001\002\000\004\044\u0166\001\002\000" +
    "\006\044\uffed\075\uffed\001\002\000\006\044\ufff0\075\ufff0" +
    "\001\002\000\004\044\u015b\001\002\000\006\002\ufffd\043" +
    "\ufffd\001\002\000\006\044\uffec\075\uffec\001\002\000\026" +
    "\002\ufff8\022\u0150\023\u0155\024\u0151\025\u014f\026\u0154\027" +
    "\u0158\043\ufff8\044\uffeb\047\u0153\001\002\000\006\002\ufff9" +
    "\043\ufff9\001\002\000\004\075\u015c\001\002\000\004\066" +
    "\u015d\001\002\000\020\022\u0150\023\u0155\024\u0151\025\u014f" +
    "\026\u0154\027\u0158\075\uffeb\001\002\000\004\067\u0163\001" +
    "\002\000\004\075\u0160\001\002\000\006\060\u0161\067\ufff2" +
    "\001\002\000\020\022\u0150\023\u0155\024\u0151\025\u014f\026" +
    "\u0154\027\u0158\075\uffeb\001\002\000\004\067\ufff3\001\002" +
    "\000\044\003\037\004\026\013\015\017\046\022\027\023" +
    "\035\024\047\025\022\026\033\027\050\037\034\045\043" +
    "\046\016\051\021\053\023\075\042\101\045\001\002\000" +
    "\044\004\026\013\015\017\046\022\027\023\035\024\047" +
    "\025\022\026\033\027\050\037\034\045\043\046\016\050" +
    "\u0165\051\021\053\023\075\042\101\045\001\002\000\026" +
    "\002\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\043\ufff4\044\ufff4\047\ufff4\001\002\000\004\075\u0167" +
    "\001\002\000\004\066\u0168\001\002\000\004\067\u0169\001" +
    "\002\000\044\003\037\004\026\013\015\017\046\022\027" +
    "\023\035\024\047\025\022\026\033\027\050\037\034\045" +
    "\043\046\016\051\021\053\023\075\042\101\045\001\002" +
    "\000\044\004\026\013\015\017\046\022\027\023\035\024" +
    "\047\025\022\026\033\027\050\037\034\045\043\046\016" +
    "\050\u016b\051\021\053\023\075\042\101\045\001\002\000" +
    "\026\002\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\043\ufff5\044\ufff5\047\ufff5\001\002\000\006\002" +
    "\ufff7\043\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\010\002\006\023\007\033\004\001\001\000" +
    "\002\001\001\000\012\024\u0156\034\u0158\035\u0151\036\u0155" +
    "\001\001\000\002\001\001\000\006\023\011\033\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\017\010\013\011\031\013\027\014\043\015" +
    "\016\016\030\020\037\026\023\037\024\043\040\045\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\214\011\031\013\027" +
    "\014\225\015\215\016\221\020\223\026\216\037\217\043" +
    "\224\045\222\001\001\000\006\025\u012b\040\u012a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\u010e\005\166\006\165\007\164" +
    "\044\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\167\005\166\006\165\007\164\044\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\060\042" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\072\001\001\000\004\025\071\001\001" +
    "\000\004\025\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\100\001\001\000\004" +
    "\025\077\001\001\000\004\025\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\107\001\001\000\004\025\106\001\001\000" +
    "\004\025\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\060\042\111\001\001\000" +
    "\002\001\001\000\004\025\117\001\001\000\004\025\116" +
    "\001\001\000\004\025\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\123\044\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\174\006\173\044" +
    "\163\001\001\000\006\005\174\044\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\203\001\001\000\004\006\173\001\001\000\002\001" +
    "\001\000\004\044\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\213\010\013\011\031\013\027\014\043" +
    "\015\016\016\030\020\037\026\023\037\024\043\040\045" +
    "\035\001\001\000\030\010\214\011\031\013\027\014\225" +
    "\015\215\016\221\020\223\026\216\037\217\043\224\045" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\243\044\245\001\001\000\004\027" +
    "\271\001\001\000\004\027\266\001\001\000\004\027\263" +
    "\001\001\000\004\027\250\001\001\000\006\041\253\044" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\262\001\001\000\004\027\261\001" +
    "\001\000\004\027\260\001\001\000\004\027\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\301\025\302\041\277\001\001\000\002\001" +
    "\001\000\004\012\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\314\001\001\000\002\001\001" +
    "\000\004\012\316\001\001\000\002\001\001\000\004\012" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\334\041\332\044\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\345\031\347\032\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\353\010\013\011\031\013" +
    "\027\014\043\015\016\016\030\020\037\026\023\037\024" +
    "\043\040\045\035\001\001\000\032\010\214\011\031\013" +
    "\027\014\225\015\215\016\221\020\223\026\216\032\354" +
    "\037\217\043\224\045\222\001\001\000\002\001\001\000" +
    "\032\003\356\010\013\011\031\013\027\014\043\015\016" +
    "\016\030\020\037\026\023\037\024\043\040\045\035\001" +
    "\001\000\032\010\214\011\031\013\027\014\225\015\215" +
    "\016\221\020\223\026\216\031\357\037\217\043\224\045" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\362\010\013\011\031\013\027\014\043\015\016\016" +
    "\030\020\037\026\023\037\024\043\040\045\035\001\001" +
    "\000\030\010\214\011\031\013\027\014\225\015\215\016" +
    "\221\020\223\026\216\037\217\043\224\045\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\367\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0100\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\u0109\041" +
    "\u0108\044\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\u0110\010\013" +
    "\011\031\013\027\014\043\015\016\016\030\020\037\026" +
    "\023\037\024\043\040\045\035\001\001\000\030\010\214" +
    "\011\031\013\027\014\225\015\215\016\221\020\223\026" +
    "\216\037\217\043\224\045\222\001\001\000\004\017\u0112" +
    "\001\001\000\002\001\001\000\014\004\u0118\005\166\006" +
    "\165\007\164\044\163\001\001\000\002\001\001\000\032" +
    "\003\u0116\010\013\011\031\013\027\014\043\015\016\016" +
    "\030\020\037\026\023\037\024\043\040\045\035\001\001" +
    "\000\030\010\214\011\031\013\027\014\225\015\215\016" +
    "\221\020\223\026\216\037\217\043\224\045\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\u011a\010" +
    "\013\011\031\013\027\014\043\015\016\016\030\020\037" +
    "\026\023\037\024\043\040\045\035\001\001\000\030\010" +
    "\214\011\031\013\027\014\225\015\215\016\221\020\223" +
    "\026\216\037\217\043\224\045\222\001\001\000\004\017" +
    "\u011c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\u0121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\u0133\044\u0135\001\001\000" +
    "\004\027\u0140\001\001\000\004\027\u013d\001\001\000\004" +
    "\027\u013a\001\001\000\004\027\u0137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u014a\044\163\001\001\000" +
    "\002\001\001\000\032\003\u014c\010\013\011\031\013\027" +
    "\014\043\015\016\016\030\020\037\026\023\037\024\043" +
    "\040\045\035\001\001\000\030\010\214\011\031\013\027" +
    "\014\225\015\215\016\221\020\223\026\216\037\217\043" +
    "\224\045\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\u016b\034" +
    "\u0158\035\u0151\036\u0155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\u0159\034\u0158\035\u0151" +
    "\036\u0155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\u015d\036\u015e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\u0161\036\u015e\001\001\000\002\001\001\000\032\003\u0163" +
    "\010\013\011\031\013\027\014\043\015\016\016\030\020" +
    "\037\026\023\037\024\043\040\045\035\001\001\000\030" +
    "\010\214\011\031\013\027\014\225\015\215\016\221\020" +
    "\223\026\216\037\217\043\224\045\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\u0169\010\013\011\031\013\027\014\043" +
    "\015\016\016\030\020\037\026\023\037\024\043\040\045" +
    "\035\001\001\000\030\010\214\011\031\013\027\014\225" +
    "\015\215\016\221\020\223\026\216\037\217\043\224\045" +
    "\222\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static LinkedList<String> Errores = new LinkedList<String>();
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
     System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
     Sintax.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }

    public Symbol getS(){
        return this.s;
} 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            Sintax.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
}  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // COMENTAR ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTAR",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq IDENTIFICADOR SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq IDENTIFICADOR SquareBDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq DECIMAL SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq DECIMAL SquareBDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq CADENA SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq CADENA SquareBDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq ENTERO SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ENTRADA ::= put IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENTRADA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARGUMENTO ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ARGUMENTO ::= OPERACION_ARITMETICA Coma ARGUMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ParDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer OP_MULT OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer OP_DIV OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer OP_SUMA OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CASOE ::= ENTERO DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CASOE ::= ENTERO DosPuntos SENTENCIA CASOE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CASOC ::= CADENA DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOC",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASOC ::= CADENA DosPuntos SENTENCIA CASOC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOC",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASOS ::= CASOE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CASOS ::= CASOC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SWITCH_ESTRUCTURA ::= Case ParIzq IDENTIFICADOR ParDer Of CASOS Default DosPuntos SENTENCIA EndCase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ESTRUCTURA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONCAT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONCAT ::= Coma IDENTIFICADOR CONCAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONCAT ::= Coma SHOWCOORDENADAS CONCAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONCAT ::= Coma LLAMAR_METODO CONCAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONCAT ::= Coma CADENA CONCAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IMPRIMIR ::= Imp ParIzq IDENTIFICADOR CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IMPRIMIR ::= ImpLn ParIzq IDENTIFICADOR CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IMPRIMIR ::= Imp ParIzq SHOWCOORDENADAS CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IMPRIMIR ::= ImpLn ParIzq SHOWCOORDENADAS CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IMPRIMIR ::= Imp ParIzq LLAMAR_METODO CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IMPRIMIR ::= ImpLn ParIzq LLAMAR_METODO CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IMPRIMIR ::= Imp ParIzq CADENA CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IMPRIMIR ::= ImpLn ParIzq CADENA CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERACION_ARITMETICA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPERACION_ARITMETICA ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPERACION_ARITMETICA ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPERACION_ARITMETICA ::= DECIMAL OP_DIV OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPERACION_ARITMETICA ::= ENTERO OP_DIV OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPERACION_ARITMETICA ::= IDENTIFICADOR OP_DIV OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPERACION_ARITMETICA ::= DECIMAL OP_MULT OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPERACION_ARITMETICA ::= ENTERO OP_MULT OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERACION_ARITMETICA ::= IDENTIFICADOR OP_MULT OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERACION_ARITMETICA ::= DECIMAL OP_SUMA OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERACION_ARITMETICA ::= ENTERO OP_SUMA OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERACION_ARITMETICA ::= IDENTIFICADOR OP_SUMA OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PROP1 ::= SHOWCOORDENADAS OP_RELA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PROP1 ::= SHOWCOORDENADAS OP_RELA SHOWCOORDENADAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PROP1 ::= IDENTIFICADOR OP_RELA SHOWCOORDENADAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PROP1 ::= DECIMAL OP_RELA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PROP1 ::= DECIMAL OP_RELA DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PROP1 ::= IDENTIFICADOR OP_RELA DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PROP1 ::= CADENA OP_RELA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PROP1 ::= CADENA OP_RELA CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PROP1 ::= IDENTIFICADOR OP_RELA CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PROP1 ::= ENTERO OP_RELA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PROP1 ::= ENTERO OP_RELA ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PROP1 ::= IDENTIFICADOR OP_RELA ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PROP1 ::= IDENTIFICADOR OP_RELA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PROP2 ::= ParIzq PROP1 ParDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP2",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PROP2 ::= ParIzq PROP1 ParDer OP_LOGIC PROP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP2",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PROP3 ::= ParIzq PROP2 ParDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP3",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PROP3 ::= ParIzq PROP2 ParDer OP_LOGIC PROP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP3",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PROPOSICION ::= TBool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PROPOSICION ::= PROP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PROPOSICION ::= PROP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PROPOSICION ::= PROP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA ::= DECIMAL Coma LISTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA ::= CADENA Coma LISTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA ::= ENTERO Coma LISTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOA ::= LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPOA ::= OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPOA ::= CurlyIzq LISTA CurlyDer CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOA ::= CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOA ::= TBool PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOA ::= CADENA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNAR ::= IDENTIFICADOR OP_ASIG TIPOA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARAR_ASIGNAR ::= TypeFloat IDENTIFICADOR OP_ASIG SHOWCOORDENADAS PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARAR_ASIGNAR ::= TypeString IDENTIFICADOR OP_ASIG SHOWCOORDENADAS PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARAR_ASIGNAR ::= TypeInt IDENTIFICADOR OP_ASIG SHOWCOORDENADAS PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARAR_ASIGNAR ::= TypeMatriz IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARAR_ASIGNAR ::= TypeList IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARAR_ASIGNAR ::= TypeBool IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARAR_ASIGNAR ::= TypeFloat IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARAR_ASIGNAR ::= TypeString IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARAR_ASIGNAR ::= TypeInt IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARAR_ASIGNAR ::= TypeMatriz IDENTIFICADOR ParIzq ENTERO ParDer ParIzq ENTERO ParDer OP_ASIG CurlyIzq LISTA CurlyDer CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARAR_ASIGNAR ::= TypeList IDENTIFICADOR ParIzq ENTERO ParDer OP_ASIG CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARAR_ASIGNAR ::= TypeBool IDENTIFICADOR OP_ASIG TBool PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARAR_ASIGNAR ::= TypeFloat IDENTIFICADOR OP_ASIG OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARAR_ASIGNAR ::= TypeString IDENTIFICADOR OP_ASIG CADENA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARAR_ASIGNAR ::= TypeInt IDENTIFICADOR OP_ASIG OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_DEC_ASIG ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DEC_ASIG",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_DEC_ASIG ::= DECLARAR_ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DEC_ASIG",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IFELSE ::= Else Then SENTENCIA EndElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IFELSE ::= ElseIf PROPOSICION Then SENTENCIA EndElseIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IFELSE ::= ElseIf PROPOSICION Then SENTENCIA EndElseIf IFELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF_ESTRUCTURA ::= IF PROPOSICION Then SENTENCIA EndIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ESTRUCTURA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_ESTRUCTURA ::= IF PROPOSICION Then SENTENCIA EndIf IFELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ESTRUCTURA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LOOP_WHILE ::= While PROPOSICION Repeat SENTENCIA EndWhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOOP_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LOOP_FOR ::= For TypeInt IDENTIFICADOR OP_ASIG ENTERO IN Range ParIzq PROP1 ParDer SENTENCIA EndFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOOP_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= COMENTAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SENTENCIA COMENTAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= SENTENCIA ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SWITCH_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= SENTENCIA SWITCH_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SENTENCIA_DEC_ASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA SENTENCIA_DEC_ASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= IF_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA IF_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= LOOP_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA LOOP_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= LOOP_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA LOOP_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= RETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA RETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TRETORNO ::= TBool PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TRETORNO ::= CADENA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TRETORNO ::= OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RETORNO ::= RETURN TRETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE ::= TypeBool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE ::= TypeMatriz 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= TypeList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= TypeString 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= TypeFloat 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE ::= TypeInt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETRO ::= TYPE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETRO ::= TYPE IDENTIFICADOR Coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // METODO_T ::= TYPE Begin IDENTIFICADOR ParIzq PARAMETRO ParDer SENTENCIA EndCall 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_T",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // M_VOID ::= Call Begin IDENTIFICADOR ParIzq ParDer SENTENCIA EndCall 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_VOID",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // METODOS ::= METODO_T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // METODOS ::= METODO_T METODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODOS ::= M_VOID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODOS ::= M_VOID METODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // M_MAIN ::= Main Begin SENTENCIA EndMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ERRORSIRIJILLO ::= ParIzq 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORSIRIJILLO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASE ::= M_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASE ::= M_MAIN METODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

