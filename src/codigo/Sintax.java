
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 13 14:03:52 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 13 14:03:52 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\002\003\000\002\023" +
    "\004\000\002\023\003\000\002\033\006\000\002\033\003" +
    "\000\002\024\004\000\002\024\003\000\002\024\004\000" +
    "\002\024\003\000\002\034\011\000\002\034\004\000\002" +
    "\035\012\000\002\035\004\000\002\022\006\000\002\022" +
    "\004\000\002\022\004\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\002\000\002\037\004\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\014\016\000\002\014\004\000\002\015\007\000\002" +
    "\015\004\000\002\016\010\000\002\016\007\000\002\016" +
    "\004\000\002\017\010\000\002\017\004\000\002\017\007" +
    "\000\002\017\006\000\002\017\004\000\002\010\003\000" +
    "\002\010\003\000\002\011\007\000\002\011\004\000\002" +
    "\011\007\000\002\011\004\000\002\011\007\000\002\011" +
    "\004\000\002\011\007\000\002\011\004\000\002\011\014" +
    "\000\002\011\004\000\002\011\022\000\002\011\004\000" +
    "\002\011\007\000\002\011\007\000\002\011\007\000\002" +
    "\011\007\000\002\011\007\000\002\011\007\000\002\011" +
    "\007\000\002\011\007\000\002\011\007\000\002\013\005" +
    "\000\002\013\005\000\002\013\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\006\000\002\021\011\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\007" +
    "\007\000\002\007\005\000\002\007\004\000\002\006\007" +
    "\000\002\006\005\000\002\005\005\000\002\005\003\000" +
    "\002\050\005\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\025\005\000\002\025" +
    "\003\000\002\046\005\000\002\046\005\000\002\046\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\005\000\002\026\010\000\002\026\010\000\002" +
    "\026\010\000\002\026\010\000\002\026\010\000\002\026" +
    "\010\000\002\026\004\000\002\026\010\000\002\026\010" +
    "\000\002\026\004\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\002\000\002" +
    "\020\014\000\002\020\004\000\002\030\003\000\002\030" +
    "\003\000\002\031\006\000\002\031\005\000\002\032\006" +
    "\000\002\032\005\000\002\041\010\000\002\041\010\000" +
    "\002\041\010\000\002\041\006\000\002\041\005\000\002" +
    "\041\004\000\002\042\005\000\002\042\003\000\002\043" +
    "\005\000\002\043\004\000\002\044\006\000\002\044\011" +
    "\000\002\044\006\000\002\044\011\000\002\044\006\000" +
    "\002\044\011\000\002\044\006\000\002\044\011\000\002" +
    "\044\011\000\002\044\003\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\006\003\004\044\006\001\002\000\026\002" +
    "\ufffc\003\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\045\ufffc\050\ufffc\001\002\000\026\002\ufffe\003" +
    "\uffea\022\u015a\023\u015f\024\u015c\025\u0159\026\u015e\027\u0162" +
    "\045\uffea\050\u015d\001\002\000\004\045\012\001\002\000" +
    "\004\002\011\001\002\000\004\002\000\001\002\000\004" +
    "\002\001\001\002\000\044\003\040\004\026\013\014\017" +
    "\045\022\027\023\035\024\047\025\022\026\033\027\050" +
    "\040\034\046\043\047\015\052\021\054\024\076\042\102" +
    "\046\001\002\000\072\003\uffdb\004\uffdb\005\uffdb\007\uffdb" +
    "\011\uffdb\013\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\040\uffdb\042\uffdb" +
    "\043\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\102\uffdb\001\002\000\006" +
    "\003\u014e\022\u014d\001\002\000\006\003\u013c\067\u013b\001" +
    "\002\000\072\003\uffdf\004\uffdf\005\uffdf\007\uffdf\011\uffdf" +
    "\013\uffdf\016\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\040\uffdf\042\uffdf\043\uffdf" +
    "\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\076" +
    "\uffdf\077\uffdf\100\uffdf\102\uffdf\001\002\000\004\037\u0139" +
    "\001\002\000\046\003\121\004\026\013\014\017\045\022" +
    "\027\023\035\024\047\025\022\026\033\027\050\040\034" +
    "\046\043\047\015\052\021\053\u0138\054\024\076\042\102" +
    "\046\001\002\000\020\003\u0132\030\u0131\067\072\076\070" +
    "\077\064\100\u0130\101\062\001\002\000\006\003\u0123\076" +
    "\u0124\001\002\000\072\003\uffd9\004\uffd9\005\uffd9\007\uffd9" +
    "\011\uffd9\013\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\040\uffd9\042\uffd9" +
    "\043\uffd9\046\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\076\uffd9\077\uffd9\100\uffd9\102\uffd9\001\002\000\006" +
    "\003\u0120\076\u0121\001\002\000\072\003\uffe3\004\uffe3\005" +
    "\uffe3\007\uffe3\011\uffe3\013\uffe3\016\uffe3\017\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\040" +
    "\uffe3\042\uffe3\043\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\076\uffe3\077\uffe3\100\uffe3\102\uffe3\001" +
    "\002\000\016\003\u010e\030\161\067\174\076\173\077\162" +
    "\100\160\001\002\000\006\003\u0105\076\u0106\001\002\000" +
    "\072\003\uffc4\004\uffc4\005\uffc4\007\uffc4\011\uffc4\013\uffc4" +
    "\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\040\uffc4\042\uffc4\043\uffc4\046\uffc4" +
    "\047\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\102\uffc4\001\002\000\072\003\uffdd\004\uffdd" +
    "\005\uffdd\007\uffdd\011\uffdd\013\uffdd\016\uffdd\017\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\040\uffdd\042\uffdd\043\uffdd\046\uffdd\047\uffdd\051\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\076\uffdd\077\uffdd\100\uffdd\102\uffdd" +
    "\001\002\000\072\003\uffc5\004\uffc5\005\uffc5\007\uffc5\011" +
    "\uffc5\013\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\040\uffc5\042\uffc5\043" +
    "\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\076\uffc5\077\uffc5\100\uffc5\102\uffc5\001\002\000\006\003" +
    "\362\076\363\001\002\000\006\003\337\067\336\001\002" +
    "\000\006\003\325\076\326\001\002\000\072\003\uffd3\004" +
    "\uffd3\005\uffd3\007\uffd3\011\uffd3\013\uffd3\016\uffd3\017\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\040\uffd3\042\uffd3\043\uffd3\046\uffd3\047\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\076\uffd3\077\uffd3\100\uffd3\102" +
    "\uffd3\001\002\000\072\003\uffd7\004\uffd7\005\uffd7\007\uffd7" +
    "\011\uffd7\013\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\040\uffd7\042\uffd7" +
    "\043\uffd7\046\uffd7\047\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\076\uffd7\077\uffd7\100\uffd7\102\uffd7\001\002\000\074" +
    "\003\uffd2\004\uffd2\005\uffd2\007\uffd2\011\uffd2\013\uffd2\016" +
    "\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\037\uff58\040\uffd2\042\uffd2\043\uffd2\046" +
    "\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\076\uffd2" +
    "\077\uffd2\100\uffd2\102\uffd2\001\002\000\072\003\uffd5\004" +
    "\uffd5\005\uffd5\007\uffd5\011\uffd5\013\uffd5\016\uffd5\017\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\040\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\076\uffd5\077\uffd5\100\uffd5\102" +
    "\uffd5\001\002\000\010\003\264\037\265\071\127\001\002" +
    "\000\006\003\232\067\231\001\002\000\072\003\uffe1\004" +
    "\uffe1\005\uffe1\007\uffe1\011\uffe1\013\uffe1\016\uffe1\017\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\040\uffe1\042\uffe1\043\uffe1\046\uffe1\047\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\076\uffe1\077\uffe1\100\uffe1\102" +
    "\uffe1\001\002\000\016\003\163\030\161\067\174\076\173" +
    "\077\162\100\160\001\002\000\072\003\uff57\004\uff57\005" +
    "\uff57\007\uff57\011\uff57\013\uff57\016\uff57\017\uff57\021\uff57" +
    "\022\uff57\023\uff57\024\uff57\025\uff57\026\uff57\027\uff57\040" +
    "\uff57\042\uff57\043\uff57\046\uff57\047\uff57\051\uff57\052\uff57" +
    "\053\uff57\054\uff57\076\uff57\077\uff57\100\uff57\102\uff57\001" +
    "\002\000\006\003\115\076\116\001\002\000\006\003\051" +
    "\076\052\001\002\000\072\003\uffbc\004\uffbc\005\uffbc\007" +
    "\uffbc\011\uffbc\013\uffbc\016\uffbc\017\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\040\uffbc\042" +
    "\uffbc\043\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\076\uffbc\077\uffbc\100\uffbc\102\uffbc\001\002\000" +
    "\004\037\053\001\002\000\006\030\056\076\055\001\002" +
    "\000\004\057\114\001\002\000\006\003\061\067\060\001" +
    "\002\000\004\057\057\001\002\000\072\003\uffbd\004\uffbd" +
    "\005\uffbd\007\uffbd\011\uffbd\013\uffbd\016\uffbd\017\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\040\uffbd\042\uffbd\043\uffbd\046\uffbd\047\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\076\uffbd\077\uffbd\100\uffbd\102\uffbd" +
    "\001\002\000\014\067\072\070\063\076\070\077\064\101" +
    "\062\001\002\000\010\057\uff66\061\uff66\070\uff66\001\002" +
    "\000\016\031\uff84\032\uff84\033\uff84\057\uff84\061\uff84\070" +
    "\uff84\001\002\000\010\057\uff67\061\uff67\070\uff67\001\002" +
    "\000\016\031\uff86\032\uff86\033\uff86\057\uff86\061\uff86\070" +
    "\uff86\001\002\000\004\070\105\001\002\000\016\031\uff87" +
    "\032\uff87\033\uff87\057\uff87\061\uff87\070\uff87\001\002\000" +
    "\010\031\074\061\103\070\uff64\001\002\000\016\031\uff85" +
    "\032\uff85\033\uff85\057\uff85\061\uff85\070\uff85\001\002\000" +
    "\016\031\uff8a\032\077\033\100\057\uff8a\061\uff8a\070\uff8a" +
    "\001\002\000\012\067\072\076\070\077\064\101\062\001" +
    "\002\000\006\031\074\070\075\001\002\000\012\067\072" +
    "\076\070\077\064\101\062\001\002\000\016\031\uff83\032" +
    "\uff83\033\uff83\057\uff83\061\uff83\070\uff83\001\002\000\016" +
    "\031\uff8b\032\077\033\100\057\uff8b\061\uff8b\070\uff8b\001" +
    "\002\000\012\067\072\076\070\077\064\101\062\001\002" +
    "\000\012\067\072\076\070\077\064\101\062\001\002\000" +
    "\016\031\uff88\032\uff88\033\uff88\057\uff88\061\uff88\070\uff88" +
    "\001\002\000\016\031\uff89\032\uff89\033\uff89\057\uff89\061" +
    "\uff89\070\uff89\001\002\000\012\067\072\076\070\077\064" +
    "\101\062\001\002\000\004\070\uff65\001\002\000\016\031" +
    "\110\032\106\033\107\057\uff68\061\uff68\070\uff68\001\002" +
    "\000\012\067\072\076\070\077\064\101\062\001\002\000" +
    "\012\067\072\076\070\077\064\101\062\001\002\000\012" +
    "\067\072\076\070\077\064\101\062\001\002\000\012\031" +
    "\074\057\uff6b\061\uff6b\070\uff6b\001\002\000\012\031\074" +
    "\057\uff6a\061\uff6a\070\uff6a\001\002\000\012\031\074\057" +
    "\uff69\061\uff69\070\uff69\001\002\000\072\003\uffb4\004\uffb4" +
    "\005\uffb4\007\uffb4\011\uffb4\013\uffb4\016\uffb4\017\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\040\uffb4\042\uffb4\043\uffb4\046\uffb4\047\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\076\uffb4\077\uffb4\100\uffb4\102\uffb4" +
    "\001\002\000\072\003\uffc0\004\uffc0\005\uffc0\007\uffc0\011" +
    "\uffc0\013\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\040\uffc0\042\uffc0\043" +
    "\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\076\uffc0\077\uffc0\100\uffc0\102\uffc0\001\002\000\004\037" +
    "\117\001\002\000\010\003\121\076\122\100\124\001\002" +
    "\000\004\057\157\001\002\000\022\012\uff58\020\uff58\035" +
    "\uff58\036\uff58\037\uff58\057\uff58\061\uff58\070\uff58\001\002" +
    "\000\010\003\061\067\060\071\127\001\002\000\004\057" +
    "\126\001\002\000\004\057\125\001\002\000\072\003\uffc1" +
    "\004\uffc1\005\uffc1\007\uffc1\011\uffc1\013\uffc1\016\uffc1\017" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\040\uffc1\042\uffc1\043\uffc1\046\uffc1\047\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\076\uffc1\077\uffc1\100\uffc1" +
    "\102\uffc1\001\002\000\072\003\uffb0\004\uffb0\005\uffb0\007" +
    "\uffb0\011\uffb0\013\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\040\uffb0\042" +
    "\uffb0\043\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\076\uffb0\077\uffb0\100\uffb0\102\uffb0\001\002\000" +
    "\012\076\130\077\132\100\133\101\131\001\002\000\004" +
    "\072\151\001\002\000\004\072\145\001\002\000\006\071" +
    "\141\072\140\001\002\000\004\072\134\001\002\000\024" +
    "\012\uff5f\020\uff5f\035\uff5f\036\uff5f\037\uff5f\057\uff5f\061" +
    "\uff5f\070\uff5f\071\135\001\002\000\004\077\136\001\002" +
    "\000\004\072\137\001\002\000\022\012\uff5e\020\uff5e\035" +
    "\uff5e\036\uff5e\037\uff5e\057\uff5e\061\uff5e\070\uff5e\001\002" +
    "\000\022\012\uff61\020\uff61\035\uff61\036\uff61\037\uff61\057" +
    "\uff61\061\uff61\070\uff61\001\002\000\004\071\142\001\002" +
    "\000\004\077\143\001\002\000\004\072\144\001\002\000" +
    "\022\012\uff60\020\uff60\035\uff60\036\uff60\037\uff60\057\uff60" +
    "\061\uff60\070\uff60\001\002\000\024\012\uff5d\020\uff5d\035" +
    "\uff5d\036\uff5d\037\uff5d\057\uff5d\061\uff5d\070\uff5d\071\146" +
    "\001\002\000\004\077\147\001\002\000\004\072\150\001" +
    "\002\000\022\012\uff5c\020\uff5c\035\uff5c\036\uff5c\037\uff5c" +
    "\057\uff5c\061\uff5c\070\uff5c\001\002\000\024\012\uff5b\020" +
    "\uff5b\035\uff5b\036\uff5b\037\uff5b\057\uff5b\061\uff5b\070\uff5b" +
    "\071\152\001\002\000\006\076\153\077\154\001\002\000" +
    "\004\072\156\001\002\000\004\072\155\001\002\000\022" +
    "\012\uff5a\020\uff5a\035\uff5a\036\uff5a\037\uff5a\057\uff5a\061" +
    "\uff5a\070\uff5a\001\002\000\022\012\uff59\020\uff59\035\uff59" +
    "\036\uff59\037\uff59\057\uff59\061\uff59\070\uff59\001\002\000" +
    "\072\003\uffb6\004\uffb6\005\uffb6\007\uffb6\011\uffb6\013\uffb6" +
    "\016\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\040\uffb6\042\uffb6\043\uffb6\046\uffb6" +
    "\047\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\102\uffb6\001\002\000\014\012\uff8d\020\uff8d" +
    "\035\uff8d\036\uff8d\070\uff8d\001\002\000\006\012\uff99\020" +
    "\uff99\001\002\000\014\012\uff8e\020\uff8e\035\uff8e\036\uff8e" +
    "\070\uff8e\001\002\000\100\003\uffce\004\uffce\005\uffce\007" +
    "\uffce\011\uffce\013\uffce\016\uffce\017\uffce\020\uff98\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\035" +
    "\uff58\036\uff58\040\uffce\042\uffce\043\uffce\046\uffce\047\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\076\uffce\077\uffce\100" +
    "\uffce\102\uffce\001\002\000\014\012\uff8c\020\uff8c\035\uff8c" +
    "\036\uff8c\070\uff8c\001\002\000\006\035\225\036\226\001" +
    "\002\000\006\012\uff9a\020\uff9a\001\002\000\006\012\uff9b" +
    "\020\uff9b\001\002\000\006\012\uff9c\020\uff9c\001\002\000" +
    "\010\012\uff91\020\uff91\070\uff91\001\002\000\004\020\211" +
    "\001\002\000\016\012\uff8f\020\uff8f\035\uff8f\036\uff8f\070" +
    "\uff8f\071\127\001\002\000\014\003\175\067\200\076\173" +
    "\077\162\100\160\001\002\000\012\012\uff95\020\uff95\035" +
    "\uff58\036\uff58\001\002\000\004\070\204\001\002\000\004" +
    "\070\201\001\002\000\012\003\121\076\173\077\162\100" +
    "\160\001\002\000\012\012\uff93\020\uff93\034\202\070\uff93" +
    "\001\002\000\004\067\200\001\002\000\010\012\uff94\020" +
    "\uff94\070\uff94\001\002\000\010\012\uff96\020\uff96\034\205" +
    "\001\002\000\004\067\206\001\002\000\006\003\210\067" +
    "\200\001\002\000\006\012\uff97\020\uff97\001\002\000\006" +
    "\012\uff95\020\uff95\001\002\000\044\003\040\004\026\013" +
    "\014\017\045\022\027\023\035\024\047\025\022\026\033" +
    "\027\050\040\034\046\043\047\015\052\021\054\024\076" +
    "\042\102\046\001\002\000\046\003\121\004\026\013\014" +
    "\017\045\021\217\022\027\023\035\024\047\025\022\026" +
    "\033\027\050\040\034\046\043\047\015\052\021\054\024" +
    "\076\042\102\046\001\002\000\072\003\uffdc\004\uffdc\005" +
    "\uffdc\007\uffdc\011\uffdc\013\uffdc\016\uffdc\017\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\040" +
    "\uffdc\042\uffdc\043\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\076\uffdc\077\uffdc\100\uffdc\102\uffdc\001" +
    "\002\000\072\003\uffe0\004\uffe0\005\uffe0\007\uffe0\011\uffe0" +
    "\013\uffe0\016\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\040\uffe0\042\uffe0\043\uffe0" +
    "\046\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\076" +
    "\uffe0\077\uffe0\100\uffe0\102\uffe0\001\002\000\072\003\uffda" +
    "\004\uffda\005\uffda\007\uffda\011\uffda\013\uffda\016\uffda\017" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\040\uffda\042\uffda\043\uffda\046\uffda\047\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\076\uffda\077\uffda\100\uffda" +
    "\102\uffda\001\002\000\072\003\uffe4\004\uffe4\005\uffe4\007" +
    "\uffe4\011\uffe4\013\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\040\uffe4\042" +
    "\uffe4\043\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\076\uffe4\077\uffe4\100\uffe4\102\uffe4\001\002\000" +
    "\072\003\uffcf\004\uffcf\005\uffcf\007\uffcf\011\uffcf\013\uffcf" +
    "\016\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\040\uffcf\042\uffcf\043\uffcf\046\uffcf" +
    "\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\076\uffcf\077" +
    "\uffcf\100\uffcf\102\uffcf\001\002\000\072\003\uffde\004\uffde" +
    "\005\uffde\007\uffde\011\uffde\013\uffde\016\uffde\017\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\040\uffde\042\uffde\043\uffde\046\uffde\047\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\076\uffde\077\uffde\100\uffde\102\uffde" +
    "\001\002\000\072\003\uffd4\004\uffd4\005\uffd4\007\uffd4\011" +
    "\uffd4\013\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\040\uffd4\042\uffd4\043" +
    "\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\076\uffd4\077\uffd4\100\uffd4\102\uffd4\001\002\000\072\003" +
    "\uffd8\004\uffd8\005\uffd8\007\uffd8\011\uffd8\013\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\040\uffd8\042\uffd8\043\uffd8\046\uffd8\047\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\076\uffd8\077\uffd8\100" +
    "\uffd8\102\uffd8\001\002\000\072\003\uffd6\004\uffd6\005\uffd6" +
    "\007\uffd6\011\uffd6\013\uffd6\016\uffd6\017\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\040\uffd6" +
    "\042\uffd6\043\uffd6\046\uffd6\047\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\076\uffd6\077\uffd6\100\uffd6\102\uffd6\001\002" +
    "\000\072\003\uffe2\004\uffe2\005\uffe2\007\uffe2\011\uffe2\013" +
    "\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\040\uffe2\042\uffe2\043\uffe2\046" +
    "\uffe2\047\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\076\uffe2" +
    "\077\uffe2\100\uffe2\102\uffe2\001\002\000\012\003\121\076" +
    "\173\077\162\100\160\001\002\000\012\003\121\076\173" +
    "\077\162\100\160\001\002\000\010\012\uff90\020\uff90\070" +
    "\uff90\001\002\000\010\012\uff92\020\uff92\070\uff92\001\002" +
    "\000\010\003\121\076\234\100\236\001\002\000\072\003" +
    "\uff7c\004\uff7c\005\uff7c\007\uff7c\011\uff7c\013\uff7c\016\uff7c" +
    "\017\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\040\uff7c\042\uff7c\043\uff7c\046\uff7c\047\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\054\uff7c\076\uff7c\077\uff7c\100" +
    "\uff7c\102\uff7c\001\002\000\006\061\237\070\uff74\001\002" +
    "\000\014\003\061\061\237\067\060\070\uff74\071\127\001" +
    "\002\000\006\061\237\070\uff74\001\002\000\006\061\237" +
    "\070\uff74\001\002\000\010\003\121\076\244\100\246\001" +
    "\002\000\004\070\241\001\002\000\004\057\242\001\002" +
    "\000\072\003\uff82\004\uff82\005\uff82\007\uff82\011\uff82\013" +
    "\uff82\016\uff82\017\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\uff82\026\uff82\027\uff82\040\uff82\042\uff82\043\uff82\046" +
    "\uff82\047\uff82\051\uff82\052\uff82\053\uff82\054\uff82\076\uff82" +
    "\077\uff82\100\uff82\102\uff82\001\002\000\006\061\237\070" +
    "\uff74\001\002\000\014\003\061\061\237\067\060\070\uff74" +
    "\071\127\001\002\000\006\061\237\070\uff74\001\002\000" +
    "\006\061\237\070\uff74\001\002\000\004\070\uff78\001\002" +
    "\000\004\070\uff76\001\002\000\004\070\uff75\001\002\000" +
    "\004\070\uff77\001\002\000\004\070\254\001\002\000\004" +
    "\057\255\001\002\000\072\003\uff7e\004\uff7e\005\uff7e\007" +
    "\uff7e\011\uff7e\013\uff7e\016\uff7e\017\uff7e\021\uff7e\022\uff7e" +
    "\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\040\uff7e\042" +
    "\uff7e\043\uff7e\046\uff7e\047\uff7e\051\uff7e\052\uff7e\053\uff7e" +
    "\054\uff7e\076\uff7e\077\uff7e\100\uff7e\102\uff7e\001\002\000" +
    "\004\070\257\001\002\000\004\057\260\001\002\000\072" +
    "\003\uff7b\004\uff7b\005\uff7b\007\uff7b\011\uff7b\013\uff7b\016" +
    "\uff7b\017\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b" +
    "\026\uff7b\027\uff7b\040\uff7b\042\uff7b\043\uff7b\046\uff7b\047" +
    "\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\076\uff7b\077\uff7b" +
    "\100\uff7b\102\uff7b\001\002\000\004\070\262\001\002\000" +
    "\004\057\263\001\002\000\072\003\uff80\004\uff80\005\uff80" +
    "\007\uff80\011\uff80\013\uff80\016\uff80\017\uff80\021\uff80\022" +
    "\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\040\uff80" +
    "\042\uff80\043\uff80\046\uff80\047\uff80\051\uff80\052\uff80\053" +
    "\uff80\054\uff80\076\uff80\077\uff80\100\uff80\102\uff80\001\002" +
    "\000\072\003\uffac\004\uffac\005\uffac\007\uffac\011\uffac\013" +
    "\uffac\016\uffac\017\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\040\uffac\042\uffac\043\uffac\046" +
    "\uffac\047\uffac\051\uffac\052\uffac\053\uffac\054\uffac\076\uffac" +
    "\077\uffac\100\uffac\102\uffac\001\002\000\022\003\272\030" +
    "\271\067\072\073\267\076\276\077\064\100\266\101\062" +
    "\001\002\000\004\057\324\001\002\000\012\003\303\077" +
    "\307\100\306\101\305\001\002\000\004\057\302\001\002" +
    "\000\004\057\301\001\002\000\074\003\uffa4\004\uffa4\005" +
    "\uffa4\007\uffa4\011\uffa4\013\uffa4\016\uffa4\017\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\040" +
    "\uffa4\042\uffa4\043\uffa4\046\uffa4\047\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\057\uff58\076\uffa4\077\uffa4\100\uffa4\102" +
    "\uffa4\001\002\000\072\003\uffad\004\uffad\005\uffad\007\uffad" +
    "\011\uffad\013\uffad\016\uffad\017\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\040\uffad\042\uffad" +
    "\043\uffad\046\uffad\047\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\076\uffad\077\uffad\100\uffad\102\uffad\001\002\000\004" +
    "\057\300\001\002\000\006\031\074\057\277\001\002\000" +
    "\020\003\061\031\uff85\032\uff85\033\uff85\057\uff85\067\060" +
    "\071\127\001\002\000\072\003\uffa7\004\uffa7\005\uffa7\007" +
    "\uffa7\011\uffa7\013\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\040\uffa7\042" +
    "\uffa7\043\uffa7\046\uffa7\047\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\076\uffa7\077\uffa7\100\uffa7\102\uffa7\001\002\000" +
    "\072\003\uffa5\004\uffa5\005\uffa5\007\uffa5\011\uffa5\013\uffa5" +
    "\016\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\040\uffa5\042\uffa5\043\uffa5\046\uffa5" +
    "\047\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\076\uffa5\077" +
    "\uffa5\100\uffa5\102\uffa5\001\002\000\072\003\uffaa\004\uffaa" +
    "\005\uffaa\007\uffaa\011\uffaa\013\uffaa\016\uffaa\017\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\040\uffaa\042\uffaa\043\uffaa\046\uffaa\047\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\076\uffaa\077\uffaa\100\uffaa\102\uffaa" +
    "\001\002\000\072\003\uffa6\004\uffa6\005\uffa6\007\uffa6\011" +
    "\uffa6\013\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\040\uffa6\042\uffa6\043" +
    "\uffa6\046\uffa6\047\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\076\uffa6\077\uffa6\100\uffa6\102\uffa6\001\002\000\004\074" +
    "\uff9d\001\002\000\004\074\316\001\002\000\006\061\314" +
    "\074\uff9e\001\002\000\006\061\312\074\uff9f\001\002\000" +
    "\006\061\310\074\uffa0\001\002\000\012\003\303\077\307" +
    "\100\306\101\305\001\002\000\004\074\uffa3\001\002\000" +
    "\012\003\303\077\307\100\306\101\305\001\002\000\004" +
    "\074\uffa2\001\002\000\012\003\303\077\307\100\306\101" +
    "\305\001\002\000\004\074\uffa1\001\002\000\006\057\317" +
    "\073\320\001\002\000\072\003\uffa9\004\uffa9\005\uffa9\007" +
    "\uffa9\011\uffa9\013\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\040\uffa9\042" +
    "\uffa9\043\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\076\uffa9\077\uffa9\100\uffa9\102\uffa9\001\002\000" +
    "\012\003\303\077\307\100\306\101\305\001\002\000\004" +
    "\074\322\001\002\000\004\057\323\001\002\000\072\003" +
    "\uffa8\004\uffa8\005\uffa8\007\uffa8\011\uffa8\013\uffa8\016\uffa8" +
    "\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\040\uffa8\042\uffa8\043\uffa8\046\uffa8\047\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\076\uffa8\077\uffa8\100" +
    "\uffa8\102\uffa8\001\002\000\072\003\uffab\004\uffab\005\uffab" +
    "\007\uffab\011\uffab\013\uffab\016\uffab\017\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\040\uffab" +
    "\042\uffab\043\uffab\046\uffab\047\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\076\uffab\077\uffab\100\uffab\102\uffab\001\002" +
    "\000\072\003\uffbe\004\uffbe\005\uffbe\007\uffbe\011\uffbe\013" +
    "\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\040\uffbe\042\uffbe\043\uffbe\046" +
    "\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\076\uffbe" +
    "\077\uffbe\100\uffbe\102\uffbe\001\002\000\004\037\327\001" +
    "\002\000\014\003\121\067\072\076\276\077\064\101\062" +
    "\001\002\000\004\057\335\001\002\000\004\057\334\001" +
    "\002\000\006\031\074\057\333\001\002\000\072\003\uffbf" +
    "\004\uffbf\005\uffbf\007\uffbf\011\uffbf\013\uffbf\016\uffbf\017" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\040\uffbf\042\uffbf\043\uffbf\046\uffbf\047\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\102\uffbf\001\002\000\072\003\uffaf\004\uffaf\005\uffaf\007" +
    "\uffaf\011\uffaf\013\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\040\uffaf\042" +
    "\uffaf\043\uffaf\046\uffaf\047\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\076\uffaf\077\uffaf\100\uffaf\102\uffaf\001\002\000" +
    "\072\003\uffb5\004\uffb5\005\uffb5\007\uffb5\011\uffb5\013\uffb5" +
    "\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\040\uffb5\042\uffb5\043\uffb5\046\uffb5" +
    "\047\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\076\uffb5\077" +
    "\uffb5\100\uffb5\102\uffb5\001\002\000\004\076\340\001\002" +
    "\000\072\003\uff72\004\uff72\005\uff72\007\uff72\011\uff72\013" +
    "\uff72\016\uff72\017\uff72\021\uff72\022\uff72\023\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\040\uff72\042\uff72\043\uff72\046" +
    "\uff72\047\uff72\051\uff72\052\uff72\053\uff72\054\uff72\076\uff72" +
    "\077\uff72\100\uff72\102\uff72\001\002\000\004\070\341\001" +
    "\002\000\004\041\342\001\002\000\006\077\347\100\346" +
    "\001\002\000\004\042\356\001\002\000\004\042\uff70\001" +
    "\002\000\004\042\uff71\001\002\000\004\056\353\001\002" +
    "\000\004\056\350\001\002\000\044\003\040\004\026\013" +
    "\014\017\045\022\027\023\035\024\047\025\022\026\033" +
    "\027\050\040\034\046\043\047\015\052\021\054\024\076" +
    "\042\102\046\001\002\000\050\003\121\004\026\013\014" +
    "\017\045\022\027\023\035\024\047\025\022\026\033\027" +
    "\050\040\034\042\uff6c\046\043\047\015\052\021\054\024" +
    "\076\042\077\347\102\046\001\002\000\004\042\uff6d\001" +
    "\002\000\044\003\040\004\026\013\014\017\045\022\027" +
    "\023\035\024\047\025\022\026\033\027\050\040\034\046" +
    "\043\047\015\052\021\054\024\076\042\102\046\001\002" +
    "\000\050\003\121\004\026\013\014\017\045\022\027\023" +
    "\035\024\047\025\022\026\033\027\050\040\034\042\uff6e" +
    "\046\043\047\015\052\021\054\024\076\042\100\346\102" +
    "\046\001\002\000\004\042\uff6f\001\002\000\004\056\357" +
    "\001\002\000\044\003\040\004\026\013\014\017\045\022" +
    "\027\023\035\024\047\025\022\026\033\027\050\040\034" +
    "\046\043\047\015\052\021\054\024\076\042\102\046\001" +
    "\002\000\046\003\121\004\026\013\014\017\045\022\027" +
    "\023\035\024\047\025\022\026\033\027\050\040\034\043" +
    "\361\046\043\047\015\052\021\054\024\076\042\102\046" +
    "\001\002\000\072\003\uff73\004\uff73\005\uff73\007\uff73\011" +
    "\uff73\013\uff73\016\uff73\017\uff73\021\uff73\022\uff73\023\uff73" +
    "\024\uff73\025\uff73\026\uff73\027\uff73\040\uff73\042\uff73\043" +
    "\uff73\046\uff73\047\uff73\051\uff73\052\uff73\053\uff73\054\uff73" +
    "\076\uff73\077\uff73\100\uff73\102\uff73\001\002\000\072\003" +
    "\uffb8\004\uffb8\005\uffb8\007\uffb8\011\uffb8\013\uffb8\016\uffb8" +
    "\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\040\uffb8\042\uffb8\043\uffb8\046\uffb8\047\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\102\uffb8\001\002\000\006\037\365\067\364\001\002" +
    "\000\004\077\370\001\002\000\004\076\055\001\002\000" +
    "\004\057\367\001\002\000\072\003\uffb2\004\uffb2\005\uffb2" +
    "\007\uffb2\011\uffb2\013\uffb2\016\uffb2\017\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\040\uffb2" +
    "\042\uffb2\043\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\076\uffb2\077\uffb2\100\uffb2\102\uffb2\001\002" +
    "\000\004\070\371\001\002\000\004\067\372\001\002\000" +
    "\004\077\373\001\002\000\004\070\374\001\002\000\004" +
    "\037\375\001\002\000\004\073\376\001\002\000\012\003" +
    "\303\077\307\100\306\101\305\001\002\000\004\074\u0100" +
    "\001\002\000\004\073\u0101\001\002\000\012\003\303\077" +
    "\307\100\306\101\305\001\002\000\004\074\u0103\001\002" +
    "\000\004\057\u0104\001\002\000\072\003\uffb9\004\uffb9\005" +
    "\uffb9\007\uffb9\011\uffb9\013\uffb9\016\uffb9\017\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\040" +
    "\uffb9\042\uffb9\043\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\076\uffb9\077\uffb9\100\uffb9\102\uffb9\001" +
    "\002\000\072\003\uffc2\004\uffc2\005\uffc2\007\uffc2\011\uffc2" +
    "\013\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\040\uffc2\042\uffc2\043\uffc2" +
    "\046\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\076" +
    "\uffc2\077\uffc2\100\uffc2\102\uffc2\001\002\000\004\037\u0107" +
    "\001\002\000\014\003\121\067\072\076\276\077\064\101" +
    "\062\001\002\000\004\057\u010d\001\002\000\004\057\u010c" +
    "\001\002\000\006\031\074\057\u010b\001\002\000\072\003" +
    "\uffc3\004\uffc3\005\uffc3\007\uffc3\011\uffc3\013\uffc3\016\uffc3" +
    "\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\040\uffc3\042\uffc3\043\uffc3\046\uffc3\047\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\076\uffc3\077\uffc3\100" +
    "\uffc3\102\uffc3\001\002\000\072\003\uffb1\004\uffb1\005\uffb1" +
    "\007\uffb1\011\uffb1\013\uffb1\016\uffb1\017\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\040\uffb1" +
    "\042\uffb1\043\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\076\uffb1\077\uffb1\100\uffb1\102\uffb1\001\002" +
    "\000\072\003\uffb7\004\uffb7\005\uffb7\007\uffb7\011\uffb7\013" +
    "\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\040\uffb7\042\uffb7\043\uffb7\046" +
    "\uffb7\047\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\076\uffb7" +
    "\077\uffb7\100\uffb7\102\uffb7\001\002\000\100\003\uffcb\004" +
    "\uffcb\005\uffcb\007\uffcb\011\uffcb\012\uff98\013\uffcb\016\uffcb" +
    "\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\035\uff58\036\uff58\040\uffcb\042\uffcb\043\uffcb" +
    "\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\102\uffcb\001\002\000\004\012\u0110" +
    "\001\002\000\044\003\040\004\026\013\014\017\045\022" +
    "\027\023\035\024\047\025\022\026\033\027\050\040\034" +
    "\046\043\047\015\052\021\054\024\076\042\102\046\001" +
    "\002\000\046\003\121\004\026\005\u0112\013\014\017\045" +
    "\022\027\023\035\024\047\025\022\026\033\027\050\040" +
    "\034\046\043\047\015\052\021\054\024\076\042\102\046" +
    "\001\002\000\076\003\uffcc\004\uffcc\005\uffcc\006\u0115\007" +
    "\uffcc\010\u0114\011\uffcc\013\uffcc\016\uffcc\017\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\040" +
    "\uffcc\042\uffcc\043\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\076\uffcc\077\uffcc\100\uffcc\102\uffcc\001" +
    "\002\000\072\003\uffcd\004\uffcd\005\uffcd\007\uffcd\011\uffcd" +
    "\013\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\040\uffcd\042\uffcd\043\uffcd" +
    "\046\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\076" +
    "\uffcd\077\uffcd\100\uffcd\102\uffcd\001\002\000\016\003\u011a" +
    "\030\161\067\174\076\173\077\162\100\160\001\002\000" +
    "\006\003\u0116\012\u0117\001\002\000\072\003\uffc6\004\uffc6" +
    "\005\uffc6\007\uffc6\011\uffc6\013\uffc6\016\uffc6\017\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\040\uffc6\042\uffc6\043\uffc6\046\uffc6\047\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\076\uffc6\077\uffc6\100\uffc6\102\uffc6" +
    "\001\002\000\044\003\040\004\026\013\014\017\045\022" +
    "\027\023\035\024\047\025\022\026\033\027\050\040\034" +
    "\046\043\047\015\052\021\054\024\076\042\102\046\001" +
    "\002\000\046\003\121\004\026\007\u0119\013\014\017\045" +
    "\022\027\023\035\024\047\025\022\026\033\027\050\040" +
    "\034\046\043\047\015\052\021\054\024\076\042\102\046" +
    "\001\002\000\072\003\uffc7\004\uffc7\005\uffc7\007\uffc7\011" +
    "\uffc7\013\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\040\uffc7\042\uffc7\043" +
    "\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\076\uffc7\077\uffc7\100\uffc7\102\uffc7\001\002\000\100\003" +
    "\uffc9\004\uffc9\005\uffc9\007\uffc9\011\uffc9\012\uff98\013\uffc9" +
    "\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\035\uff58\036\uff58\040\uffc9\042\uffc9" +
    "\043\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\076\uffc9\077\uffc9\100\uffc9\102\uffc9\001\002\000\004" +
    "\012\u011c\001\002\000\044\003\040\004\026\013\014\017" +
    "\045\022\027\023\035\024\047\025\022\026\033\027\050" +
    "\040\034\046\043\047\015\052\021\054\024\076\042\102" +
    "\046\001\002\000\046\003\121\004\026\011\u011e\013\014" +
    "\017\045\022\027\023\035\024\047\025\022\026\033\027" +
    "\050\040\034\046\043\047\015\052\021\054\024\076\042" +
    "\102\046\001\002\000\076\003\uffc8\004\uffc8\005\uffc8\006" +
    "\u0115\007\uffc8\010\u0114\011\uffc8\013\uffc8\016\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\040\uffc8\042\uffc8\043\uffc8\046\uffc8\047\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\076\uffc8\077\uffc8\100\uffc8\102" +
    "\uffc8\001\002\000\072\003\uffca\004\uffca\005\uffca\007\uffca" +
    "\011\uffca\013\uffca\016\uffca\017\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\040\uffca\042\uffca" +
    "\043\uffca\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\076\uffca\077\uffca\100\uffca\102\uffca\001\002\000\072" +
    "\003\uff62\004\uff62\005\uff62\007\uff62\011\uff62\013\uff62\016" +
    "\uff62\017\uff62\021\uff62\022\uff62\023\uff62\024\uff62\025\uff62" +
    "\026\uff62\027\uff62\040\uff62\042\uff62\043\uff62\046\uff62\047" +
    "\uff62\051\uff62\052\uff62\053\uff62\054\uff62\076\uff62\077\uff62" +
    "\100\uff62\102\uff62\001\002\000\004\057\u0122\001\002\000" +
    "\072\003\uff63\004\uff63\005\uff63\007\uff63\011\uff63\013\uff63" +
    "\016\uff63\017\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025" +
    "\uff63\026\uff63\027\uff63\040\uff63\042\uff63\043\uff63\046\uff63" +
    "\047\uff63\051\uff63\052\uff63\053\uff63\054\uff63\076\uff63\077" +
    "\uff63\100\uff63\102\uff63\001\002\000\072\003\uffba\004\uffba" +
    "\005\uffba\007\uffba\011\uffba\013\uffba\016\uffba\017\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\040\uffba\042\uffba\043\uffba\046\uffba\047\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\076\uffba\077\uffba\100\uffba\102\uffba" +
    "\001\002\000\006\037\u0126\067\u0125\001\002\000\004\077" +
    "\u0129\001\002\000\004\076\055\001\002\000\004\057\u0128" +
    "\001\002\000\072\003\uffb3\004\uffb3\005\uffb3\007\uffb3\011" +
    "\uffb3\013\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\040\uffb3\042\uffb3\043" +
    "\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\102\uffb3\001\002\000\004\070" +
    "\u012a\001\002\000\004\037\u012b\001\002\000\004\073\u012c" +
    "\001\002\000\012\003\303\077\307\100\306\101\305\001" +
    "\002\000\004\074\u012e\001\002\000\004\057\u012f\001\002" +
    "\000\072\003\uffbb\004\uffbb\005\uffbb\007\uffbb\011\uffbb\013" +
    "\uffbb\016\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\040\uffbb\042\uffbb\043\uffbb\046" +
    "\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\076\uffbb" +
    "\077\uffbb\100\uffbb\102\uffbb\001\002\000\004\057\u0137\001" +
    "\002\000\004\057\u0136\001\002\000\072\003\uffe5\004\uffe5" +
    "\005\uffe5\007\uffe5\011\uffe5\013\uffe5\016\uffe5\017\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\040\uffe5\042\uffe5\043\uffe5\046\uffe5\047\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\076\uffe5\077\uffe5\100\uffe5\102\uffe5" +
    "\001\002\000\006\031\074\057\u0135\001\002\000\072\003" +
    "\uffe9\004\uffe9\005\uffe9\007\uffe9\011\uffe9\013\uffe9\016\uffe9" +
    "\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\040\uffe9\042\uffe9\043\uffe9\046\uffe9\047\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\076\uffe9\077\uffe9\100" +
    "\uffe9\102\uffe9\001\002\000\072\003\uffe8\004\uffe8\005\uffe8" +
    "\007\uffe8\011\uffe8\013\uffe8\016\uffe8\017\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\040\uffe8" +
    "\042\uffe8\043\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\076\uffe8\077\uffe8\100\uffe8\102\uffe8\001\002" +
    "\000\072\003\uffe6\004\uffe6\005\uffe6\007\uffe6\011\uffe6\013" +
    "\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\040\uffe6\042\uffe6\043\uffe6\046" +
    "\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\076\uffe6" +
    "\077\uffe6\100\uffe6\102\uffe6\001\002\000\072\003\uffe7\004" +
    "\uffe7\005\uffe7\007\uffe7\011\uffe7\013\uffe7\016\uffe7\017\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\040\uffe7\042\uffe7\043\uffe7\046\uffe7\047\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\076\uffe7\077\uffe7\100\uffe7\102" +
    "\uffe7\001\002\000\026\002\ufffd\003\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\045\ufffd\050\ufffd\001" +
    "\002\000\022\003\272\030\271\067\072\073\267\076\276" +
    "\077\064\100\266\101\062\001\002\000\072\003\uffae\004" +
    "\uffae\005\uffae\007\uffae\011\uffae\013\uffae\016\uffae\017\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027" +
    "\uffae\040\uffae\042\uffae\043\uffae\046\uffae\047\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\076\uffae\077\uffae\100\uffae\102" +
    "\uffae\001\002\000\010\003\121\076\u013e\100\u0140\001\002" +
    "\000\072\003\uff79\004\uff79\005\uff79\007\uff79\011\uff79\013" +
    "\uff79\016\uff79\017\uff79\021\uff79\022\uff79\023\uff79\024\uff79" +
    "\025\uff79\026\uff79\027\uff79\040\uff79\042\uff79\043\uff79\046" +
    "\uff79\047\uff79\051\uff79\052\uff79\053\uff79\054\uff79\076\uff79" +
    "\077\uff79\100\uff79\102\uff79\001\002\000\006\061\237\070" +
    "\uff74\001\002\000\014\003\061\061\237\067\060\070\uff74" +
    "\071\127\001\002\000\006\061\237\070\uff74\001\002\000" +
    "\006\061\237\070\uff74\001\002\000\004\070\u0142\001\002" +
    "\000\004\057\u0143\001\002\000\072\003\uff81\004\uff81\005" +
    "\uff81\007\uff81\011\uff81\013\uff81\016\uff81\017\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\040" +
    "\uff81\042\uff81\043\uff81\046\uff81\047\uff81\051\uff81\052\uff81" +
    "\053\uff81\054\uff81\076\uff81\077\uff81\100\uff81\102\uff81\001" +
    "\002\000\004\070\u0145\001\002\000\004\057\u0146\001\002" +
    "\000\072\003\uff7d\004\uff7d\005\uff7d\007\uff7d\011\uff7d\013" +
    "\uff7d\016\uff7d\017\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d" +
    "\025\uff7d\026\uff7d\027\uff7d\040\uff7d\042\uff7d\043\uff7d\046" +
    "\uff7d\047\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\076\uff7d" +
    "\077\uff7d\100\uff7d\102\uff7d\001\002\000\004\070\u0148\001" +
    "\002\000\004\057\u0149\001\002\000\072\003\uff7a\004\uff7a" +
    "\005\uff7a\007\uff7a\011\uff7a\013\uff7a\016\uff7a\017\uff7a\021" +
    "\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a" +
    "\040\uff7a\042\uff7a\043\uff7a\046\uff7a\047\uff7a\051\uff7a\052" +
    "\uff7a\053\uff7a\054\uff7a\076\uff7a\077\uff7a\100\uff7a\102\uff7a" +
    "\001\002\000\004\070\u014b\001\002\000\004\057\u014c\001" +
    "\002\000\072\003\uff7f\004\uff7f\005\uff7f\007\uff7f\011\uff7f" +
    "\013\uff7f\016\uff7f\017\uff7f\021\uff7f\022\uff7f\023\uff7f\024" +
    "\uff7f\025\uff7f\026\uff7f\027\uff7f\040\uff7f\042\uff7f\043\uff7f" +
    "\046\uff7f\047\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\076" +
    "\uff7f\077\uff7f\100\uff7f\102\uff7f\001\002\000\004\076\u014f" +
    "\001\002\000\072\003\uffd0\004\uffd0\005\uffd0\007\uffd0\011" +
    "\uffd0\013\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\040\uffd0\042\uffd0\043" +
    "\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\102\uffd0\001\002\000\004\037" +
    "\u0150\001\002\000\004\077\u0151\001\002\000\004\014\u0152" +
    "\001\002\000\004\015\u0153\001\002\000\004\067\u0154\001" +
    "\002\000\012\003\121\076\173\077\162\100\160\001\002" +
    "\000\004\070\u0156\001\002\000\044\003\040\004\026\013" +
    "\014\017\045\022\027\023\035\024\047\025\022\026\033" +
    "\027\050\040\034\046\043\047\015\052\021\054\024\076" +
    "\042\102\046\001\002\000\046\003\121\004\026\013\014" +
    "\016\u0158\017\045\022\027\023\035\024\047\025\022\026" +
    "\033\027\050\040\034\046\043\047\015\052\021\054\024" +
    "\076\042\102\046\001\002\000\072\003\uffd1\004\uffd1\005" +
    "\uffd1\007\uffd1\011\uffd1\013\uffd1\016\uffd1\017\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\040" +
    "\uffd1\042\uffd1\043\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\076\uffd1\077\uffd1\100\uffd1\102\uffd1\001" +
    "\002\000\010\003\uffed\045\uffed\076\uffed\001\002\000\010" +
    "\003\ufff0\045\ufff0\076\ufff0\001\002\000\026\002\ufff8\003" +
    "\uffea\022\u015a\023\u015f\024\u015c\025\u0159\026\u015e\027\u0162" +
    "\045\uffea\050\u015d\001\002\000\010\003\uffee\045\uffee\076" +
    "\uffee\001\002\000\006\003\u0173\045\u0172\001\002\000\010" +
    "\003\uffec\045\uffec\076\uffec\001\002\000\010\003\uffef\045" +
    "\uffef\076\uffef\001\002\000\006\003\u0166\045\u0165\001\002" +
    "\000\004\002\uffff\001\002\000\010\003\uffeb\045\uffeb\076" +
    "\uffeb\001\002\000\026\002\ufffa\003\uffea\022\u015a\023\u015f" +
    "\024\u015c\025\u0159\026\u015e\027\u0162\045\uffea\050\u015d\001" +
    "\002\000\004\002\ufffb\001\002\000\004\076\u0167\001\002" +
    "\000\026\002\ufff4\003\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\045\ufff4\050\ufff4\001\002\000\004" +
    "\067\u0168\001\002\000\022\003\uffea\022\u015a\023\u015f\024" +
    "\u015c\025\u0159\026\u015e\027\u0162\076\uffea\001\002\000\004" +
    "\070\u016f\001\002\000\006\003\u016b\076\u016c\001\002\000" +
    "\004\070\ufff1\001\002\000\006\061\u016d\070\ufff2\001\002" +
    "\000\022\003\uffea\022\u015a\023\u015f\024\u015c\025\u0159\026" +
    "\u015e\027\u0162\076\uffea\001\002\000\004\070\ufff3\001\002" +
    "\000\044\003\040\004\026\013\014\017\045\022\027\023" +
    "\035\024\047\025\022\026\033\027\050\040\034\046\043" +
    "\047\015\052\021\054\024\076\042\102\046\001\002\000" +
    "\046\003\121\004\026\013\014\017\045\022\027\023\035" +
    "\024\047\025\022\026\033\027\050\040\034\046\043\047" +
    "\015\051\u0171\052\021\054\024\076\042\102\046\001\002" +
    "\000\026\002\ufff5\003\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\045\ufff5\050\ufff5\001\002\000\004" +
    "\076\u0174\001\002\000\026\002\ufff6\003\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\045\ufff6\050\ufff6" +
    "\001\002\000\004\067\u0175\001\002\000\004\070\u0176\001" +
    "\002\000\044\003\040\004\026\013\014\017\045\022\027" +
    "\023\035\024\047\025\022\026\033\027\050\040\034\046" +
    "\043\047\015\052\021\054\024\076\042\102\046\001\002" +
    "\000\046\003\121\004\026\013\014\017\045\022\027\023" +
    "\035\024\047\025\022\026\033\027\050\040\034\046\043" +
    "\047\015\051\u0178\052\021\054\024\076\042\102\046\001" +
    "\002\000\026\002\ufff7\003\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\045\ufff7\050\ufff7\001\002\000" +
    "\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\010\002\006\023\007\033\004\001\001\000" +
    "\002\001\001\000\012\024\u0160\034\u0162\035\u015a\036\u015f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\017\010\012\011\031" +
    "\013\027\014\043\015\015\016\030\020\036\026\022\037" +
    "\024\043\040\044\016\045\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\212\011\031\013\027\014\223" +
    "\015\213\016\217\020\221\026\214\037\215\043\222\044" +
    "\016\045\220\001\001\000\012\025\u0132\040\u0133\046\070" +
    "\047\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\u010e\005\167" +
    "\006\166\007\165\044\163\050\170\051\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\171\005\167\006\166\007\165" +
    "\044\163\050\170\051\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\066\042\064\046\070\047\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\072\046\070" +
    "\047\065\001\001\000\002\001\001\000\006\046\075\047" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\101\001\001\000\004\047\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\066\042\103\046\070" +
    "\047\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\112\046\070\047\065\001\001\000\010\025\111" +
    "\046\070\047\065\001\001\000\010\025\110\046\070\047" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\117\044\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\176\006\175\044\163\050\170" +
    "\051\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\176\044\163\050\170\051\164" +
    "\001\001\000\002\001\001\000\004\006\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\206\001\001" +
    "\000\004\006\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\211\010\012\011\031\013\027\014\043" +
    "\015\015\016\030\020\036\026\022\037\024\043\040\044" +
    "\016\045\035\001\001\000\032\010\212\011\031\013\027" +
    "\014\223\015\213\016\217\020\221\026\214\037\215\043" +
    "\222\044\016\045\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\163\051" +
    "\227\001\001\000\006\044\163\051\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\232\044\234\001" +
    "\001\000\002\001\001\000\004\027\260\001\001\000\004" +
    "\027\255\001\001\000\004\027\252\001\001\000\004\027" +
    "\237\001\001\000\006\041\242\044\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\251\001\001\000\004\027\250\001\001\000\004\027\247" +
    "\001\001\000\004\027\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\272\025\274\041\267\044\273\046\070\047\065" +
    "\001\001\000\002\001\001\000\004\012\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\310\001\001\000\002\001\001\000\004\012\312\001" +
    "\001\000\002\001\001\000\004\012\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\331\041\327\044\330\046\070\047\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\342\031\344\032\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\350\010\012" +
    "\011\031\013\027\014\043\015\015\016\030\020\036\026" +
    "\022\037\024\043\040\044\016\045\035\001\001\000\034" +
    "\010\212\011\031\013\027\014\223\015\213\016\217\020" +
    "\221\026\214\032\351\037\215\043\222\044\016\045\220" +
    "\001\001\000\002\001\001\000\034\003\353\010\012\011" +
    "\031\013\027\014\043\015\015\016\030\020\036\026\022" +
    "\037\024\043\040\044\016\045\035\001\001\000\034\010" +
    "\212\011\031\013\027\014\223\015\213\016\217\020\221" +
    "\026\214\031\354\037\215\043\222\044\016\045\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\357" +
    "\010\012\011\031\013\027\014\043\015\015\016\030\020" +
    "\036\026\022\037\024\043\040\044\016\045\035\001\001" +
    "\000\032\010\212\011\031\013\027\014\223\015\213\016" +
    "\217\020\221\026\214\037\215\043\222\044\016\045\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\365\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\025\u0109\041\u0107\044\u0108" +
    "\046\070\047\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\u0110\010\012\011\031\013\027\014\043\015\015" +
    "\016\030\020\036\026\022\037\024\043\040\044\016\045" +
    "\035\001\001\000\032\010\212\011\031\013\027\014\223" +
    "\015\213\016\217\020\221\026\214\037\215\043\222\044" +
    "\016\045\220\001\001\000\004\017\u0112\001\001\000\002" +
    "\001\001\000\020\004\u011a\005\167\006\166\007\165\044" +
    "\163\050\170\051\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\u0117\010\012\011\031\013\027\014" +
    "\043\015\015\016\030\020\036\026\022\037\024\043\040" +
    "\044\016\045\035\001\001\000\032\010\212\011\031\013" +
    "\027\014\223\015\213\016\217\020\221\026\214\037\215" +
    "\043\222\044\016\045\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\u011c\010\012" +
    "\011\031\013\027\014\043\015\015\016\030\020\036\026" +
    "\022\037\024\043\040\044\016\045\035\001\001\000\032" +
    "\010\212\011\031\013\027\014\223\015\213\016\217\020" +
    "\221\026\214\037\215\043\222\044\016\045\220\001\001" +
    "\000\004\017\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u012c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\021" +
    "\u0139\025\274\041\267\044\273\046\070\047\065\001\001" +
    "\000\002\001\001\000\006\041\u013c\044\u013e\001\001\000" +
    "\002\001\001\000\004\027\u0149\001\001\000\004\027\u0146" +
    "\001\001\000\004\027\u0143\001\001\000\004\027\u0140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\u0154\044\163\050\170\051\164\001\001\000\002" +
    "\001\001\000\034\003\u0156\010\012\011\031\013\027\014" +
    "\043\015\015\016\030\020\036\026\022\037\024\043\040" +
    "\044\016\045\035\001\001\000\032\010\212\011\031\013" +
    "\027\014\223\015\213\016\217\020\221\026\214\037\215" +
    "\043\222\044\016\045\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\u0178\034\u0162" +
    "\035\u015a\036\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\u0163\034" +
    "\u0162\035\u015a\036\u015f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\u0168\036\u0169\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\u016d\036" +
    "\u0169\001\001\000\002\001\001\000\034\003\u016f\010\012" +
    "\011\031\013\027\014\043\015\015\016\030\020\036\026" +
    "\022\037\024\043\040\044\016\045\035\001\001\000\032" +
    "\010\212\011\031\013\027\014\223\015\213\016\217\020" +
    "\221\026\214\037\215\043\222\044\016\045\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\u0176\010\012" +
    "\011\031\013\027\014\043\015\015\016\030\020\036\026" +
    "\022\037\024\043\040\044\016\045\035\001\001\000\032" +
    "\010\212\011\031\013\027\014\223\015\213\016\217\020" +
    "\221\026\214\037\215\043\222\044\016\045\220\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Node raiz;
    public static Symbol found;
    public static LinkedList<String> Errores = new LinkedList<String>();
    private static Symbol s;

    public Symbol getS(){
        return this.s;
} 
    public void report_error(String errorBody, Object info){
        found = (Symbol)info;
	Sintax.Errores.add("Se encontro Report_Error: " + found.value+"\n");
        Sintax.Errores.add(" Descripcion:\n");
    }

    public void report_fatal_error(String errorBody, Object info){ 
        //error = "Errores no Recuperables \n";
        found = (Symbol)info;
	Sintax.Errores.add("Se encontro Error_Fatal: " + found.value);
	Sintax.Errores.add(" Descripcion:\n");
    }
    public static void Main_Error(){
        switch(found.sym){
            case sym.Begin: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: main \n");
                break;
            case sym.Main:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Main \n");
            default:
                Sintax.Errores.add("Error en el Main \n");
                break;
        }
        Sintax.Errores.add("[Main Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Void_Error(){
        switch(found.sym){
            case sym.Call: 
                Sintax.Errores.add("Error en el llamado de la funcion.\n");
                break;
            case sym.Begin:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: call \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: begin \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.EndCall: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end call o ) \n");
                break;
        }
       Sintax.Errores.add("[Void_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void Matriz_Error(){
        switch(found.sym){
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.ParIzq:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador o ) \n");
                break;
            case sym.ENTERO:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO \n");
                break;
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            case sym.CurlyIzq:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => o }\n");
                break;
            case sym.CurlyDer:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Formato Lista ej.1,2,3\n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: } \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
       Sintax.Errores.add("[AsigLista_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void TypeList_Error(){
        switch(found.sym){
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.ParIzq:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ENTERO:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO \n");
                break;
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            case sym.CurlyIzq:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.CurlyDer:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Formato Lista ej.1,2,3\n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: } \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
       Sintax.Errores.add("[AsigLista_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void TypeBool_Error(){
        switch(found.sym){
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.TBool:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: true/false \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o =>\n");
                break;
        }
       Sintax.Errores.add("[AsigBool_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void TypeFloat_Error(){
        switch(found.sym){
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.CADENA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Operacion aritmetica o metodo \n");
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o =>\n");
                break;
        }
       Sintax.Errores.add("[AsigFloat_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void TypeString_Error(){
        switch(found.sym){
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.CADENA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Operacion aritmetica o metodo \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o =>\n");
                break;
        }
       Sintax.Errores.add("[AsigString_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void TypeInt_Error(){
        switch(found.sym){
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.CADENA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Operacion aritmetica o metodo \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o => \n");
                break;
        }
       Sintax.Errores.add("[AsigInt_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Entrada_Error(){
        switch(found.sym){
            case sym.put:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: put \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: put \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o put ) \n");
                break;
        }
       Sintax.Errores.add("[Entrada_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Parametro_Error(){
        switch(found.sym){
            case sym.Begin:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Tipoe int/string/float/bool \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: begin \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Parametro \n");
                break;
            case sym.EndCall: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end call o ) \n");
                break;
        }
       Sintax.Errores.add("[Parametro_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void TReturn_Error(){
        switch(found.sym){
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: return \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Return_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
        public static void For_Error(){
        switch(found.sym){
            case sym.TypeInt: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: for \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( o TypeInt\n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.ENTERO: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.OP_RELA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.IN: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO \n");
                break;
            case sym.Range: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: in \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: range \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndFor: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end for o ) \n");
                break;
        }
        Sintax.Errores.add("[For_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+ "\n");
    }
   public static void While_Error(){
        switch(found.sym){
            case sym.While:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: while \n");
                break;
            case sym.Repeat:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndWhile: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end while o repeat \n");
                break;
        }
        Sintax.Errores.add("[While_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Normal_If_Error(){
        switch(found.sym){
            case sym.IF:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: If \n");
                break;
            case sym.Then:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            case sym.ElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end if \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: if else o then \n");
                break;
        }
        Sintax.Errores.add("[If_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void IfElse_Error(){
        switch(found.sym){
            case sym.Then:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION or Else \n");
                break;
            case sym.EndElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            case sym.ElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end else if or else if \n");
                break;
            case sym.EndElse: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: if else or end else \n");
                break;
        }
        Sintax.Errores.add("[IfElse_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Switch(){
        switch(found.sym){
            case sym.Case: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: switch \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: switch \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.Of: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            case sym.Default: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Casos \n");
                break;
            case sym.DosPuntos: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: default \n");
                break;
            case sym.EndCase: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end case o of \n");
                break;
        }
        Sintax.Errores.add("[Switch_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

        public static void Concat_Error(){
        switch(found.sym){
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: , \n");
                break;
            case sym.CADENA: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: , \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: error concatenacion \n");
                break;
        }
        Sintax.Errores.add("[Concatenacion_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Else_Error(){
        Sintax.Errores.add("Error en el Else \n");
        Sintax.Errores.add("[IfElse_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Print_Error(){
        switch(found.sym){
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Print \n");
                break;
            case sym.CADENA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Print_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Lista_Error(){
        switch(found.sym){
            case sym.Coma: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO/DECIMAL/IDENTIFICADOR/CADENA \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador o ; \n");
                break;
        }
        Sintax.Errores.add("[Matriz_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void Coordenadas_Error(){
        switch(found.sym){
            case sym.SquareBIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ENTERO: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: [ \n");
                break;
            case sym.SquareBDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ] o ; \n");
                break;
        }
        Sintax.Errores.add("[Matriz_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

     public static void Prop2_Error(){
        switch(found.sym){
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: proposicion \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: </>/>=/<=/= \n");
                break;
            case sym.OP_LOGIC: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Sintax.Errores.add("[Proposicion2_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
     public static void Prop1_Error(){
        switch(found.sym){
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: proposicion \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: </>/>=/<=/= \n");
                break;
            case sym.DECIMAL: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: </>/>=/<=/= \n");
                break;
            case sym.CADENA: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: </>/>=/<=/= \n");
                break;
            case sym.ENTERO: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: </>/>=/<=/= \n");
                break;
            case sym.OP_LOGIC: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Sintax.Errores.add("[Proposicion1_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void Asignar_Error(){
        switch(found.sym){
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Tipo \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Asignacion_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
 
    public static void Declarar(){
        switch(found.sym){
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: type int/string/float/bool \n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Declaracion_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void TipoA_Error(){
        switch(found.sym){
            case sym.CADENA: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.TBool: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.CurlyIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.CurlyDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: LISTA \n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Type_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Parametro(){
            switch(found.sym){
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: TYPE \n");
                break;
            case sym.Coma: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: parametro\n");
                break;
            }
             Sintax.Errores.add("[Type_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // COMENTAR ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTAR",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SHOWCOORDENADAS ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("MATRIZ"); Sintax.Coordenadas_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq IDENTIFICADOR SquareBDer SquareBIzq IDENTIFICADOR SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) e1)));
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) e2)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq IDENTIFICADOR SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq IDENTIFICADOR SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) e1)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq DECIMAL SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("DECIMAL", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq DECIMAL SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("DECIMAL", ((String) e1)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq CADENA SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("CADENA", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq CADENA SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("CADENA", ((String) e1)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq ENTERO SquareBIzq SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("ENTERO", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("ENTERO", ((String) e)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ENTRADA ::= put error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("ENTRADA"); Sintax.Entrada_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENTRADA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ENTRADA ::= put IDENTIFICADOR PuntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node entrada= new Node("Entrada");
    entrada.addNode(new Node("IDENTIFICADOR", ((String) i)));
    RESULT=entrada;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENTRADA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ARGUMENTO ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node argumento= new Node("argumento");    
    argumento.addNode(oa);
    RESULT=argumento;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ARGUMENTO ::= OPERACION_ARITMETICA Coma ARGUMENTO 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node argumento= new Node("argumento");    
    argumento.addNode(oa);
    argumento.addNode(a);
    RESULT=argumento;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LLAMAR_METODO ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("FUNCION PARAMETRO");Sintax.Parametro_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ParDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    RESULT=cmetodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    RESULT=cmetodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer OP_MULT OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    cmetodo.addNode(new Node("OP_MULT", ((String) o)));
    cmetodo.addNode(oa);
    RESULT=cmetodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer OP_DIV OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    cmetodo.addNode(new Node("OP_DIV", ((String) o)));
    cmetodo.addNode(oa);
    RESULT=cmetodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer OP_SUMA OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    cmetodo.addNode(new Node("OP_SUMA", ((String) o)));
    cmetodo.addNode(oa);
    RESULT=cmetodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CASOE ::= ENTERO DosPuntos SENTENCIA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node casoe= new Node("caseE");
    casoe.addNode(new Node("entero", ((String) e)));    
    casoe.addNode(s);    
    RESULT=casoe;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CASOE ::= ENTERO DosPuntos SENTENCIA CASOE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node casoe= new Node("caseE");
    casoe.addNode(new Node("entero", ((String) e)));    
    casoe.addNode(s);    
    casoe.addNode(c1);
    RESULT=casoe;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CASOC ::= CADENA DosPuntos SENTENCIA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node casoc= new Node("caseC");
    casoc.addNode(new Node("cadena", ((String) c)));    
    casoc.addNode(s);    
    RESULT=casoc;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOC",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASOC ::= CADENA DosPuntos SENTENCIA CASOC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node casoc= new Node("caseC");
    casoc.addNode(new Node("cadena", ((String) c)));    
    casoc.addNode(s);    
    casoc.addNode(c1);
    RESULT=casoc;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOC",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CASOS ::= CASOE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node caso= new Node("case");
    caso.addNode(c);
    RESULT=caso;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CASOS ::= CASOC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node caso= new Node("case");
    caso.addNode(c);
    RESULT=caso;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SWITCH_ESTRUCTURA ::= Case error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("SWITCH");Sintax.Switch(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ESTRUCTURA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SWITCH_ESTRUCTURA ::= Case ParIzq IDENTIFICADOR ParDer Of CASOS Default DosPuntos SENTENCIA EndCase 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node Switch= new Node("switch");
    Switch.addNode(new Node("IDENTIFICADOR", ((String) i)));
    Switch.addNode(c);
    Switch.addNode(s);
    RESULT=Switch;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ESTRUCTURA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONCAT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONCAT ::= Coma IDENTIFICADOR CONCAT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(new Node("IDENTIFICADOR", ((String) c)));
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONCAT ::= Coma SHOWCOORDENADAS CONCAT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(c);
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONCAT ::= Coma LLAMAR_METODO CONCAT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(c);
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONCAT ::= Coma CADENA CONCAT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(new Node("cadena", ((String) c)));
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IMPRIMIR ::= Imp error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("PRINTLN");Sintax.Print_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IMPRIMIR ::= Imp ParIzq IDENTIFICADOR CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IMPRIMIR ::= ImpLn ParIzq IDENTIFICADOR CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IMPRIMIR ::= ImpLn error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("PRINTLN");Sintax.Print_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // IMPRIMIR ::= Imp ParIzq SHOWCOORDENADAS CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // IMPRIMIR ::= ImpLn ParIzq SHOWCOORDENADAS CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IMPRIMIR ::= Imp ParIzq LLAMAR_METODO CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IMPRIMIR ::= ImpLn ParIzq LLAMAR_METODO CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IMPRIMIR ::= Imp ParIzq CADENA CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IMPRIMIR ::= ImpLn ParIzq CADENA CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FX ::= ParIzq OPERACION_ARITMETICA ParDer 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node FX= new Node("DECIMAL");
        FX.addNode(o);
        RESULT=FX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FX ::= DECIMAL 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node FX= new Node("DECIMAL");
        FX.addNode(new Node("DECIMAL", ((String) o)));
        RESULT=FX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FX ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node FX= new Node("IDENTIFICADOR");
        FX.addNode(new Node("IDENTIFICADOR", ((String) o)));
        RESULT=FX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FX ::= ENTERO 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node FX= new Node("ENTERO");
        FX.addNode(new Node("ENTERO", ((String) o)));
        RESULT=FX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TX ::= FX 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node TX= new Node("operacionA");
        TX.addNode(f);
        RESULT=TX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TX ::= TX OP_DIV FX 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node TX= new Node("operacionA");
        TX.addNode(t);
        TX.addNode(new Node("OP_DIV", ((String) o)));
        TX.addNode(f);
        RESULT=TX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TX ::= TX OP_MULT FX 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node TX= new Node("operacionA");
        TX.addNode(t);
        TX.addNode(new Node("OP_MULT", ((String) o)));
        TX.addNode(f);
        RESULT=TX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACION_ARITMETICA ::= TX 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node operacionA= new Node("op");
        operacionA.addNode(oa);
        RESULT=operacionA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA OP_SUMA TX 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node operacionA= new Node("operacionA");
    operacionA.addNode(oa);
    operacionA.addNode(new Node("OP_SUMA", ((String) s)));
    operacionA.addNode(t); 
    RESULT=operacionA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FY ::= SHOWCOORDENADAS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node fy= new Node("COORDENADAS", ((String) o));
        RESULT=fy;
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FY",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FY ::= CADENA 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node fy= new Node("CADENA", ((String) o));
        RESULT=fy;
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FY",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FY ::= ENTERO 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node fy= new Node("ENTERO", ((String) o));
        RESULT=fy;
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FY",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FY ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node fy= new Node("IDENTIFICADOR", ((String) o));
        RESULT=fy;
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FY",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TY ::= FY OP_RELA2 FY 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node ty= new Node("PROPOSICION");
    ty.addNode(f1);
    ty.addNode(new Node("OP_RELA", ((String) o)));
    ty.addNode(f2);
    RESULT=ty;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TY",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PROP1 ::= TY 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop= new Node("PROPOSICION");
    prop.addNode(f1);
    RESULT=prop;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PROP1 ::= FY OP_RELA FY 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop= new Node("PROPOSICION");
    prop.addNode(f1);
    prop.addNode(new Node("OP_RELA", ((String) o)));
    prop.addNode(f2);
    RESULT=prop;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PROP2 ::= ParIzq PROP1 ParDer 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node prop2= new Node("PROPOSICION");
    prop2.addNode(p);
    RESULT=prop2;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP2",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PROP2 ::= ParIzq PROP1 ParDer OP_LOGIC PROP2 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop2= new Node("PROPOSICION");
    prop2.addNode(p);
    prop2.addNode(new Node("OP_LOGIC", ((String) t)));
    prop2.addNode(p1);
    RESULT=prop2;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP2",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PROP3 ::= ParIzq error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		System.out.println("Prop3"); Sintax.Prop2_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP3",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PROP3 ::= ParIzq PROP2 ParDer 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node prop3= new Node("PROPOSICION");
    prop3.addNode(p);
    RESULT=prop3;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP3",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PROP3 ::= ParIzq PROP2 ParDer OP_LOGIC PROP3 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop3= new Node("PROPOSICION3");
    prop3.addNode(p);
    prop3.addNode(new Node("OP_LOGIC", ((String) t)));
    prop3.addNode(p1);
    RESULT=prop3;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP3",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PROPOSICION ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PROPOSICION ::= TBool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop= new Node("PROPOSICION");
    prop.addNode(new Node("BOOL", ((String) t)));
    RESULT=prop;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PROPOSICION ::= PROP3 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PROPOSICION ::= PROP2 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PROPOSICION ::= PROP1 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LISTA ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("LISTA"); Sintax.Lista_Error();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LISTA ::= DECIMAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("DECIMAL", ((String) t)));
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTA ::= CADENA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("CADENA", ((String) t)));
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTA ::= ENTERO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("ENTERO", ((String) t)));
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LISTA ::= DECIMAL Coma LISTA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("decimal", ((String) t)));
    LISTA.addNode(l);
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTA ::= CADENA Coma LISTA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("cadena", ((String) t)));
    LISTA.addNode(l);
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTA ::= ENTERO Coma LISTA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("ENTERO", ((String) t)));
    LISTA.addNode(l);
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPOA ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("TYPE");Sintax.TipoA_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPOA ::= SHOWCOORDENADAS PuntoComa 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(l);
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPOA ::= LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(l);
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPOA ::= OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(oa);
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPOA ::= CurlyIzq LISTA CurlyDer CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(t1);
    tipo.addNode(t2);
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPOA ::= CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(t);
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPOA ::= TBool PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
      Node tipo= new Node("TIPO");
        tipo.addNode(new Node("BOOL", ((String) t)));
        RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPOA ::= CADENA PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(new Node("CADENA", ((String) t)));
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIGNAR ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("ASIGNAR");Sintax.Asignar_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASIGNAR ::= IDENTIFICADOR OP_ASIG TIPOA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node Asignar= new Node("asignar");
    Asignar.addNode(new Node("IDENTIFICADOR", ((String) i)));
    Asignar.addNode(new Node("OP_ASIG","=>"));
    Asignar.addNode(c);
    RESULT=Asignar;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGNAR ::= SHOWCOORDENADAS OP_ASIG TIPOA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node Asignar= new Node("asignar");
    Asignar.addNode(i);
    Asignar.addNode(new Node("OP_ASIG","=>"));
    Asignar.addNode(c);
    RESULT=Asignar;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARAR_ASIGNAR ::= TypeFloat IDENTIFICADOR OP_ASIG SHOWCOORDENADAS PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARAR_ASIGNAR ::= TypeString IDENTIFICADOR OP_ASIG SHOWCOORDENADAS PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(i);
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARAR_ASIGNAR ::= TypeInt IDENTIFICADOR OP_ASIG SHOWCOORDENADAS PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARAR_ASIGNAR ::= TypeMatriz IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARAR_ASIGNAR ::= TypeList IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARAR_ASIGNAR ::= TypeBool IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARAR_ASIGNAR ::= TypeFloat IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARAR_ASIGNAR ::= TypeString IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARAR_ASIGNAR ::= TypeInt IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARAR_ASIGNAR ::= TypeMatriz error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		System.out.println("TYPEMATRIZ"); Sintax.Matriz_Error();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARAR_ASIGNAR ::= TypeMatriz IDENTIFICADOR ParIzq ENTERO ParDer ParIzq ENTERO ParDer OP_ASIG CurlyIzq LISTA CurlyDer CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object l2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("ENTERO",((String) e1)));
    declararA.addNode(new Node("ENTERO",((String) e2)));
    declararA.addNode(l1);
    declararA.addNode(l2);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARAR_ASIGNAR ::= TypeList error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		System.out.println("TYPELIST"); Sintax.TypeList_Error();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARAR_ASIGNAR ::= TypeList IDENTIFICADOR ParIzq ENTERO ParDer OP_ASIG CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("ENTERO",((String) e)));
    declararA.addNode(l);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARAR_ASIGNAR ::= TypeBool error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		System.out.println("TYPEBOOL"); Sintax.TypeBool_Error();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARAR_ASIGNAR ::= TypeBool IDENTIFICADOR OP_ASIG TBool PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("BOOl", ((String) c)));
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARAR_ASIGNAR ::= TypeFloat error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		System.out.println("TYPEFLOAT"); Sintax.TypeFloat_Error();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARAR_ASIGNAR ::= TypeFloat IDENTIFICADOR OP_ASIG OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(oa);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARAR_ASIGNAR ::= TypeString error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		System.out.println("TYPESTRING"); Sintax.TypeString_Error();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARAR_ASIGNAR ::= TypeString IDENTIFICADOR OP_ASIG CADENA PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("CADENA", ((String) c)));
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARAR_ASIGNAR ::= TypeInt error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		System.out.println("TYPEINT"); Sintax.TypeInt_Error();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARAR_ASIGNAR ::= TypeInt IDENTIFICADOR OP_ASIG OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(oa);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_DEC_ASIG ::= ASIGNAR 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node da= new Node("asig");
        da.addNode(d);
        RESULT=da;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DEC_ASIG",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_DEC_ASIG ::= DECLARAR_ASIGNAR 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node da= new Node("decl asig");
    da.addNode(d);
    RESULT=da;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DEC_ASIG",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IFELSE ::= Else error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("Else");Sintax.Else_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFELSE ::= Else Then SENTENCIA EndElse 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node eif = new Node("else");
    eif.addNode(s);
    RESULT=eif;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IFELSE ::= ElseIf PROPOSICION Then SENTENCIA EndElseIf 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node eif = new Node("else If");
    eif.addNode(p);
    eif.addNode(s);
    RESULT=eif;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IFELSE ::= ElseIf error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("IFELSE");Sintax.IfElse_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IFELSE ::= ElseIf PROPOSICION Then SENTENCIA EndElseIf IFELSE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ie = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node eif = new Node("else If");
    eif.addNode(p);
    eif.addNode(s);
    eif.addNode(ie);
    RESULT=eif;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF_ESTRUCTURA ::= IF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("IF NORMAL");Sintax.Normal_If_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ESTRUCTURA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF_ESTRUCTURA ::= IF PROPOSICION Then SENTENCIA EndIf 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node IF = new Node("If");
    IF.addNode(p);
    IF.addNode(s);
    RESULT=IF;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ESTRUCTURA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF_ESTRUCTURA ::= IF PROPOSICION Then SENTENCIA EndIf IFELSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node IF = new Node("If");
    IF.addNode(t);
    IF.addNode(r);
    IF.addNode(i);
    RESULT=IF;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ESTRUCTURA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LOOP_WHILE ::= While error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("WHILE");Sintax.While_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOOP_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LOOP_WHILE ::= While PROPOSICION Repeat SENTENCIA EndWhile 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node While = new Node("While");
    While.addNode(p);
    While.addNode(s);
    RESULT=While;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOOP_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LOOP_FOR ::= For error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("FOR");Sintax.For_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOOP_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LOOP_FOR ::= For TypeInt IDENTIFICADOR OP_ASIG ENTERO IN Range ParIzq PROP1 ParDer SENTENCIA EndFor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node For = new Node("FOR");
        For.addNode(new Node("TypeInt","int"));
        For.addNode(new Node("IDENTIFICADOR", ((String) i)));
        For.addNode(new Node("OP_ASIG", "=>"));
        For.addNode(new Node("ENTERO",((String) e) ));
        For.addNode(p);
        For.addNode(s);
        RESULT=For;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOOP_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= COMENTAR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("Comentar");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SENTENCIA COMENTAR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= ENTRADA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("Entrada");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SENTENCIA ENTRADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= SWITCH_ESTRUCTURA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("Switch");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= SENTENCIA SWITCH_ESTRUCTURA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("Imprimir");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= SENTENCIA IMPRIMIR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SENTENCIA_DEC_ASIG 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("Declar_Asig");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA SENTENCIA_DEC_ASIG 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= IF_ESTRUCTURA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("If");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA IF_ESTRUCTURA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= LOOP_WHILE 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("Loop  While");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA LOOP_WHILE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= LOOP_FOR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("Loop For");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA LOOP_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= RETORNO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("Retorno");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA RETORNO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TRETORNO ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("RETURN");Sintax.TReturn_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TRETORNO ::= TBool PuntoComa 
            {
              Object RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node tretorno = new Node("retorno");
        tretorno.addNode(new Node("TBool", ((String) tb)));
        RESULT=tretorno;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TRETORNO ::= CADENA PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node tretorno = new Node("retorno");
        tretorno.addNode(new Node("CADENA", ((String) c)));
        RESULT=tretorno;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TRETORNO ::= OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node tretorno = new Node("retorno");
        tretorno.addNode(op);
        RESULT=tretorno;
       
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RETORNO ::= RETURN TRETORNO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node retorno = new Node("Return");
        retorno.addNode(t);
        RESULT=retorno;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE ::= TypeBool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE ::= TypeMatriz 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE ::= TypeList 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= TypeString 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= TypeFloat 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= TypeInt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETRO ::= TYPE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("FUNCION PARAMETRO");Sintax.Parametro(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETRO ::= TYPE IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node parametro = new Node("parametro"); 
    parametro.addNode(t);
    parametro.addNode(new Node("IDENTIFICADOR", ((String) i)));
    RESULT=parametro;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETRO ::= TYPE IDENTIFICADOR Coma PARAMETRO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node parametro = new Node("parametro"); 
    parametro.addNode(t);
    parametro.addNode(new Node("IDENTIFICADOR", ((String) i)));
    parametro.addNode(pa);
    RESULT=parametro;
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // METODO_T ::= TYPE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("FUNCION PARAMETRO");Sintax.Parametro_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_T",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // METODO_T ::= TYPE Begin IDENTIFICADOR ParIzq PARAMETRO ParDer SENTENCIA EndCall 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node metodoT = new Node("metodo parametro");
    metodoT.addNode(t);
    metodoT.addNode(new Node("IDENTIFICADOR", ((String) i)));
    metodoT.addNode(p);
    metodoT.addNode(s);
    RESULT=metodoT;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_T",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // M_VOID ::= Call error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("FUNCION VOID"); Sintax.Void_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_VOID",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // M_VOID ::= Call Begin IDENTIFICADOR ParIzq ParDer SENTENCIA EndCall 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Node Void = new Node("void");
        Void.addNode(new Node("IDENTIFICADOR", ((String) i)));
        Void.addNode(se);
        RESULT=Void;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_VOID",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODOS ::= METODO_T 
            {
              Object RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node metodo = new Node("metodos"); 
        metodo.addNode(mt);
        RESULT=metodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODOS ::= METODO_T METODOS 
            {
              Object RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node metodo = new Node("metodos"); 
        metodo.addNode(mt);
        metodo.addNode(m);
        RESULT=metodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODOS ::= M_VOID 
            {
              Object RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mv = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node metodo = new Node("metodos"); 
        metodo.addNode(mv);
        RESULT=metodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODOS ::= M_VOID METODOS 
            {
              Object RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mv = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node metodo = new Node("metodos"); 
        metodo.addNode(mv);
        metodo.addNode(m);
        RESULT=metodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // M_MAIN ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("MAIN");Sintax.Main_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // M_MAIN ::= Main Begin SENTENCIA EndMain 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		  
        Node main = new Node("Main");
        main.addNode(s);
        RESULT=main;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE ::= M_MAIN 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Node clase = new Node("main");
                            clase.addNode(m);
                            RESULT=clase;
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= M_MAIN METODOS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Node clase = new Node("main");
                            clase.addNode(m);
                            clase.addNode(me);
                            RESULT=clase;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CLASE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Sintax.raiz=(Node)c; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

