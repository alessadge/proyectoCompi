
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 30 00:55:12 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 30 00:55:12 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\002\003\000\002\023" +
    "\004\000\002\023\003\000\002\033\006\000\002\033\003" +
    "\000\002\024\004\000\002\024\003\000\002\024\004\000" +
    "\002\024\003\000\002\034\011\000\002\034\004\000\002" +
    "\035\012\000\002\035\004\000\002\022\006\000\002\022" +
    "\004\000\002\022\004\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\002\000\002\037\004\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\014\016\000\002\014\004\000\002\015\007\000\002" +
    "\015\004\000\002\016\010\000\002\016\007\000\002\016" +
    "\004\000\002\017\010\000\002\017\004\000\002\017\007" +
    "\000\002\017\006\000\002\017\004\000\002\010\003\000" +
    "\002\010\003\000\002\011\007\000\002\011\007\000\002" +
    "\011\007\000\002\011\007\000\002\011\014\000\002\011" +
    "\022\000\002\011\007\000\002\011\007\000\002\011\007" +
    "\000\002\011\007\000\002\011\004\000\002\011\007\000" +
    "\002\011\004\000\002\011\007\000\002\011\004\000\002" +
    "\011\007\000\002\011\004\000\002\011\007\000\002\011" +
    "\004\000\002\011\007\000\002\011\004\000\002\013\005" +
    "\000\002\013\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\006\000\002\021\011\000\002\021\004\000\002" +
    "\021\004\000\002\021\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\007\007\000\002\007\005\000\002\006\007\000\002\006" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\025\005\000\002\025\003\000\002\046\005" +
    "\000\002\046\005\000\002\046\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\005\000\002" +
    "\026\010\000\002\026\010\000\002\026\010\000\002\026" +
    "\010\000\002\026\010\000\002\026\010\000\002\026\004" +
    "\000\002\026\010\000\002\026\010\000\002\026\004\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\002\000\002\020\014\000\002\020" +
    "\004\000\002\030\003\000\002\030\003\000\002\031\006" +
    "\000\002\031\005\000\002\032\006\000\002\032\005\000" +
    "\002\041\010\000\002\041\010\000\002\041\010\000\002" +
    "\041\006\000\002\041\005\000\002\041\004\000\002\042" +
    "\005\000\002\042\003\000\002\043\005\000\002\043\004" +
    "\000\002\044\006\000\002\044\011\000\002\044\006\000" +
    "\002\044\011\000\002\044\006\000\002\044\011\000\002" +
    "\044\006\000\002\044\011\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\006\003\004\043\006\001\002\000\026\002" +
    "\ufffc\003\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\044\ufffc\047\ufffc\001\002\000\026\002\ufffe\003" +
    "\uffea\022\u015c\023\u0161\024\u015e\025\u015b\026\u0160\027\u0164" +
    "\044\uffea\047\u015f\001\002\000\004\044\012\001\002\000" +
    "\004\002\011\001\002\000\004\002\000\001\002\000\004" +
    "\002\001\001\002\000\044\003\036\004\025\013\014\017" +
    "\045\022\026\023\034\024\046\025\021\026\031\027\047" +
    "\037\033\045\042\046\015\051\020\053\023\075\041\101" +
    "\044\001\002\000\070\004\uffdb\005\uffdb\007\uffdb\011\uffdb" +
    "\013\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\037\uffdb\041\uffdb\042\uffdb" +
    "\045\uffdb\046\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\101\uffdb\001\002\000\006\003\u0150" +
    "\022\u014f\001\002\000\006\003\u013e\066\u013d\001\002\000" +
    "\070\004\uffdf\005\uffdf\007\uffdf\011\uffdf\013\uffdf\016\uffdf" +
    "\017\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\037\uffdf\041\uffdf\042\uffdf\045\uffdf\046\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\075\uffdf\076\uffdf\077" +
    "\uffdf\101\uffdf\001\002\000\044\004\025\013\014\017\045" +
    "\022\026\023\034\024\046\025\021\026\031\027\047\037" +
    "\033\045\042\046\015\051\020\052\u013c\053\023\075\041" +
    "\101\044\001\002\000\020\003\u0136\030\u0135\066\071\075" +
    "\067\076\063\077\u0134\100\061\001\002\000\006\003\u0127" +
    "\075\u0128\001\002\000\070\004\uffd9\005\uffd9\007\uffd9\011" +
    "\uffd9\013\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\037\uffd9\041\uffd9\042" +
    "\uffd9\045\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\075\uffd9\076\uffd9\077\uffd9\101\uffd9\001\002\000\006\003" +
    "\u0124\075\u0125\001\002\000\070\004\uffe3\005\uffe3\007\uffe3" +
    "\011\uffe3\013\uffe3\016\uffe3\017\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\037\uffe3\041\uffe3" +
    "\042\uffe3\045\uffe3\046\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\075\uffe3\076\uffe3\077\uffe3\101\uffe3\001\002\000\020" +
    "\003\u0112\030\155\066\166\075\165\076\156\077\153\100" +
    "\154\001\002\000\006\003\u0109\075\u010a\001\002\000\070" +
    "\004\uffc4\005\uffc4\007\uffc4\011\uffc4\013\uffc4\016\uffc4\017" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\037\uffc4\041\uffc4\042\uffc4\045\uffc4\046\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\075\uffc4\076\uffc4\077\uffc4" +
    "\101\uffc4\001\002\000\070\004\uffdd\005\uffdd\007\uffdd\011" +
    "\uffdd\013\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\037\uffdd\041\uffdd\042" +
    "\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\075\uffdd\076\uffdd\077\uffdd\101\uffdd\001\002\000\006\003" +
    "\366\075\367\001\002\000\070\004\uffc5\005\uffc5\007\uffc5" +
    "\011\uffc5\013\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\037\uffc5\041\uffc5" +
    "\042\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\101\uffc5\001\002\000\006" +
    "\003\343\066\342\001\002\000\006\003\330\075\331\001" +
    "\002\000\070\004\uffd3\005\uffd3\007\uffd3\011\uffd3\013\uffd3" +
    "\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\037\uffd3\041\uffd3\042\uffd3\045\uffd3" +
    "\046\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\101\uffd3\001\002\000\070\004\uffd2\005\uffd2" +
    "\007\uffd2\011\uffd2\013\uffd2\016\uffd2\017\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\037\uffd2" +
    "\041\uffd2\042\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\075\uffd2\076\uffd2\077\uffd2\101\uffd2\001\002" +
    "\000\070\004\uffd7\005\uffd7\007\uffd7\011\uffd7\013\uffd7\016" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\037\uffd7\041\uffd7\042\uffd7\045\uffd7\046" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\075\uffd7\076\uffd7" +
    "\077\uffd7\101\uffd7\001\002\000\070\004\uffd5\005\uffd5\007" +
    "\uffd5\011\uffd5\013\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\037\uffd5\041" +
    "\uffd5\042\uffd5\045\uffd5\046\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\075\uffd5\076\uffd5\077\uffd5\101\uffd5\001\002\000" +
    "\006\003\272\036\273\001\002\000\006\003\240\066\237" +
    "\001\002\000\070\004\uffe1\005\uffe1\007\uffe1\011\uffe1\013" +
    "\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\037\uffe1\041\uffe1\042\uffe1\045" +
    "\uffe1\046\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\075\uffe1" +
    "\076\uffe1\077\uffe1\101\uffe1\001\002\000\070\004\uff57\005" +
    "\uff57\007\uff57\011\uff57\013\uff57\016\uff57\017\uff57\021\uff57" +
    "\022\uff57\023\uff57\024\uff57\025\uff57\026\uff57\027\uff57\037" +
    "\uff57\041\uff57\042\uff57\045\uff57\046\uff57\050\uff57\051\uff57" +
    "\052\uff57\053\uff57\075\uff57\076\uff57\077\uff57\101\uff57\001" +
    "\002\000\020\003\157\030\155\066\166\075\165\076\156" +
    "\077\153\100\154\001\002\000\006\003\114\075\115\001" +
    "\002\000\006\003\050\075\051\001\002\000\070\004\uffb9" +
    "\005\uffb9\007\uffb9\011\uffb9\013\uffb9\016\uffb9\017\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\037\uffb9\041\uffb9\042\uffb9\045\uffb9\046\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\075\uffb9\076\uffb9\077\uffb9\101\uffb9" +
    "\001\002\000\004\036\052\001\002\000\006\030\055\075" +
    "\054\001\002\000\004\056\113\001\002\000\006\003\060" +
    "\066\057\001\002\000\004\056\056\001\002\000\070\004" +
    "\uffc0\005\uffc0\007\uffc0\011\uffc0\013\uffc0\016\uffc0\017\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\037\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\075\uffc0\076\uffc0\077\uffc0\101" +
    "\uffc0\001\002\000\014\066\071\067\062\075\067\076\063" +
    "\100\061\001\002\000\010\056\uff64\060\uff64\067\uff64\001" +
    "\002\000\016\031\uff82\032\uff82\033\uff82\056\uff82\060\uff82" +
    "\067\uff82\001\002\000\010\056\uff65\060\uff65\067\uff65\001" +
    "\002\000\016\031\uff84\032\uff84\033\uff84\056\uff84\060\uff84" +
    "\067\uff84\001\002\000\004\067\104\001\002\000\016\031" +
    "\uff85\032\uff85\033\uff85\056\uff85\060\uff85\067\uff85\001\002" +
    "\000\010\031\073\060\102\067\uff62\001\002\000\016\031" +
    "\uff83\032\uff83\033\uff83\056\uff83\060\uff83\067\uff83\001\002" +
    "\000\016\031\uff88\032\076\033\077\056\uff88\060\uff88\067" +
    "\uff88\001\002\000\012\066\071\075\067\076\063\100\061" +
    "\001\002\000\006\031\073\067\074\001\002\000\012\066" +
    "\071\075\067\076\063\100\061\001\002\000\016\031\uff81" +
    "\032\uff81\033\uff81\056\uff81\060\uff81\067\uff81\001\002\000" +
    "\016\031\uff89\032\076\033\077\056\uff89\060\uff89\067\uff89" +
    "\001\002\000\012\066\071\075\067\076\063\100\061\001" +
    "\002\000\012\066\071\075\067\076\063\100\061\001\002" +
    "\000\016\031\uff86\032\uff86\033\uff86\056\uff86\060\uff86\067" +
    "\uff86\001\002\000\016\031\uff87\032\uff87\033\uff87\056\uff87" +
    "\060\uff87\067\uff87\001\002\000\012\066\071\075\067\076" +
    "\063\100\061\001\002\000\004\067\uff63\001\002\000\016" +
    "\031\107\032\105\033\106\056\uff66\060\uff66\067\uff66\001" +
    "\002\000\012\066\071\075\067\076\063\100\061\001\002" +
    "\000\012\066\071\075\067\076\063\100\061\001\002\000" +
    "\012\066\071\075\067\076\063\100\061\001\002\000\012" +
    "\031\073\056\uff69\060\uff69\067\uff69\001\002\000\012\031" +
    "\073\056\uff68\060\uff68\067\uff68\001\002\000\012\031\073" +
    "\056\uff67\060\uff67\067\uff67\001\002\000\070\004\uffba\005" +
    "\uffba\007\uffba\011\uffba\013\uffba\016\uffba\017\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\037" +
    "\uffba\041\uffba\042\uffba\045\uffba\046\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\uffba\075\uffba\076\uffba\077\uffba\101\uffba\001" +
    "\002\000\070\004\uffb1\005\uffb1\007\uffb1\011\uffb1\013\uffb1" +
    "\016\uffb1\017\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\037\uffb1\041\uffb1\042\uffb1\045\uffb1" +
    "\046\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\075\uffb1\076" +
    "\uffb1\077\uffb1\101\uffb1\001\002\000\004\036\116\001\002" +
    "\000\006\075\120\077\122\001\002\000\004\056\152\001" +
    "\002\000\010\003\060\066\057\070\125\001\002\000\004" +
    "\056\124\001\002\000\004\056\123\001\002\000\070\004" +
    "\uffc2\005\uffc2\007\uffc2\011\uffc2\013\uffc2\016\uffc2\017\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\037\uffc2\041\uffc2\042\uffc2\045\uffc2\046\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\075\uffc2\076\uffc2\077\uffc2\101" +
    "\uffc2\001\002\000\070\004\uffb2\005\uffb2\007\uffb2\011\uffb2" +
    "\013\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\037\uffb2\041\uffb2\042\uffb2" +
    "\045\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\101\uffb2\001\002\000\012\075\126" +
    "\076\130\077\131\100\127\001\002\000\004\071\146\001" +
    "\002\000\004\071\142\001\002\000\004\071\136\001\002" +
    "\000\004\071\132\001\002\000\020\012\uff5d\020\uff5d\035" +
    "\uff5d\056\uff5d\060\uff5d\067\uff5d\070\133\001\002\000\004" +
    "\076\134\001\002\000\004\071\135\001\002\000\016\012" +
    "\uff5c\020\uff5c\035\uff5c\056\uff5c\060\uff5c\067\uff5c\001\002" +
    "\000\020\012\uff5f\020\uff5f\035\uff5f\056\uff5f\060\uff5f\067" +
    "\uff5f\070\137\001\002\000\004\076\140\001\002\000\004" +
    "\071\141\001\002\000\016\012\uff5e\020\uff5e\035\uff5e\056" +
    "\uff5e\060\uff5e\067\uff5e\001\002\000\020\012\uff5b\020\uff5b" +
    "\035\uff5b\056\uff5b\060\uff5b\067\uff5b\070\143\001\002\000" +
    "\004\076\144\001\002\000\004\071\145\001\002\000\016" +
    "\012\uff5a\020\uff5a\035\uff5a\056\uff5a\060\uff5a\067\uff5a\001" +
    "\002\000\020\012\uff59\020\uff59\035\uff59\056\uff59\060\uff59" +
    "\067\uff59\070\147\001\002\000\004\076\150\001\002\000" +
    "\004\071\151\001\002\000\016\012\uff58\020\uff58\035\uff58" +
    "\056\uff58\060\uff58\067\uff58\001\002\000\070\004\uffbc\005" +
    "\uffbc\007\uffbc\011\uffbc\013\uffbc\016\uffbc\017\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\037" +
    "\uffbc\041\uffbc\042\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\075\uffbc\076\uffbc\077\uffbc\101\uffbc\001" +
    "\002\000\004\035\234\001\002\000\004\035\231\001\002" +
    "\000\006\012\uff9c\020\uff9c\001\002\000\004\035\226\001" +
    "\002\000\072\004\uffce\005\uffce\007\uffce\011\uffce\013\uffce" +
    "\016\uffce\017\uffce\020\uff9b\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\037\uffce\041\uffce\042\uffce" +
    "\045\uffce\046\uffce\050\uffce\051\uffce\052\uffce\053\uffce\075" +
    "\uffce\076\uffce\077\uffce\101\uffce\001\002\000\004\035\223" +
    "\001\002\000\006\012\uff9d\020\uff9d\001\002\000\006\012" +
    "\uff9e\020\uff9e\001\002\000\006\012\uff9f\020\uff9f\001\002" +
    "\000\004\020\207\001\002\000\006\035\201\070\125\001" +
    "\002\000\014\066\167\075\165\076\156\077\153\100\154" +
    "\001\002\000\012\075\165\076\156\077\153\100\154\001" +
    "\002\000\004\067\175\001\002\000\004\067\172\001\002" +
    "\000\012\012\uff97\020\uff97\034\173\067\uff97\001\002\000" +
    "\004\066\167\001\002\000\010\012\uff98\020\uff98\067\uff98" +
    "\001\002\000\010\012\uff99\020\uff99\034\176\001\002\000" +
    "\004\066\177\001\002\000\004\066\167\001\002\000\006" +
    "\012\uff9a\020\uff9a\001\002\000\012\075\202\076\205\077" +
    "\206\100\204\001\002\000\012\012\uff96\020\uff96\067\uff96" +
    "\070\125\001\002\000\010\012\uff8c\020\uff8c\067\uff8c\001" +
    "\002\000\010\012\uff8f\020\uff8f\067\uff8f\001\002\000\010" +
    "\012\uff95\020\uff95\067\uff95\001\002\000\010\012\uff92\020" +
    "\uff92\067\uff92\001\002\000\044\003\036\004\025\013\014" +
    "\017\045\022\026\023\034\024\046\025\021\026\031\027" +
    "\047\037\033\045\042\046\015\051\020\053\023\075\041" +
    "\101\044\001\002\000\044\004\025\013\014\017\045\021" +
    "\215\022\026\023\034\024\046\025\021\026\031\027\047" +
    "\037\033\045\042\046\015\051\020\053\023\075\041\101" +
    "\044\001\002\000\070\004\uffdc\005\uffdc\007\uffdc\011\uffdc" +
    "\013\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\037\uffdc\041\uffdc\042\uffdc" +
    "\045\uffdc\046\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\101\uffdc\001\002\000\070\004\uffe0" +
    "\005\uffe0\007\uffe0\011\uffe0\013\uffe0\016\uffe0\017\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\037\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\075\uffe0\076\uffe0\077\uffe0\101\uffe0" +
    "\001\002\000\070\004\uffda\005\uffda\007\uffda\011\uffda\013" +
    "\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\037\uffda\041\uffda\042\uffda\045" +
    "\uffda\046\uffda\050\uffda\051\uffda\052\uffda\053\uffda\075\uffda" +
    "\076\uffda\077\uffda\101\uffda\001\002\000\070\004\uffe4\005" +
    "\uffe4\007\uffe4\011\uffe4\013\uffe4\016\uffe4\017\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\037" +
    "\uffe4\041\uffe4\042\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\075\uffe4\076\uffe4\077\uffe4\101\uffe4\001" +
    "\002\000\070\004\uffcf\005\uffcf\007\uffcf\011\uffcf\013\uffcf" +
    "\016\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\037\uffcf\041\uffcf\042\uffcf\045\uffcf" +
    "\046\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\101\uffcf\001\002\000\070\004\uffde\005\uffde" +
    "\007\uffde\011\uffde\013\uffde\016\uffde\017\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\037\uffde" +
    "\041\uffde\042\uffde\045\uffde\046\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\075\uffde\076\uffde\077\uffde\101\uffde\001\002" +
    "\000\070\004\uffd4\005\uffd4\007\uffd4\011\uffd4\013\uffd4\016" +
    "\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\037\uffd4\041\uffd4\042\uffd4\045\uffd4\046" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\075\uffd4\076\uffd4" +
    "\077\uffd4\101\uffd4\001\002\000\070\004\uffd8\005\uffd8\007" +
    "\uffd8\011\uffd8\013\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\037\uffd8\041" +
    "\uffd8\042\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\075\uffd8\076\uffd8\077\uffd8\101\uffd8\001\002\000" +
    "\070\004\uffd6\005\uffd6\007\uffd6\011\uffd6\013\uffd6\016\uffd6" +
    "\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\037\uffd6\041\uffd6\042\uffd6\045\uffd6\046\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\075\uffd6\076\uffd6\077" +
    "\uffd6\101\uffd6\001\002\000\070\004\uffe2\005\uffe2\007\uffe2" +
    "\011\uffe2\013\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\037\uffe2\041\uffe2" +
    "\042\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\075\uffe2\076\uffe2\077\uffe2\101\uffe2\001\002\000\004" +
    "\075\224\001\002\000\012\012\uff8a\020\uff8a\067\uff8a\070" +
    "\125\001\002\000\010\012\uff8b\020\uff8b\067\uff8b\001\002" +
    "\000\006\075\227\076\230\001\002\000\010\012\uff93\020" +
    "\uff93\067\uff93\001\002\000\010\012\uff94\020\uff94\067\uff94" +
    "\001\002\000\006\075\232\100\233\001\002\000\010\012" +
    "\uff8d\020\uff8d\067\uff8d\001\002\000\010\012\uff8e\020\uff8e" +
    "\067\uff8e\001\002\000\006\075\235\077\236\001\002\000" +
    "\010\012\uff90\020\uff90\067\uff90\001\002\000\010\012\uff91" +
    "\020\uff91\067\uff91\001\002\000\006\075\242\077\244\001" +
    "\002\000\070\004\uff7a\005\uff7a\007\uff7a\011\uff7a\013\uff7a" +
    "\016\uff7a\017\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025" +
    "\uff7a\026\uff7a\027\uff7a\037\uff7a\041\uff7a\042\uff7a\045\uff7a" +
    "\046\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\075\uff7a\076" +
    "\uff7a\077\uff7a\101\uff7a\001\002\000\006\060\245\067\uff72" +
    "\001\002\000\014\003\060\060\245\066\057\067\uff72\070" +
    "\125\001\002\000\006\060\245\067\uff72\001\002\000\006" +
    "\060\245\067\uff72\001\002\000\006\075\252\077\254\001" +
    "\002\000\004\067\247\001\002\000\004\056\250\001\002" +
    "\000\070\004\uff80\005\uff80\007\uff80\011\uff80\013\uff80\016" +
    "\uff80\017\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80" +
    "\026\uff80\027\uff80\037\uff80\041\uff80\042\uff80\045\uff80\046" +
    "\uff80\050\uff80\051\uff80\052\uff80\053\uff80\075\uff80\076\uff80" +
    "\077\uff80\101\uff80\001\002\000\006\060\245\067\uff72\001" +
    "\002\000\014\003\060\060\245\066\057\067\uff72\070\125" +
    "\001\002\000\006\060\245\067\uff72\001\002\000\006\060" +
    "\245\067\uff72\001\002\000\004\067\uff76\001\002\000\004" +
    "\067\uff74\001\002\000\004\067\uff73\001\002\000\004\067" +
    "\uff75\001\002\000\004\067\262\001\002\000\004\056\263" +
    "\001\002\000\070\004\uff7c\005\uff7c\007\uff7c\011\uff7c\013" +
    "\uff7c\016\uff7c\017\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c" +
    "\025\uff7c\026\uff7c\027\uff7c\037\uff7c\041\uff7c\042\uff7c\045" +
    "\uff7c\046\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\075\uff7c" +
    "\076\uff7c\077\uff7c\101\uff7c\001\002\000\004\067\265\001" +
    "\002\000\004\056\266\001\002\000\070\004\uff79\005\uff79" +
    "\007\uff79\011\uff79\013\uff79\016\uff79\017\uff79\021\uff79\022" +
    "\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\037\uff79" +
    "\041\uff79\042\uff79\045\uff79\046\uff79\050\uff79\051\uff79\052" +
    "\uff79\053\uff79\075\uff79\076\uff79\077\uff79\101\uff79\001\002" +
    "\000\004\067\270\001\002\000\004\056\271\001\002\000" +
    "\070\004\uff7e\005\uff7e\007\uff7e\011\uff7e\013\uff7e\016\uff7e" +
    "\017\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026" +
    "\uff7e\027\uff7e\037\uff7e\041\uff7e\042\uff7e\045\uff7e\046\uff7e" +
    "\050\uff7e\051\uff7e\052\uff7e\053\uff7e\075\uff7e\076\uff7e\077" +
    "\uff7e\101\uff7e\001\002\000\070\004\uffad\005\uffad\007\uffad" +
    "\011\uffad\013\uffad\016\uffad\017\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\037\uffad\041\uffad" +
    "\042\uffad\045\uffad\046\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\075\uffad\076\uffad\077\uffad\101\uffad\001\002\000\022" +
    "\003\300\030\277\066\071\072\275\075\303\076\063\077" +
    "\274\100\061\001\002\000\004\056\327\001\002\000\010" +
    "\076\311\077\312\100\310\001\002\000\004\056\306\001" +
    "\002\000\004\056\305\001\002\000\070\004\uffa6\005\uffa6" +
    "\007\uffa6\011\uffa6\013\uffa6\016\uffa6\017\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\037\uffa6" +
    "\041\uffa6\042\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\075\uffa6\076\uffa6\077\uffa6\101\uffa6\001\002" +
    "\000\070\004\uffae\005\uffae\007\uffae\011\uffae\013\uffae\016" +
    "\uffae\017\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\037\uffae\041\uffae\042\uffae\045\uffae\046" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\075\uffae\076\uffae" +
    "\077\uffae\101\uffae\001\002\000\006\031\073\056\304\001" +
    "\002\000\016\003\060\031\uff83\032\uff83\033\uff83\056\uff83" +
    "\066\057\001\002\000\070\004\uffa8\005\uffa8\007\uffa8\011" +
    "\uffa8\013\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\037\uffa8\041\uffa8\042" +
    "\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\075\uffa8\076\uffa8\077\uffa8\101\uffa8\001\002\000\070\004" +
    "\uffab\005\uffab\007\uffab\011\uffab\013\uffab\016\uffab\017\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027" +
    "\uffab\037\uffab\041\uffab\042\uffab\045\uffab\046\uffab\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\075\uffab\076\uffab\077\uffab\101" +
    "\uffab\001\002\000\070\004\uffa7\005\uffa7\007\uffa7\011\uffa7" +
    "\013\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\037\uffa7\041\uffa7\042\uffa7" +
    "\045\uffa7\046\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\075" +
    "\uffa7\076\uffa7\077\uffa7\101\uffa7\001\002\000\004\073\321" +
    "\001\002\000\006\060\317\073\uffa0\001\002\000\006\060" +
    "\315\073\uffa2\001\002\000\006\060\313\073\uffa1\001\002" +
    "\000\010\076\311\077\312\100\310\001\002\000\004\073" +
    "\uffa4\001\002\000\010\076\311\077\312\100\310\001\002" +
    "\000\004\073\uffa5\001\002\000\010\076\311\077\312\100" +
    "\310\001\002\000\004\073\uffa3\001\002\000\006\056\322" +
    "\072\323\001\002\000\070\004\uffaa\005\uffaa\007\uffaa\011" +
    "\uffaa\013\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\037\uffaa\041\uffaa\042" +
    "\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\075\uffaa\076\uffaa\077\uffaa\101\uffaa\001\002\000\010\076" +
    "\311\077\312\100\310\001\002\000\004\073\325\001\002" +
    "\000\004\056\326\001\002\000\070\004\uffa9\005\uffa9\007" +
    "\uffa9\011\uffa9\013\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\037\uffa9\041" +
    "\uffa9\042\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\075\uffa9\076\uffa9\077\uffa9\101\uffa9\001\002\000" +
    "\070\004\uffac\005\uffac\007\uffac\011\uffac\013\uffac\016\uffac" +
    "\017\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026" +
    "\uffac\027\uffac\037\uffac\041\uffac\042\uffac\045\uffac\046\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\075\uffac\076\uffac\077" +
    "\uffac\101\uffac\001\002\000\070\004\uffaf\005\uffaf\007\uffaf" +
    "\011\uffaf\013\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\037\uffaf\041\uffaf" +
    "\042\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\075\uffaf\076\uffaf\077\uffaf\101\uffaf\001\002\000\004" +
    "\036\332\001\002\000\012\066\071\075\336\076\063\100" +
    "\061\001\002\000\004\056\341\001\002\000\004\056\340" +
    "\001\002\000\006\031\073\056\337\001\002\000\020\003" +
    "\060\031\uff83\032\uff83\033\uff83\056\uff83\066\057\070\125" +
    "\001\002\000\070\004\uffc1\005\uffc1\007\uffc1\011\uffc1\013" +
    "\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\037\uffc1\041\uffc1\042\uffc1\045" +
    "\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\075\uffc1" +
    "\076\uffc1\077\uffc1\101\uffc1\001\002\000\070\004\uffb0\005" +
    "\uffb0\007\uffb0\011\uffb0\013\uffb0\016\uffb0\017\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\037" +
    "\uffb0\041\uffb0\042\uffb0\045\uffb0\046\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\075\uffb0\076\uffb0\077\uffb0\101\uffb0\001" +
    "\002\000\070\004\uffbb\005\uffbb\007\uffbb\011\uffbb\013\uffbb" +
    "\016\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\037\uffbb\041\uffbb\042\uffbb\045\uffbb" +
    "\046\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\075\uffbb\076" +
    "\uffbb\077\uffbb\101\uffbb\001\002\000\004\075\344\001\002" +
    "\000\070\004\uff70\005\uff70\007\uff70\011\uff70\013\uff70\016" +
    "\uff70\017\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70" +
    "\026\uff70\027\uff70\037\uff70\041\uff70\042\uff70\045\uff70\046" +
    "\uff70\050\uff70\051\uff70\052\uff70\053\uff70\075\uff70\076\uff70" +
    "\077\uff70\101\uff70\001\002\000\004\067\345\001\002\000" +
    "\004\040\346\001\002\000\006\076\353\077\352\001\002" +
    "\000\004\041\362\001\002\000\004\041\uff6e\001\002\000" +
    "\004\041\uff6f\001\002\000\004\055\357\001\002\000\004" +
    "\055\354\001\002\000\044\003\036\004\025\013\014\017" +
    "\045\022\026\023\034\024\046\025\021\026\031\027\047" +
    "\037\033\045\042\046\015\051\020\053\023\075\041\101" +
    "\044\001\002\000\046\004\025\013\014\017\045\022\026" +
    "\023\034\024\046\025\021\026\031\027\047\037\033\041" +
    "\uff6a\045\042\046\015\051\020\053\023\075\041\076\353" +
    "\101\044\001\002\000\004\041\uff6b\001\002\000\044\003" +
    "\036\004\025\013\014\017\045\022\026\023\034\024\046" +
    "\025\021\026\031\027\047\037\033\045\042\046\015\051" +
    "\020\053\023\075\041\101\044\001\002\000\046\004\025" +
    "\013\014\017\045\022\026\023\034\024\046\025\021\026" +
    "\031\027\047\037\033\041\uff6c\045\042\046\015\051\020" +
    "\053\023\075\041\077\352\101\044\001\002\000\004\041" +
    "\uff6d\001\002\000\004\055\363\001\002\000\044\003\036" +
    "\004\025\013\014\017\045\022\026\023\034\024\046\025" +
    "\021\026\031\027\047\037\033\045\042\046\015\051\020" +
    "\053\023\075\041\101\044\001\002\000\044\004\025\013" +
    "\014\017\045\022\026\023\034\024\046\025\021\026\031" +
    "\027\047\037\033\042\365\045\042\046\015\051\020\053" +
    "\023\075\041\101\044\001\002\000\070\004\uff71\005\uff71" +
    "\007\uff71\011\uff71\013\uff71\016\uff71\017\uff71\021\uff71\022" +
    "\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71\037\uff71" +
    "\041\uff71\042\uff71\045\uff71\046\uff71\050\uff71\051\uff71\052" +
    "\uff71\053\uff71\075\uff71\076\uff71\077\uff71\101\uff71\001\002" +
    "\000\070\004\uffb5\005\uffb5\007\uffb5\011\uffb5\013\uffb5\016" +
    "\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\037\uffb5\041\uffb5\042\uffb5\045\uffb5\046" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\075\uffb5\076\uffb5" +
    "\077\uffb5\101\uffb5\001\002\000\006\036\371\066\370\001" +
    "\002\000\004\076\374\001\002\000\004\075\054\001\002" +
    "\000\004\056\373\001\002\000\070\004\uffb6\005\uffb6\007" +
    "\uffb6\011\uffb6\013\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\037\uffb6\041" +
    "\uffb6\042\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\075\uffb6\076\uffb6\077\uffb6\101\uffb6\001\002\000" +
    "\004\067\375\001\002\000\004\066\376\001\002\000\004" +
    "\076\377\001\002\000\004\067\u0100\001\002\000\004\036" +
    "\u0101\001\002\000\004\072\u0102\001\002\000\010\076\311" +
    "\077\312\100\310\001\002\000\004\073\u0104\001\002\000" +
    "\004\072\u0105\001\002\000\010\076\311\077\312\100\310" +
    "\001\002\000\004\073\u0107\001\002\000\004\056\u0108\001" +
    "\002\000\070\004\uffbe\005\uffbe\007\uffbe\011\uffbe\013\uffbe" +
    "\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\037\uffbe\041\uffbe\042\uffbe\045\uffbe" +
    "\046\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\075\uffbe\076" +
    "\uffbe\077\uffbe\101\uffbe\001\002\000\070\004\uffb3\005\uffb3" +
    "\007\uffb3\011\uffb3\013\uffb3\016\uffb3\017\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\037\uffb3" +
    "\041\uffb3\042\uffb3\045\uffb3\046\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\075\uffb3\076\uffb3\077\uffb3\101\uffb3\001\002" +
    "\000\004\036\u010b\001\002\000\012\066\071\075\336\076" +
    "\063\100\061\001\002\000\004\056\u0111\001\002\000\004" +
    "\056\u0110\001\002\000\006\031\073\056\u010f\001\002\000" +
    "\070\004\uffc3\005\uffc3\007\uffc3\011\uffc3\013\uffc3\016\uffc3" +
    "\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\037\uffc3\041\uffc3\042\uffc3\045\uffc3\046\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\101\uffc3\001\002\000\070\004\uffb4\005\uffb4\007\uffb4" +
    "\011\uffb4\013\uffb4\016\uffb4\017\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\037\uffb4\041\uffb4" +
    "\042\uffb4\045\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\075\uffb4\076\uffb4\077\uffb4\101\uffb4\001\002\000\070" +
    "\004\uffbd\005\uffbd\007\uffbd\011\uffbd\013\uffbd\016\uffbd\017" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\037\uffbd\041\uffbd\042\uffbd\045\uffbd\046\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\075\uffbd\076\uffbd\077\uffbd" +
    "\101\uffbd\001\002\000\072\004\uffcb\005\uffcb\007\uffcb\011" +
    "\uffcb\012\uff9b\013\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\037\uffcb\041" +
    "\uffcb\042\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\075\uffcb\076\uffcb\077\uffcb\101\uffcb\001\002\000" +
    "\004\012\u0114\001\002\000\044\003\036\004\025\013\014" +
    "\017\045\022\026\023\034\024\046\025\021\026\031\027" +
    "\047\037\033\045\042\046\015\051\020\053\023\075\041" +
    "\101\044\001\002\000\044\004\025\005\u0116\013\014\017" +
    "\045\022\026\023\034\024\046\025\021\026\031\027\047" +
    "\037\033\045\042\046\015\051\020\053\023\075\041\101" +
    "\044\001\002\000\074\004\uffcc\005\uffcc\006\u0119\007\uffcc" +
    "\010\u0118\011\uffcc\013\uffcc\016\uffcc\017\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\037\uffcc" +
    "\041\uffcc\042\uffcc\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\075\uffcc\076\uffcc\077\uffcc\101\uffcc\001\002" +
    "\000\070\004\uffcd\005\uffcd\007\uffcd\011\uffcd\013\uffcd\016" +
    "\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\037\uffcd\041\uffcd\042\uffcd\045\uffcd\046" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\075\uffcd\076\uffcd" +
    "\077\uffcd\101\uffcd\001\002\000\020\003\u011e\030\155\066" +
    "\166\075\165\076\156\077\153\100\154\001\002\000\006" +
    "\003\u011a\012\u011b\001\002\000\070\004\uffc6\005\uffc6\007" +
    "\uffc6\011\uffc6\013\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\037\uffc6\041" +
    "\uffc6\042\uffc6\045\uffc6\046\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\075\uffc6\076\uffc6\077\uffc6\101\uffc6\001\002\000" +
    "\044\003\036\004\025\013\014\017\045\022\026\023\034" +
    "\024\046\025\021\026\031\027\047\037\033\045\042\046" +
    "\015\051\020\053\023\075\041\101\044\001\002\000\044" +
    "\004\025\007\u011d\013\014\017\045\022\026\023\034\024" +
    "\046\025\021\026\031\027\047\037\033\045\042\046\015" +
    "\051\020\053\023\075\041\101\044\001\002\000\070\004" +
    "\uffc7\005\uffc7\007\uffc7\011\uffc7\013\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\037\uffc7\041\uffc7\042\uffc7\045\uffc7\046\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\075\uffc7\076\uffc7\077\uffc7\101" +
    "\uffc7\001\002\000\072\004\uffc9\005\uffc9\007\uffc9\011\uffc9" +
    "\012\uff9b\013\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\037\uffc9\041\uffc9" +
    "\042\uffc9\045\uffc9\046\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\075\uffc9\076\uffc9\077\uffc9\101\uffc9\001\002\000\004" +
    "\012\u0120\001\002\000\044\003\036\004\025\013\014\017" +
    "\045\022\026\023\034\024\046\025\021\026\031\027\047" +
    "\037\033\045\042\046\015\051\020\053\023\075\041\101" +
    "\044\001\002\000\044\004\025\011\u0122\013\014\017\045" +
    "\022\026\023\034\024\046\025\021\026\031\027\047\037" +
    "\033\045\042\046\015\051\020\053\023\075\041\101\044" +
    "\001\002\000\074\004\uffc8\005\uffc8\006\u0119\007\uffc8\010" +
    "\u0118\011\uffc8\013\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\037\uffc8\041" +
    "\uffc8\042\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\075\uffc8\076\uffc8\077\uffc8\101\uffc8\001\002\000" +
    "\070\004\uffca\005\uffca\007\uffca\011\uffca\013\uffca\016\uffca" +
    "\017\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\037\uffca\041\uffca\042\uffca\045\uffca\046\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\075\uffca\076\uffca\077" +
    "\uffca\101\uffca\001\002\000\070\004\uff60\005\uff60\007\uff60" +
    "\011\uff60\013\uff60\016\uff60\017\uff60\021\uff60\022\uff60\023" +
    "\uff60\024\uff60\025\uff60\026\uff60\027\uff60\037\uff60\041\uff60" +
    "\042\uff60\045\uff60\046\uff60\050\uff60\051\uff60\052\uff60\053" +
    "\uff60\075\uff60\076\uff60\077\uff60\101\uff60\001\002\000\004" +
    "\056\u0126\001\002\000\070\004\uff61\005\uff61\007\uff61\011" +
    "\uff61\013\uff61\016\uff61\017\uff61\021\uff61\022\uff61\023\uff61" +
    "\024\uff61\025\uff61\026\uff61\027\uff61\037\uff61\041\uff61\042" +
    "\uff61\045\uff61\046\uff61\050\uff61\051\uff61\052\uff61\053\uff61" +
    "\075\uff61\076\uff61\077\uff61\101\uff61\001\002\000\070\004" +
    "\uffb7\005\uffb7\007\uffb7\011\uffb7\013\uffb7\016\uffb7\017\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\037\uffb7\041\uffb7\042\uffb7\045\uffb7\046\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\075\uffb7\076\uffb7\077\uffb7\101" +
    "\uffb7\001\002\000\006\036\u012a\066\u0129\001\002\000\004" +
    "\076\u012d\001\002\000\004\075\054\001\002\000\004\056" +
    "\u012c\001\002\000\070\004\uffb8\005\uffb8\007\uffb8\011\uffb8" +
    "\013\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\037\uffb8\041\uffb8\042\uffb8" +
    "\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\075" +
    "\uffb8\076\uffb8\077\uffb8\101\uffb8\001\002\000\004\067\u012e" +
    "\001\002\000\004\036\u012f\001\002\000\004\072\u0130\001" +
    "\002\000\010\076\311\077\312\100\310\001\002\000\004" +
    "\073\u0132\001\002\000\004\056\u0133\001\002\000\070\004" +
    "\uffbf\005\uffbf\007\uffbf\011\uffbf\013\uffbf\016\uffbf\017\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\037\uffbf\041\uffbf\042\uffbf\045\uffbf\046\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\075\uffbf\076\uffbf\077\uffbf\101" +
    "\uffbf\001\002\000\004\056\u013b\001\002\000\004\056\u013a" +
    "\001\002\000\070\004\uffe5\005\uffe5\007\uffe5\011\uffe5\013" +
    "\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\037\uffe5\041\uffe5\042\uffe5\045" +
    "\uffe5\046\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\075\uffe5" +
    "\076\uffe5\077\uffe5\101\uffe5\001\002\000\006\031\073\056" +
    "\u0139\001\002\000\070\004\uffe9\005\uffe9\007\uffe9\011\uffe9" +
    "\013\uffe9\016\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\037\uffe9\041\uffe9\042\uffe9" +
    "\045\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\075" +
    "\uffe9\076\uffe9\077\uffe9\101\uffe9\001\002\000\070\004\uffe8" +
    "\005\uffe8\007\uffe8\011\uffe8\013\uffe8\016\uffe8\017\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\037\uffe8\041\uffe8\042\uffe8\045\uffe8\046\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\075\uffe8\076\uffe8\077\uffe8\101\uffe8" +
    "\001\002\000\070\004\uffe6\005\uffe6\007\uffe6\011\uffe6\013" +
    "\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\037\uffe6\041\uffe6\042\uffe6\045" +
    "\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\075\uffe6" +
    "\076\uffe6\077\uffe6\101\uffe6\001\002\000\070\004\uffe7\005" +
    "\uffe7\007\uffe7\011\uffe7\013\uffe7\016\uffe7\017\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\037" +
    "\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\075\uffe7\076\uffe7\077\uffe7\101\uffe7\001" +
    "\002\000\026\002\ufffd\003\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\044\ufffd\047\ufffd\001\002\000" +
    "\006\075\u0140\077\u0142\001\002\000\070\004\uff77\005\uff77" +
    "\007\uff77\011\uff77\013\uff77\016\uff77\017\uff77\021\uff77\022" +
    "\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\037\uff77" +
    "\041\uff77\042\uff77\045\uff77\046\uff77\050\uff77\051\uff77\052" +
    "\uff77\053\uff77\075\uff77\076\uff77\077\uff77\101\uff77\001\002" +
    "\000\006\060\245\067\uff72\001\002\000\014\003\060\060" +
    "\245\066\057\067\uff72\070\125\001\002\000\006\060\245" +
    "\067\uff72\001\002\000\006\060\245\067\uff72\001\002\000" +
    "\004\067\u0144\001\002\000\004\056\u0145\001\002\000\070" +
    "\004\uff7f\005\uff7f\007\uff7f\011\uff7f\013\uff7f\016\uff7f\017" +
    "\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f" +
    "\027\uff7f\037\uff7f\041\uff7f\042\uff7f\045\uff7f\046\uff7f\050" +
    "\uff7f\051\uff7f\052\uff7f\053\uff7f\075\uff7f\076\uff7f\077\uff7f" +
    "\101\uff7f\001\002\000\004\067\u0147\001\002\000\004\056" +
    "\u0148\001\002\000\070\004\uff7b\005\uff7b\007\uff7b\011\uff7b" +
    "\013\uff7b\016\uff7b\017\uff7b\021\uff7b\022\uff7b\023\uff7b\024" +
    "\uff7b\025\uff7b\026\uff7b\027\uff7b\037\uff7b\041\uff7b\042\uff7b" +
    "\045\uff7b\046\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\075" +
    "\uff7b\076\uff7b\077\uff7b\101\uff7b\001\002\000\004\067\u014a" +
    "\001\002\000\004\056\u014b\001\002\000\070\004\uff78\005" +
    "\uff78\007\uff78\011\uff78\013\uff78\016\uff78\017\uff78\021\uff78" +
    "\022\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78\037" +
    "\uff78\041\uff78\042\uff78\045\uff78\046\uff78\050\uff78\051\uff78" +
    "\052\uff78\053\uff78\075\uff78\076\uff78\077\uff78\101\uff78\001" +
    "\002\000\004\067\u014d\001\002\000\004\056\u014e\001\002" +
    "\000\070\004\uff7d\005\uff7d\007\uff7d\011\uff7d\013\uff7d\016" +
    "\uff7d\017\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\037\uff7d\041\uff7d\042\uff7d\045\uff7d\046" +
    "\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\075\uff7d\076\uff7d" +
    "\077\uff7d\101\uff7d\001\002\000\004\075\u0151\001\002\000" +
    "\070\004\uffd0\005\uffd0\007\uffd0\011\uffd0\013\uffd0\016\uffd0" +
    "\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\037\uffd0\041\uffd0\042\uffd0\045\uffd0\046\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\075\uffd0\076\uffd0\077" +
    "\uffd0\101\uffd0\001\002\000\004\036\u0152\001\002\000\004" +
    "\076\u0153\001\002\000\004\014\u0154\001\002\000\004\015" +
    "\u0155\001\002\000\004\066\u0156\001\002\000\012\075\165" +
    "\076\156\077\153\100\154\001\002\000\004\067\u0158\001" +
    "\002\000\044\003\036\004\025\013\014\017\045\022\026" +
    "\023\034\024\046\025\021\026\031\027\047\037\033\045" +
    "\042\046\015\051\020\053\023\075\041\101\044\001\002" +
    "\000\044\004\025\013\014\016\u015a\017\045\022\026\023" +
    "\034\024\046\025\021\026\031\027\047\037\033\045\042" +
    "\046\015\051\020\053\023\075\041\101\044\001\002\000" +
    "\070\004\uffd1\005\uffd1\007\uffd1\011\uffd1\013\uffd1\016\uffd1" +
    "\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\037\uffd1\041\uffd1\042\uffd1\045\uffd1\046\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\053\uffd1\075\uffd1\076\uffd1\077" +
    "\uffd1\101\uffd1\001\002\000\010\003\uffed\044\uffed\075\uffed" +
    "\001\002\000\010\003\ufff0\044\ufff0\075\ufff0\001\002\000" +
    "\026\002\ufff8\003\uffea\022\u015c\023\u0161\024\u015e\025\u015b" +
    "\026\u0160\027\u0164\044\uffea\047\u015f\001\002\000\010\003" +
    "\uffee\044\uffee\075\uffee\001\002\000\006\003\u0175\044\u0174" +
    "\001\002\000\010\003\uffec\044\uffec\075\uffec\001\002\000" +
    "\010\003\uffef\044\uffef\075\uffef\001\002\000\006\003\u0168" +
    "\044\u0167\001\002\000\004\002\uffff\001\002\000\010\003" +
    "\uffeb\044\uffeb\075\uffeb\001\002\000\026\002\ufffa\003\uffea" +
    "\022\u015c\023\u0161\024\u015e\025\u015b\026\u0160\027\u0164\044" +
    "\uffea\047\u015f\001\002\000\004\002\ufffb\001\002\000\004" +
    "\075\u0169\001\002\000\026\002\ufff4\003\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\044\ufff4\047\ufff4" +
    "\001\002\000\004\066\u016a\001\002\000\022\003\uffea\022" +
    "\u015c\023\u0161\024\u015e\025\u015b\026\u0160\027\u0164\075\uffea" +
    "\001\002\000\004\067\u0171\001\002\000\006\003\u016d\075" +
    "\u016e\001\002\000\004\067\ufff1\001\002\000\006\060\u016f" +
    "\067\ufff2\001\002\000\022\003\uffea\022\u015c\023\u0161\024" +
    "\u015e\025\u015b\026\u0160\027\u0164\075\uffea\001\002\000\004" +
    "\067\ufff3\001\002\000\044\003\036\004\025\013\014\017" +
    "\045\022\026\023\034\024\046\025\021\026\031\027\047" +
    "\037\033\045\042\046\015\051\020\053\023\075\041\101" +
    "\044\001\002\000\044\004\025\013\014\017\045\022\026" +
    "\023\034\024\046\025\021\026\031\027\047\037\033\045" +
    "\042\046\015\050\u0173\051\020\053\023\075\041\101\044" +
    "\001\002\000\026\002\ufff5\003\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\044\ufff5\047\ufff5\001\002" +
    "\000\004\075\u0176\001\002\000\026\002\ufff6\003\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\044\ufff6" +
    "\047\ufff6\001\002\000\004\066\u0177\001\002\000\004\067" +
    "\u0178\001\002\000\044\003\036\004\025\013\014\017\045" +
    "\022\026\023\034\024\046\025\021\026\031\027\047\037" +
    "\033\045\042\046\015\051\020\053\023\075\041\101\044" +
    "\001\002\000\044\004\025\013\014\017\045\022\026\023" +
    "\034\024\046\025\021\026\031\027\047\037\033\045\042" +
    "\046\015\050\u017a\051\020\053\023\075\041\101\044\001" +
    "\002\000\026\002\ufff7\003\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\044\ufff7\047\ufff7\001\002\000" +
    "\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\010\002\006\023\007\033\004\001\001\000" +
    "\002\001\001\000\012\024\u0162\034\u0164\035\u015c\036\u0161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\016\010\012\011\031" +
    "\013\026\014\042\015\015\016\027\020\036\026\021\037" +
    "\023\043\037\045\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\210\011\031\013\026\014\221\015\211\016\215\020\217" +
    "\026\212\037\213\043\220\045\216\001\001\000\012\025" +
    "\u0136\040\u0137\046\067\047\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\u0112\005\162\006\161\007\160\044\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\163\005" +
    "\162\006\161\007\160\044\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\065\042" +
    "\063\046\067\047\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\071\046\067\047\064\001" +
    "\001\000\002\001\001\000\006\046\074\047\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\100\001" +
    "\001\000\004\047\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\065\042\102\046\067\047\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\111" +
    "\046\067\047\064\001\001\000\010\025\110\046\067\047" +
    "\064\001\001\000\010\025\107\046\067\047\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\116\044\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\170\006\167\044" +
    "\157\001\001\000\006\005\170\044\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\177\001\001\000\004\006\167\001\001\000\002\001" +
    "\001\000\004\044\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\207\010\012\011\031\013\026\014\042" +
    "\015\015\016\027\020\036\026\021\037\023\043\037\045" +
    "\034\001\001\000\030\010\210\011\031\013\026\014\221" +
    "\015\211\016\215\020\217\026\212\037\213\043\220\045" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\240\044\242\001\001\000\002\001" +
    "\001\000\004\027\266\001\001\000\004\027\263\001\001" +
    "\000\004\027\260\001\001\000\004\027\245\001\001\000" +
    "\006\041\250\044\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\257\001\001\000" +
    "\004\027\256\001\001\000\004\027\255\001\001\000\004" +
    "\027\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\021\300\025" +
    "\301\041\275\046\067\047\064\001\001\000\002\001\001" +
    "\000\004\012\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\313\001\001\000" +
    "\002\001\001\000\004\012\315\001\001\000\002\001\001" +
    "\000\004\012\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\334" +
    "\041\332\044\333\046\067\047\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\346\031\350\032\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\354\010\012\011" +
    "\031\013\026\014\042\015\015\016\027\020\036\026\021" +
    "\037\023\043\037\045\034\001\001\000\032\010\210\011" +
    "\031\013\026\014\221\015\211\016\215\020\217\026\212" +
    "\032\355\037\213\043\220\045\216\001\001\000\002\001" +
    "\001\000\032\003\357\010\012\011\031\013\026\014\042" +
    "\015\015\016\027\020\036\026\021\037\023\043\037\045" +
    "\034\001\001\000\032\010\210\011\031\013\026\014\221" +
    "\015\211\016\215\020\217\026\212\031\360\037\213\043" +
    "\220\045\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\363\010\012\011\031\013\026\014\042\015" +
    "\015\016\027\020\036\026\021\037\023\043\037\045\034" +
    "\001\001\000\030\010\210\011\031\013\026\014\221\015" +
    "\211\016\215\020\217\026\212\037\213\043\220\045\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\025\u010d\041\u010b\044\u010c" +
    "\046\067\047\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\u0114\010\012\011\031\013\026\014\042\015\015" +
    "\016\027\020\036\026\021\037\023\043\037\045\034\001" +
    "\001\000\030\010\210\011\031\013\026\014\221\015\211" +
    "\016\215\020\217\026\212\037\213\043\220\045\216\001" +
    "\001\000\004\017\u0116\001\001\000\002\001\001\000\014" +
    "\004\u011e\005\162\006\161\007\160\044\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\u011b\010\012" +
    "\011\031\013\026\014\042\015\015\016\027\020\036\026" +
    "\021\037\023\043\037\045\034\001\001\000\030\010\210" +
    "\011\031\013\026\014\221\015\211\016\215\020\217\026" +
    "\212\037\213\043\220\045\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\u0120\010" +
    "\012\011\031\013\026\014\042\015\015\016\027\020\036" +
    "\026\021\037\023\043\037\045\034\001\001\000\030\010" +
    "\210\011\031\013\026\014\221\015\211\016\215\020\217" +
    "\026\212\037\213\043\220\045\216\001\001\000\004\017" +
    "\u0122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\u013e\044\u0140" +
    "\001\001\000\002\001\001\000\004\027\u014b\001\001\000" +
    "\004\027\u0148\001\001\000\004\027\u0145\001\001\000\004" +
    "\027\u0142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u0156\044\157\001\001\000\002\001" +
    "\001\000\032\003\u0158\010\012\011\031\013\026\014\042" +
    "\015\015\016\027\020\036\026\021\037\023\043\037\045" +
    "\034\001\001\000\030\010\210\011\031\013\026\014\221" +
    "\015\211\016\215\020\217\026\212\037\213\043\220\045" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\u017a\034\u0164\035\u015c\036\u0161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\u0165\034\u0164\035\u015c\036\u0161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\u016a\036\u016b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\u016f\036\u016b\001\001\000\002" +
    "\001\001\000\032\003\u0171\010\012\011\031\013\026\014" +
    "\042\015\015\016\027\020\036\026\021\037\023\043\037" +
    "\045\034\001\001\000\030\010\210\011\031\013\026\014" +
    "\221\015\211\016\215\020\217\026\212\037\213\043\220" +
    "\045\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\u0178\010\012\011\031\013\026\014\042\015\015\016" +
    "\027\020\036\026\021\037\023\043\037\045\034\001\001" +
    "\000\030\010\210\011\031\013\026\014\221\015\211\016" +
    "\215\020\217\026\212\037\213\043\220\045\216\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Node raiz;
    public static Symbol found;
    public static LinkedList<String> Errores = new LinkedList<String>();
    private static Symbol s;

    public Symbol getS(){
        return this.s;
} 
    public void report_error(String errorBody, Object info){
        found = (Symbol)info;
	Sintax.Errores.add("Se encontro Report_Error: " + found.value+"\n");
        Sintax.Errores.add(" Descripcion:\n");
    }

    public void report_fatal_error(String errorBody, Object info){ 
        //error = "Errores no Recuperables \n";
        found = (Symbol)info;
	Sintax.Errores.add("Se encontro Error_Fatal: " + found.value);
	Sintax.Errores.add(" Descripcion:\n");
    }
    public static void Main_Error(){
        switch(found.sym){
            case sym.Begin: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: main \n");
                break;
            case sym.Main:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Main \n");
            default:
                Sintax.Errores.add("Error en el Main \n");
                break;
        }
        Sintax.Errores.add("[Main Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Void_Error(){
        switch(found.sym){
            case sym.Call: 
                Sintax.Errores.add("Error en el llamado de la funcion.\n");
                break;
            case sym.Begin:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: call \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: begin \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.EndCall: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end call o ) \n");
                break;
        }
       Sintax.Errores.add("[Void_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Entrada_Error(){
        switch(found.sym){
            case sym.put:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: put \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: put \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o put ) \n");
                break;
        }
       Sintax.Errores.add("[Entrada_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Parametro_Error(){
        switch(found.sym){
            case sym.Begin:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Tipoe int/string/float/bool \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: begin \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Parametro \n");
                break;
            case sym.EndCall: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end call o ) \n");
                break;
        }
       Sintax.Errores.add("[Parametro_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void TReturn_Error(){
        switch(found.sym){
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: return \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Return_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
        public static void For_Error(){
        switch(found.sym){
            case sym.TypeInt: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: for \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( o TypeInt\n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.ENTERO: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.OP_RELA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.IN: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO \n");
                break;
            case sym.Range: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: in \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: range \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndFor: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end for o ) \n");
                break;
        }
        Sintax.Errores.add("[For_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+ "\n");
    }
   public static void While_Error(){
        switch(found.sym){
            case sym.While:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: while \n");
                break;
            case sym.Repeat:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndWhile: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end while \n");
                break;
        }
        Sintax.Errores.add("[While_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Normal_If_Error(){
        switch(found.sym){
            case sym.IF:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: If \n");
                break;
            case sym.Then:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            case sym.ElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end if \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: if else o then \n");
                break;
        }
        Sintax.Errores.add("[If_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void IfElse_Error(){
        switch(found.sym){
            case sym.Then:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION or Else \n");
                break;
            case sym.EndElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            case sym.ElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end else if or else if \n");
                break;
            case sym.EndElse: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: if else or end else \n");
                break;
        }
        Sintax.Errores.add("[IfElse_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Switch(){
        switch(found.sym){
            case sym.Case: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: switch \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: switch \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.Of: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            case sym.Default: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Casos \n");
                break;
            case sym.DosPuntos: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: default \n");
                break;
            case sym.EndCase: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end case o of \n");
                break;
        }
        Sintax.Errores.add("[Switch_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Else_Error(){
        Sintax.Errores.add("Error en el Else \n");
        Sintax.Errores.add("[IfElse_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Print_Error(){
        switch(found.sym){
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Print \n");
                break;
            case sym.CADENA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Print_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void Asignar_Error(){
        switch(found.sym){
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Asignacion_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
 
    public static void Declarar(){
        switch(found.sym){
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: type int/string/float/bool \n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Declaracion_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void TipoA_Error(){
        switch(found.sym){
            case sym.CADENA: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.TBool: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.CurlyIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.CurlyDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: LISTA \n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Type_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Parametro(){
            switch(found.sym){
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: TYPE \n");
                break;
            case sym.Coma: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: parametro\n");
                break;
            }
             Sintax.Errores.add("[Type_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // COMENTAR ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTAR",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq IDENTIFICADOR SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq IDENTIFICADOR SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) e1)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq DECIMAL SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("DECIMAL", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq DECIMAL SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("DECIMAL", ((String) e1)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq CADENA SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("CADENA", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq CADENA SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("CADENA", ((String) e1)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq ENTERO SquareBDer SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("ENTERO", ((String) e1)));
    showCoor.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SHOWCOORDENADAS ::= IDENTIFICADOR SquareBIzq ENTERO SquareBDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(new Node("ENTERO", ((String) e)));
    RESULT=showCoor;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHOWCOORDENADAS",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ENTRADA ::= put error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("ENTRADA"); Sintax.Entrada_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENTRADA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ENTRADA ::= put IDENTIFICADOR PuntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node entrada= new Node("Entrada");
    entrada.addNode(new Node("PUT", "put"));
    entrada.addNode(new Node("IDENTIFICADOR", ((String) i)));
    RESULT=entrada;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENTRADA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ARGUMENTO ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node argumento= new Node("argumento");    
    argumento.addNode(oa);
    RESULT=argumento;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ARGUMENTO ::= OPERACION_ARITMETICA Coma ARGUMENTO 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node argumento= new Node("argumento");    
    argumento.addNode(oa);
    argumento.addNode(a);
    RESULT=argumento;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LLAMAR_METODO ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("FUNCION PARAMETRO");Sintax.Parametro_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ParDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    RESULT=cmetodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    RESULT=cmetodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer OP_MULT OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    cmetodo.addNode(new Node("OP_MULT", ((String) o)));
    cmetodo.addNode(oa);
    RESULT=cmetodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer OP_DIV OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    cmetodo.addNode(new Node("OP_DIV", ((String) o)));
    cmetodo.addNode(oa);
    RESULT=cmetodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LLAMAR_METODO ::= IDENTIFICADOR ParIzq ARGUMENTO ParDer OP_SUMA OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    cmetodo.addNode(new Node("OP_SUMA", ((String) o)));
    cmetodo.addNode(oa);
    RESULT=cmetodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CASOE ::= ENTERO DosPuntos SENTENCIA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node casoe= new Node("caseE");
    casoe.addNode(new Node("entero", ((String) e)));    
    casoe.addNode(s);    
    RESULT=casoe;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CASOE ::= ENTERO DosPuntos SENTENCIA CASOE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node casoe= new Node("caseE");
    casoe.addNode(new Node("entero", ((String) e)));    
    casoe.addNode(s);    
    casoe.addNode(c1);
    RESULT=casoe;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CASOC ::= CADENA DosPuntos SENTENCIA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node casoc= new Node("caseC");
    casoc.addNode(new Node("cadena", ((String) c)));    
    casoc.addNode(s);    
    RESULT=casoc;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOC",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CASOC ::= CADENA DosPuntos SENTENCIA CASOC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node casoc= new Node("caseC");
    casoc.addNode(new Node("cadena", ((String) c)));    
    casoc.addNode(s);    
    casoc.addNode(c1);
    RESULT=casoc;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOC",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CASOS ::= CASOE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node caso= new Node("case");
    caso.addNode(c);
    RESULT=caso;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASOS ::= CASOC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node caso= new Node("case");
    caso.addNode(c);
    RESULT=caso;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SWITCH_ESTRUCTURA ::= Case error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("SWITCH");Sintax.Switch(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ESTRUCTURA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SWITCH_ESTRUCTURA ::= Case ParIzq IDENTIFICADOR ParDer Of CASOS Default DosPuntos SENTENCIA EndCase 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node Switch= new Node("switch");
    Switch.addNode(new Node("Case", "case"));
    Switch.addNode(new Node("IDENTIFICADOR", ((String) i)));
    Switch.addNode(c);
    Switch.addNode(new Node("Default", "default"));
    Switch.addNode(s);
    RESULT=Switch;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ESTRUCTURA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONCAT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONCAT ::= Coma IDENTIFICADOR CONCAT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(new Node("IDENTIFICADOR", ((String) c)));
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONCAT ::= Coma SHOWCOORDENADAS CONCAT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(c);
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONCAT ::= Coma LLAMAR_METODO CONCAT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(c);
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONCAT ::= Coma CADENA CONCAT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node concatenacion= new Node("concatenacion");
    concatenacion.addNode(new Node("cadena", ((String) c)));
    concatenacion.addNode(c1); 
    RESULT=concatenacion;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IMPRIMIR ::= Imp error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("PRINTLN");Sintax.Print_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IMPRIMIR ::= Imp ParIzq IDENTIFICADOR CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("Imp", "Print"));
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IMPRIMIR ::= ImpLn ParIzq IDENTIFICADOR CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("ImpLn", "Println"));
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IMPRIMIR ::= ImpLn error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("PRINTLN");Sintax.Print_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IMPRIMIR ::= Imp ParIzq SHOWCOORDENADAS CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("Imp", "Print"));
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IMPRIMIR ::= ImpLn ParIzq SHOWCOORDENADAS CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("ImpLn", "Println"));
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // IMPRIMIR ::= Imp ParIzq LLAMAR_METODO CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("Imp", "Print"));
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // IMPRIMIR ::= ImpLn ParIzq LLAMAR_METODO CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("ImpLn", "Println"));
    imprimir.addNode(c);
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IMPRIMIR ::= Imp ParIzq CADENA CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("Imp", "Print"));
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IMPRIMIR ::= ImpLn ParIzq CADENA CONCAT ParDer PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("ImpLn", "Println"));
    imprimir.addNode(new Node("cadena", ((String) c)));
    imprimir.addNode(c1); 
    RESULT=imprimir;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FX ::= ParIzq OPERACION_ARITMETICA ParDer 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node FX= new Node("DECIMAL");
        FX.addNode(o);
        RESULT=FX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FX ::= DECIMAL 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node FX= new Node("DECIMAL");
        FX.addNode(new Node("DECIMAL", ((String) o)));
        RESULT=FX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FX ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node FX= new Node("IDENTIFICADOR");
        FX.addNode(new Node("IDENTIFICADOR", ((String) o)));
        RESULT=FX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FX ::= ENTERO 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node FX= new Node("ENTERO");
        FX.addNode(new Node("ENTERO", ((String) o)));
        RESULT=FX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TX ::= FX 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node TX= new Node("operacionA");
        TX.addNode(f);
        RESULT=TX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TX ::= TX OP_DIV FX 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node TX= new Node("operacionA");
        TX.addNode(t);
        TX.addNode(new Node("OP_DIV", ((String) o)));
        TX.addNode(f);
        RESULT=TX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TX ::= TX OP_MULT FX 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node TX= new Node("operacionA");
        TX.addNode(t);
        TX.addNode(new Node("OP_MULT", ((String) o)));
        TX.addNode(f);
        RESULT=TX;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACION_ARITMETICA ::= TX 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node operacionA= new Node("operacionA");
        operacionA.addNode(oa);
        RESULT=operacionA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA OP_SUMA TX 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node operacionA= new Node("operacionA");
    operacionA.addNode(oa);
    operacionA.addNode(new Node("OP_SUMA", ((String) s)));
    operacionA.addNode(t); 
    RESULT=operacionA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PROP1 ::= SHOWCOORDENADAS OP_RELA IDENTIFICADOR 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(i1);
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i2))); 
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PROP1 ::= SHOWCOORDENADAS OP_RELA SHOWCOORDENADAS 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(i1);
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(i2); 
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PROP1 ::= IDENTIFICADOR OP_RELA SHOWCOORDENADAS 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(i2); 
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PROP1 ::= DECIMAL OP_RELA IDENTIFICADOR 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("DECIMAL", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i2))); 
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PROP1 ::= DECIMAL OP_RELA DECIMAL 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("DECIMAL", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("DECIMAL", ((String) i2))); 
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PROP1 ::= IDENTIFICADOR OP_RELA DECIMAL 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("DECIMAL", ((String) i2))); 
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PROP1 ::= CADENA OP_RELA IDENTIFICADOR 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("CADENA", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i2))); 
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PROP1 ::= CADENA OP_RELA CADENA 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("CADENA", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("CADENA", ((String) i2))); 
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PROP1 ::= IDENTIFICADOR OP_RELA CADENA 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("CADENA", ((String) i2))); 
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PROP1 ::= ENTERO OP_RELA IDENTIFICADOR 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("ENTERO", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("ENTERO", ((String) i2))); 
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PROP1 ::= ENTERO OP_RELA ENTERO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("ENTERO", ((String) e1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("ENTERO", ((String) e2)));
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PROP1 ::= IDENTIFICADOR OP_RELA ENTERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("ENTERO", ((String) e)));
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PROP1 ::= IDENTIFICADOR OP_RELA IDENTIFICADOR 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop1= new Node("PROPOSICION");
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i1)));
    prop1.addNode(new Node("OP_RELA", ((String) t)));
    prop1.addNode(new Node("IDENTIFICADOR", ((String) i2)));
    RESULT=prop1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP1",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PROP2 ::= ParIzq PROP1 ParDer 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node prop2= new Node("PROPOSICION");
    prop2.addNode(p);
    RESULT=prop2;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP2",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PROP2 ::= ParIzq PROP1 ParDer OP_LOGIC PROP2 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop2= new Node("PROPOSICION");
    prop2.addNode(p);
    prop2.addNode(new Node("OP_LOGIC", ((String) t)));
    prop2.addNode(p1);
    RESULT=prop2;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP2",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PROP3 ::= ParIzq PROP2 ParDer 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node prop3= new Node("PROPOSICION");
    prop3.addNode(p);
    RESULT=prop3;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP3",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PROP3 ::= ParIzq PROP2 ParDer OP_LOGIC PROP3 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop3= new Node("PROPOSICION3");
    prop3.addNode(p);
    prop3.addNode(new Node("OP_LOGIC", ((String) t)));
    prop3.addNode(p1);
    RESULT=prop3;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROP3",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PROPOSICION ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PROPOSICION ::= TBool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop= new Node("PROPOSICION");
    prop.addNode(new Node("BOOL", ((String) t)));
    RESULT=prop;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PROPOSICION ::= PROP3 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PROPOSICION ::= PROP2 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PROPOSICION ::= PROP1 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROPOSICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTA ::= DECIMAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("DECIMAL", ((String) t)));
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LISTA ::= CADENA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("CADENA", ((String) t)));
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTA ::= ENTERO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("ENTERO", ((String) t)));
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTA ::= DECIMAL Coma LISTA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("decimal", ((String) t)));
    LISTA.addNode(new Node("LISTA", ((String) l)));
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA ::= CADENA Coma LISTA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("cadena", ((String) t)));
    LISTA.addNode(new Node("LISTA", ((String) l)));
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LISTA ::= ENTERO Coma LISTA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node LISTA= new Node("LISTA");
    LISTA.addNode(new Node("ENTERO", ((String) t)));
    LISTA.addNode(new Node("LISTA", ((String) l)));
    RESULT=LISTA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPOA ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("TYPE");Sintax.TipoA_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPOA ::= LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(l);
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPOA ::= OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(oa);
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPOA ::= CurlyIzq LISTA CurlyDer CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(new Node("CADENA", ((String) t1)));
    tipo.addNode(new Node("CADENA", ((String) t2)));
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPOA ::= CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(new Node("LISTA", ((String) t)));
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPOA ::= TBool PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
      Node tipo= new Node("TIPO");
        tipo.addNode(new Node("BOOL", ((String) t)));
        RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPOA ::= CADENA PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node tipo= new Node("TIPO");
    tipo.addNode(new Node("CADENA", ((String) t)));
    RESULT=tipo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASIGNAR ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("ASIGNAR");Sintax.Asignar_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGNAR ::= IDENTIFICADOR OP_ASIG TIPOA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node Asignar= new Node("asignar");
    Asignar.addNode(new Node("IDENTIFICADOR", ((String) i)));
    Asignar.addNode(new Node("OP_ASIG","=>"));
    Asignar.addNode(c);
    RESULT=Asignar;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARAR_ASIGNAR ::= TypeFloat error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("DECLARAR");Sintax.Declarar(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARAR_ASIGNAR ::= TypeFloat IDENTIFICADOR OP_ASIG SHOWCOORDENADAS PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARAR_ASIGNAR ::= TypeString error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("DECLARAR");Sintax.Declarar(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARAR_ASIGNAR ::= TypeString IDENTIFICADOR OP_ASIG SHOWCOORDENADAS PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(i);
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARAR_ASIGNAR ::= TypeInt error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("DECLARAR");Sintax.Declarar(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARAR_ASIGNAR ::= TypeInt IDENTIFICADOR OP_ASIG SHOWCOORDENADAS PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARAR_ASIGNAR ::= TypeMatriz error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("DECLARAR");Sintax.Declarar(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARAR_ASIGNAR ::= TypeMatriz IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARAR_ASIGNAR ::= TypeList error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("DECLARAR");Sintax.Declarar(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARAR_ASIGNAR ::= TypeList IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARAR_ASIGNAR ::= TypeBool error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("DECLARAR");Sintax.Declarar(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARAR_ASIGNAR ::= TypeBool IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARAR_ASIGNAR ::= TypeFloat IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARAR_ASIGNAR ::= TypeString IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARAR_ASIGNAR ::= TypeInt IDENTIFICADOR OP_ASIG LLAMAR_METODO PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARAR_ASIGNAR ::= TypeMatriz IDENTIFICADOR ParIzq ENTERO ParDer ParIzq ENTERO ParDer OP_ASIG CurlyIzq LISTA CurlyDer CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object l2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("ENTERO",((String) e1)));
    declararA.addNode(new Node("ENTERO",((String) e2)));
    declararA.addNode(new Node("LISTA", ((String) l1)));
    declararA.addNode(new Node("LISTA", ((String) l2)));
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARAR_ASIGNAR ::= TypeList IDENTIFICADOR ParIzq ENTERO ParDer OP_ASIG CurlyIzq LISTA CurlyDer PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("ENTERO",((String) e)));
    declararA.addNode(new Node("LISTA", ((String) l)));
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARAR_ASIGNAR ::= TypeBool IDENTIFICADOR OP_ASIG TBool PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("BOOl", ((String) c)));
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARAR_ASIGNAR ::= TypeFloat IDENTIFICADOR OP_ASIG OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(oa);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARAR_ASIGNAR ::= TypeString IDENTIFICADOR OP_ASIG CADENA PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("CADENA", ((String) c)));
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARAR_ASIGNAR ::= TypeInt IDENTIFICADOR OP_ASIG OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Type", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(oa);
    RESULT=declararA;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_DEC_ASIG ::= ASIGNAR 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node da= new Node("asig");
        da.addNode(d);
        RESULT=da;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DEC_ASIG",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_DEC_ASIG ::= DECLARAR_ASIGNAR 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node da= new Node("decl asig");
    da.addNode(d);
    RESULT=da;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DEC_ASIG",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IFELSE ::= Else error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("Else");Sintax.Else_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFELSE ::= Else Then SENTENCIA EndElse 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node eif = new Node("else");
    eif.addNode(new Node("Else", "else"));
    eif.addNode(s);
    eif.addNode(new Node("EndElse", "end else"));
    RESULT=eif;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IFELSE ::= ElseIf PROPOSICION Then SENTENCIA EndElseIf 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node eif = new Node("else If");
    eif.addNode(new Node("ElseIf", "else if"));
    eif.addNode(p);
    eif.addNode(s);
    eif.addNode(new Node("EndElseIf", "end else if"));
    RESULT=eif;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IFELSE ::= ElseIf error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("IFELSE");Sintax.IfElse_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IFELSE ::= ElseIf PROPOSICION Then SENTENCIA EndElseIf IFELSE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ie = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node eif = new Node("else If");
    eif.addNode(new Node("ElseIf", "else if"));
    eif.addNode(p);
    eif.addNode(s);
    eif.addNode(new Node("EndElseIf", "end else if"));
    eif.addNode(ie);
    RESULT=eif;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF_ESTRUCTURA ::= IF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("IF NORMAL");Sintax.Normal_If_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ESTRUCTURA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF_ESTRUCTURA ::= IF PROPOSICION Then SENTENCIA EndIf 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node IF = new Node("If");
    IF.addNode(new Node("If", "if"));
    IF.addNode(p);
    IF.addNode(s);
    IF.addNode(new Node("EndIf", "end if"));
    RESULT=IF;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ESTRUCTURA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF_ESTRUCTURA ::= IF PROPOSICION Then SENTENCIA EndIf IFELSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node IF = new Node("If");
    IF.addNode(new Node("If", "if"));
    IF.addNode(t);
    IF.addNode(r);
    IF.addNode(new Node("EndIf", "end if"));
    IF.addNode(i);
    RESULT=IF;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ESTRUCTURA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LOOP_WHILE ::= While error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("WHILE");Sintax.While_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOOP_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LOOP_WHILE ::= While PROPOSICION Repeat SENTENCIA EndWhile 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node While = new Node("While");
    While.addNode(new Node("While", "while"));
    While.addNode(p);
    While.addNode(s);
    While.addNode(new Node("EndWhile", "end while"));
    RESULT=While;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOOP_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LOOP_FOR ::= For error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("FOR");Sintax.For_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOOP_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LOOP_FOR ::= For TypeInt IDENTIFICADOR OP_ASIG ENTERO IN Range ParIzq PROP1 ParDer SENTENCIA EndFor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node For = new Node("FOR");
        For.addNode(new Node("For", "for"));
        For.addNode(new Node("TypeInt", "int"));
        For.addNode(new Node("IDENTIFICADOR", ((String) i)));
        For.addNode(new Node("OP_ASIG", "=>"));
        For.addNode(new Node("ENTERO",((String) e) ));
        For.addNode(new Node("Range", "range"));
        For.addNode(p);
        For.addNode(s);
        For.addNode(new Node("EndFor", "end for"));
        RESULT=For;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOOP_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= COMENTAR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SENTENCIA COMENTAR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= ENTRADA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SENTENCIA ENTRADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= SWITCH_ESTRUCTURA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= SENTENCIA SWITCH_ESTRUCTURA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= SENTENCIA IMPRIMIR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SENTENCIA_DEC_ASIG 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA SENTENCIA_DEC_ASIG 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= IF_ESTRUCTURA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA IF_ESTRUCTURA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= LOOP_WHILE 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA LOOP_WHILE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= LOOP_FOR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA LOOP_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= RETORNO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA RETORNO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node sentencia = new Node("sentencia");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TRETORNO ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("RETURN");Sintax.TReturn_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TRETORNO ::= TBool PuntoComa 
            {
              Object RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node tretorno = new Node("retorno");
        tretorno.addNode(new Node("TBool", ((String) tb)));
        tretorno.addNode(new Node("PuntoComa", ";"));
        RESULT=tretorno;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TRETORNO ::= CADENA PuntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node tretorno = new Node("retorno");
        tretorno.addNode(new Node("CADENA", ((String) c)));
        tretorno.addNode(new Node("PuntoComa", ";"));
        RESULT=tretorno;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TRETORNO ::= OPERACION_ARITMETICA PuntoComa 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node tretorno = new Node("retorno");
        tretorno.addNode(op);
        tretorno.addNode(new Node("PuntoComa", ";"));
        RESULT=tretorno;
       
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRETORNO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RETORNO ::= RETURN TRETORNO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node retorno = new Node("Return");
        retorno.addNode(new Node("RETURN", "return"));
        retorno.addNode(t);
        RESULT=retorno;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE ::= TypeBool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE ::= TypeMatriz 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE ::= TypeList 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= TypeString 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= TypeFloat 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= TypeInt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node type = new Node("tipo");
        type.addNode(new Node("TYPE", ((String) t))); 
        RESULT=type;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETRO ::= TYPE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("FUNCION PARAMETRO");Sintax.Parametro(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETRO ::= TYPE IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node parametro = new Node("parametro"); 
    parametro.addNode(t);
    parametro.addNode(new Node("IDENTIFICADOR", ((String) i)));
    RESULT=parametro;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETRO ::= TYPE IDENTIFICADOR Coma PARAMETRO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    Node parametro = new Node("parametro"); 
    parametro.addNode(t);
    parametro.addNode(new Node("IDENTIFICADOR", ((String) i)));
    parametro.addNode(new Node("Coma", ","));
    parametro.addNode(pa);
    RESULT=parametro;
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // METODO_T ::= TYPE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("FUNCION PARAMETRO");Sintax.Parametro_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_T",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // METODO_T ::= TYPE Begin IDENTIFICADOR ParIzq PARAMETRO ParDer SENTENCIA EndCall 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Node metodoT = new Node("metodo parametro");
    metodoT.addNode(t);
    metodoT.addNode(new Node("Begin", "begin"));
    metodoT.addNode(new Node("IDENTIFICADOR", ((String) i)));
    metodoT.addNode(p);
    metodoT.addNode(s);
    metodoT.addNode(new Node("EndCall", "end call"));
    RESULT=metodoT;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_T",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // M_VOID ::= Call error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("FUNCION VOID"); Sintax.Void_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_VOID",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // M_VOID ::= Call Begin IDENTIFICADOR ParIzq ParDer SENTENCIA EndCall 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Node Void = new Node("void");
        Void.addNode(new Node("Call", "call"));
        Void.addNode(new Node("Begin", "begin"));
        Void.addNode(new Node("IDENTIFICADOR", ((String) i)));
        Void.addNode(se);
        Void.addNode(new Node("EndCall", "end call"));
        RESULT=Void;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_VOID",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODOS ::= METODO_T 
            {
              Object RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node metodo = new Node("metodos"); 
        metodo.addNode(mt);
        RESULT=metodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODOS ::= METODO_T METODOS 
            {
              Object RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node metodo = new Node("metodos"); 
        metodo.addNode(mt);
        metodo.addNode(m);
        RESULT=metodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODOS ::= M_VOID 
            {
              Object RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mv = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node metodo = new Node("metodos"); 
        metodo.addNode(mv);
        RESULT=metodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODOS ::= M_VOID METODOS 
            {
              Object RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object mv = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node metodo = new Node("metodos"); 
        metodo.addNode(mv);
        metodo.addNode(m);
        RESULT=metodo;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // M_MAIN ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("MAIN");Sintax.Main_Error(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // M_MAIN ::= Main Begin SENTENCIA EndMain 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		  
        Node main = new Node("Main");
        main.addNode(new Node("Main", "main"));
        main.addNode(new Node("Begin", "begin"));
        main.addNode(s);
        main.addNode(new Node("EndMain", "end main"));
        RESULT=main;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE ::= M_MAIN 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Node clase = new Node("main");
                            clase.addNode(m);
                            RESULT=clase;
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= M_MAIN METODOS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Node clase = new Node("main");
                            clase.addNode(m);
                            clase.addNode(me);
                            RESULT=clase;
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CLASE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Sintax.raiz=(Node)c; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

