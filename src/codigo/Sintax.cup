package codigo;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

parser code
{:
    public static Node raiz;
    public static Symbol found;
    public static LinkedList<String> Errores = new LinkedList<String>();
    private static Symbol s;

    public Symbol getS(){
        return this.s;
} 
    public void report_error(String errorBody, Object info){
        found = (Symbol)info;
	Sintax.Errores.add("Se encontro Report_Error: " + found.value+"\n");
        Sintax.Errores.add(" Descripcion:\n");
    }

    public void report_fatal_error(String errorBody, Object info){ 
        //error = "Errores no Recuperables \n";
        found = (Symbol)info;
	Sintax.Errores.add("Se encontro Error_Fatal: " + found.value);
	Sintax.Errores.add(" Descripcion:\n");
    }
    public static void Main_Error(){
        switch(found.sym){
            case sym.Begin: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: main \n");
                break;
            case sym.Main:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Main \n");
            default:
                Sintax.Errores.add("Error en el Main \n");
                break;
        }
        Sintax.Errores.add("[Main Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Void_Error(){
        switch(found.sym){
            case sym.Call: 
                Sintax.Errores.add("Error en el llamado de la funcion.\n");
                break;
            case sym.Begin:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: call \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: begin \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.EndCall: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end call o ) \n");
                break;
        }
       Sintax.Errores.add("[Void_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void Matriz_Error(){
        switch(found.sym){
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.ParIzq:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador o ) \n");
                break;
            case sym.ENTERO:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO \n");
                break;
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            case sym.CurlyIzq:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => o }\n");
                break;
            case sym.CurlyDer:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Formato Lista ej.1,2,3\n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: } \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
       Sintax.Errores.add("[AsigLista_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void TypeList_Error(){
        switch(found.sym){
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.ParIzq:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ENTERO:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO \n");
                break;
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            case sym.CurlyIzq:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.CurlyDer:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Formato Lista ej.1,2,3\n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: } \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
       Sintax.Errores.add("[AsigLista_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void TypeBool_Error(){
        switch(found.sym){
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.TBool:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: true/false \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o =>\n");
                break;
        }
       Sintax.Errores.add("[AsigBool_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void TypeFloat_Error(){
        switch(found.sym){
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.CADENA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Operacion aritmetica o metodo \n");
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o =>\n");
                break;
        }
       Sintax.Errores.add("[AsigFloat_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void TypeString_Error(){
        switch(found.sym){
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.CADENA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Operacion aritmetica o metodo \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o =>\n");
                break;
        }
       Sintax.Errores.add("[AsigString_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void TypeInt_Error(){
        switch(found.sym){
            case sym.OP_ASIG:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Type \n");
                break;
            case sym.CADENA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Operacion aritmetica o metodo \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o => \n");
                break;
        }
       Sintax.Errores.add("[AsigInt_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Entrada_Error(){
        switch(found.sym){
            case sym.put:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: put \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: put \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o put ) \n");
                break;
        }
       Sintax.Errores.add("[Entrada_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Parametro_Error(){
        switch(found.sym){
            case sym.Begin:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Tipoe int/string/float/bool \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: begin \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Parametro \n");
                break;
            case sym.EndCall: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end call o ) \n");
                break;
        }
       Sintax.Errores.add("[Parametro_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void TReturn_Error(){
        switch(found.sym){
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: return \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Return_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
        public static void For_Error(){
        switch(found.sym){
            case sym.TypeInt: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: for \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( o TypeInt\n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.ENTERO: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.OP_RELA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.IN: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO \n");
                break;
            case sym.Range: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: in \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: range \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndFor: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end for o ) \n");
                break;
        }
        Sintax.Errores.add("[For_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+ "\n");
    }
   public static void While_Error(){
        switch(found.sym){
            case sym.While:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: while \n");
                break;
            case sym.Repeat:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndWhile: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end while o repeat \n");
                break;
        }
        Sintax.Errores.add("[While_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Normal_If_Error(){
        switch(found.sym){
            case sym.IF:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: If \n");
                break;
            case sym.Then:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION \n");
                break;
            case sym.EndIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            case sym.ElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end if \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: if else o then \n");
                break;
        }
        Sintax.Errores.add("[If_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void IfElse_Error(){
        switch(found.sym){
            case sym.Then:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: PROPOSICION or Else \n");
                break;
            case sym.EndElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            case sym.ElseIf: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end else if or else if \n");
                break;
            case sym.EndElse: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: sentencia \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: if else or end else \n");
                break;
        }
        Sintax.Errores.add("[IfElse_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Switch(){
        switch(found.sym){
            case sym.Case: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: switch \n");
                break;
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: switch \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            case sym.Of: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            case sym.Default: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Casos \n");
                break;
            case sym.DosPuntos: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: default \n");
                break;
            case sym.EndCase: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: SENTENCIA \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: end case o of \n");
                break;
        }
        Sintax.Errores.add("[Switch_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

        public static void Concat_Error(){
        switch(found.sym){
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: , \n");
                break;
            case sym.CADENA: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: , \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: error concatenacion \n");
                break;
        }
        Sintax.Errores.add("[Concatenacion_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Else_Error(){
        Sintax.Errores.add("Error en el Else \n");
        Sintax.Errores.add("[IfElse_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Print_Error(){
        switch(found.sym){
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Print \n");
                break;
            case sym.CADENA:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.IDENTIFICADOR:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.PuntoComa: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Print_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Lista_Error(){
        switch(found.sym){
            case sym.Coma: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO/DECIMAL/IDENTIFICADOR/CADENA \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador o ; \n");
                break;
        }
        Sintax.Errores.add("[Matriz_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void Coordenadas_Error(){
        switch(found.sym){
            case sym.SquareBIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.ENTERO: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: [ \n");
                break;
            case sym.SquareBDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ENTERO \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ] o ; \n");
                break;
        }
        Sintax.Errores.add("[Matriz_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

     public static void Prop2_Error(){
        switch(found.sym){
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: proposicion \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: </>/>=/<=/= \n");
                break;
            case sym.OP_LOGIC: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Sintax.Errores.add("[Proposicion2_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
     public static void Prop1_Error(){
        switch(found.sym){
            case sym.ParIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ( \n");
                break;
            case sym.ParDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: proposicion \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: </>/>=/<=/= \n");
                break;
            case sym.DECIMAL: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: </>/>=/<=/= \n");
                break;
            case sym.CADENA: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: </>/>=/<=/= \n");
                break;
            case sym.ENTERO: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: </>/>=/<=/= \n");
                break;
            case sym.OP_LOGIC: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ) \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Sintax.Errores.add("[Proposicion1_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
   public static void Asignar_Error(){
        switch(found.sym){
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: identificador \n");
                break;
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: Tipo \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Asignacion_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
 
    public static void Declarar(){
        switch(found.sym){
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: type int/string/float/bool \n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Declaracion_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void TipoA_Error(){
        switch(found.sym){
            case sym.CADENA: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.TBool: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.CurlyIzq: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: => \n");
                break;
            case sym.CurlyDer: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: LISTA \n");
                break;
            case sym.OP_ASIG: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: ; \n");
                break;
        }
        Sintax.Errores.add("[Type_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void Parametro(){
            switch(found.sym){
            case sym.IDENTIFICADOR: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: TYPE \n");
                break;
            case sym.Coma: 
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: IDENTIFICADOR \n");
                break;
            default:
                Sintax.Errores.add("[Error_Sintaxis] se esperaba: parametro\n");
                break;
            }
             Sintax.Errores.add("[Type_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
:};

terminal  IF,
        EndIf,
        Else,
        EndElse,
        ElseIf,
        EndElseIf,
        Then,
        For,
        IN,
        Range,
        EndFor,
        While,
        Repeat,
        EndWhile,
        TypeInt,
        TypeFloat,
        TypeString,
        TypeList,
        TypeMatriz,
        TypeBool,
        TBool,
        OP_SUMA,
        OP_MULT,
        OP_DIV,
        OP_LOGIC,
        OP_RELA,
        OP_RELA2,
        OP_ASIG,    
        Case,
        Of,
        Default,
        EndCase,    
        Main,
        Begin,
        ImpLn,
        Imp,
        Call,
        EndCall,
        RETURN,
        EndMain,
        put,
        get,    
        DosPuntos,
        PuntoComa,
        Punto,
        Coma,
        GuionBajo,
        Ampersand,
        Apostrofe,
        Arroba,
        Numeral,
        ParIzq,
        ParDer,
        SquareBIzq,
        SquareBDer,
        CurlyIzq,
        CurlyDer,
        special_characters,     
        IDENTIFICADOR,
        ENTERO,
        CADENA,
        DECIMAL,
        COMENTARIO,
        ERROR;

non terminal INICIO,SENTENCIA,PROPOSICION,PROP1,PROP2,PROP3, SENTENCIA_DEC_ASIG, DECLARAR_ASIGNAR,LISTA,LISTA1,LISTA2,LISTA3,
             ASIGNAR,LOOP_FOR,LOOP_WHILE,IF_ESTRUCTURA,IFELSE,SWITCH_ESTRUCTURA,TIPOA,PARAMETRO,CLASE,METODOS,
             OPERACION_ARITMETICA,IMPRIMIR,CONCAT,CASOS,CASOC,CASOE,M_MAIN,M_VOID,METODO_T,TYPE,RETORNO,
             TRETORNO,LLAMAR_METODO,ARGUMENTO,ENTRADA,SHOWCOORDENADAS,COMENTAR,TX,FX,TY,FY,VALOR; 

start with INICIO;

INICIO ::= 
   CLASE:c {:  Sintax.raiz=(Node)c; :}

;
CLASE::=
     M_MAIN:m METODOS:me {: Node clase = new Node("main");
                            clase.addNode(m);
                            clase.addNode(me);
                            RESULT=clase;
     :} 
    |M_MAIN:m {: 
                Node clase = new Node("main");
                            clase.addNode(m);
                            RESULT=clase;
         :}
;
M_MAIN ::=
    Main Begin
        SENTENCIA:s
    EndMain
    {:  
        Node main = new Node("Main");
        main.addNode(s);
        RESULT=main;
:}| error:e {: System.out.println("MAIN");Sintax.Main_Error(); :}
;
METODOS::=
    M_VOID:mv METODOS:m
    {:  Node metodo = new Node("metodos"); 
        metodo.addNode(mv);
        metodo.addNode(m);
        RESULT=metodo;
    :}
|M_VOID:mv 
    {:
        Node metodo = new Node("metodos"); 
        metodo.addNode(mv);
        RESULT=metodo;
    :}
|METODO_T:mt METODOS:m
{:
        Node metodo = new Node("metodos"); 
        metodo.addNode(mt);
        metodo.addNode(m);
        RESULT=metodo;
:}
|METODO_T:mt
{:
        Node metodo = new Node("metodos"); 
        metodo.addNode(mt);
        RESULT=metodo;
:}
;

M_VOID::=
    Call Begin IDENTIFICADOR:i ParIzq PARAMETRO:p ParDer
        SENTENCIA:se
    EndCall
{: 
        Node Void = new Node("void");
        Void.addNode(new Node("IDENTIFICADOR", ((String) i)));
        Void.addNode(p);
        Void.addNode(se);
        RESULT=Void;
:}| Call error:e {: System.out.println("FUNCION VOID"); Sintax.Void_Error(); :}
;
METODO_T::=
    TYPE:t Begin IDENTIFICADOR:i ParIzq PARAMETRO:p ParDer
        SENTENCIA:s
    EndCall
    {:
    Node metodoT = new Node("metodo parametro");
    metodoT.addNode(t);
    metodoT.addNode(new Node("IDENTIFICADOR", ((String) i)));
    metodoT.addNode(p);
    metodoT.addNode(s);
    RESULT=metodoT;
:}| TYPE error:e {: System.out.println("FUNCION PARAMETRO");Sintax.Parametro_Error(); :}
;
PARAMETRO::=
    TYPE:t IDENTIFICADOR:i Coma PARAMETRO:pa{:
    Node parametro = new Node("parametro"); 
    parametro.addNode(t);
    parametro.addNode(new Node("IDENTIFICADOR", ((String) i)));
    parametro.addNode(pa);
    RESULT=parametro;
   :}
     |TYPE:t IDENTIFICADOR:i
    {:
    Node parametro = new Node("parametro"); 
    parametro.addNode(t);
    parametro.addNode(new Node("IDENTIFICADOR", ((String) i)));
    RESULT=parametro;
     :}| TYPE error:e {: System.out.println("FUNCION PARAMETRO");Sintax.Parametro(); :}
     |
;

TYPE::=
TypeInt:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("Int", ((String) t))); 
        RESULT=type;
        :}
|TypeFloat:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("Float", ((String) t))); 
        RESULT=type;
        :}
|TypeString:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("String", ((String) t))); 
        RESULT=type;
        :}
|TypeList:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("List", ((String) t))); 
        RESULT=type;
        :}
|TypeMatriz:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("Matriz", ((String) t))); 
        RESULT=type;
        :}
|TypeBool:t {: 
        Node type = new Node("tipo");
        type.addNode(new Node("Bool", ((String) t))); 
        RESULT=type;
        :}
|
;

RETORNO::=
    RETURN TRETORNO:t {: 
        Node retorno = new Node("Return");
        retorno.addNode(t);
        RESULT=retorno;
        :}    
;
TRETORNO::=
     OPERACION_ARITMETICA:op PuntoComa
     {:
        Node tretorno = new Node("retorno");
        tretorno.addNode(op);
        RESULT=tretorno;
       :}| error:e {: System.out.println("RETURN");Sintax.TReturn_Error(); :}
;
SENTENCIA::=
SENTENCIA:s RETORNO:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|RETORNO:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s LOOP_FOR:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|LOOP_FOR:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s LOOP_WHILE:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|LOOP_WHILE:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s IF_ESTRUCTURA:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|IF_ESTRUCTURA:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s SENTENCIA_DEC_ASIG:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA_DEC_ASIG:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s IMPRIMIR:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|IMPRIMIR:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s SWITCH_ESTRUCTURA:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SWITCH_ESTRUCTURA:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s ENTRADA:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|ENTRADA:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|SENTENCIA:s COMENTAR:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(s);
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|COMENTAR:r{:
        Node sentencia = new Node("sentencias");
        sentencia.addNode(r);
        RESULT=sentencia;
:}
|error
;

LOOP_FOR::=
    For TypeInt IDENTIFICADOR:i OP_ASIG VALOR:e IN Range ParIzq PROP1:p ParDer SENTENCIA:s EndFor
{:
        Node For = new Node("FOR");
        For.addNode(new Node("Int","Int"));
        For.addNode(new Node("IDENTIFICADOR", ((String) i)));
        For.addNode(new Node("OP_ASIG", "=>"));
        For.addNode(e);
        For.addNode(p);
        For.addNode(s);
        RESULT=For;
:}| For error:e {: System.out.println("FOR");Sintax.For_Error(); :}
;

LOOP_WHILE::=
    While PROPOSICION:p Repeat 
    SENTENCIA:s
    EndWhile
    {:
    Node While = new Node("While");
    While.addNode(p);
    While.addNode(s);
    RESULT=While;
    :}| While error:e {: System.out.println("WHILE");Sintax.While_Error(); :}
;
IF_ESTRUCTURA::=
    IF PROPOSICION:t Then SENTENCIA:r EndIf IFELSE:i
    {:
    Node IF = new Node("If");
    IF.addNode(t);
    IF.addNode(r);
    IF.addNode(i);
    RESULT=IF;
    :}
    |IF PROPOSICION:p Then SENTENCIA:s EndIf
    {:
    Node IF = new Node("If");
    IF.addNode(p);
    IF.addNode(s);
    RESULT=IF;
    :}|  IF error:e {: System.out.println("IF NORMAL");Sintax.Normal_If_Error(); :}
;

IFELSE::=
ElseIf PROPOSICION:p Then SENTENCIA:s EndElseIf IFELSE:ie
{:
    Node eif = new Node("else If");
    eif.addNode(p);
    eif.addNode(s);
    eif.addNode(ie);
    RESULT=eif;
:}|  ElseIf error:e {: System.out.println("IFELSE");Sintax.IfElse_Error(); :}
|ElseIf PROPOSICION:p Then SENTENCIA:s EndElseIf
{:
    Node eif = new Node("else If");
    eif.addNode(p);
    eif.addNode(s);
    RESULT=eif;
:}

|Else Then SENTENCIA:s EndElse
{:
    Node eif = new Node("else");
    eif.addNode(s);
    RESULT=eif;
:}|  Else error:e {: System.out.println("Else");Sintax.Else_Error(); :}
    
;

SENTENCIA_DEC_ASIG::=
    DECLARAR_ASIGNAR:d
    {:
    Node da= new Node("decl asig");
    da.addNode(d);
    RESULT=da;
    :}
    |ASIGNAR:d
    {:
        Node da= new Node("asig");
        da.addNode(d);
        RESULT=da;
    :}
;

DECLARAR_ASIGNAR::=
    TypeInt:t IDENTIFICADOR:i OP_ASIG OPERACION_ARITMETICA:oa PuntoComa
    {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Int", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(oa);
    RESULT=declararA;
    :}|TypeInt error: e {:System.out.println("TYPEINT"); Sintax.TypeInt_Error();:}
    |
    TypeString:t IDENTIFICADOR:i OP_ASIG VALOR:c PuntoComa
        {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("String", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}|TypeString error: e {:System.out.println("TYPESTRING"); Sintax.TypeString_Error();:}
    
|
    TypeFloat:t IDENTIFICADOR:i OP_ASIG OPERACION_ARITMETICA:oa PuntoComa
        {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Float", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(oa);
    RESULT=declararA;
    :}|TypeFloat error: e {:System.out.println("TYPEFLOAT"); Sintax.TypeFloat_Error();:}
    |
    TypeBool:t IDENTIFICADOR:i OP_ASIG VALOR:c PuntoComa
            {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Bool", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}|TypeBool error: e {:System.out.println("TYPEBOOL"); Sintax.TypeBool_Error();:}
    |
    TypeList:t IDENTIFICADOR:i ParIzq ENTERO:e ParDer OP_ASIG CurlyIzq LISTA:l CurlyDer PuntoComa
    {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("List", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("Int",((String) e)));
    declararA.addNode(l);
    RESULT=declararA;
    :}|TypeList error: e {:System.out.println("TYPELIST"); Sintax.TypeList_Error();:}
    |
    TypeMatriz:t IDENTIFICADOR:i ParIzq ENTERO:e1 ParDer ParIzq ENTERO:e2 ParDer OP_ASIG CurlyIzq LISTA:l1 CurlyDer CurlyIzq LISTA:l2 CurlyDer PuntoComa
    {: 
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Matriz", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(new Node("Int",((String) e1)));
    declararA.addNode(new Node("Int",((String) e2)));
    declararA.addNode(l1);
    declararA.addNode(l2);
    RESULT=declararA;
    :}|TypeMatriz error: e {:System.out.println("TYPEMATRIZ"); Sintax.Matriz_Error();:}
|      
    TypeInt:t IDENTIFICADOR:i OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Int", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
    |
    TypeString:t IDENTIFICADOR:i OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("String", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
|
    TypeFloat:t IDENTIFICADOR:i OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Float", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
    |
    TypeBool:t IDENTIFICADOR:i OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Bool", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
|
    TypeList:t IDENTIFICADOR:i  OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("List", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
|
    TypeMatriz:t IDENTIFICADOR:i OP_ASIG LLAMAR_METODO:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Matriz", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
|

    TypeInt:t IDENTIFICADOR:i OP_ASIG SHOWCOORDENADAS:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Int", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
|
    TypeString:t IDENTIFICADOR:i OP_ASIG SHOWCOORDENADAS:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("String", ((String) t)));
    declararA.addNode(i);
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
|
    TypeFloat:t IDENTIFICADOR:i OP_ASIG SHOWCOORDENADAS:c PuntoComa
    {:
    Node declararA= new Node("asig");
    declararA.addNode(new Node("Float", ((String) t)));
    declararA.addNode(new Node("IDENTIFICADOR", ((String) i)));
    declararA.addNode(new Node("OP_ASIG","=>"));
    declararA.addNode(c);
    RESULT=declararA;
    :}
;


ASIGNAR::=
    SHOWCOORDENADAS:i OP_ASIG TIPOA:c
    {:
    Node Asignar= new Node("asignar");
    Asignar.addNode(i);
    Asignar.addNode(new Node("OP_ASIG","=>"));
    Asignar.addNode(c);
    RESULT=Asignar;
    :}
    |
    IDENTIFICADOR:i OP_ASIG TIPOA:c
    {:
    Node Asignar= new Node("asignar");
    Asignar.addNode(new Node("IDENTIFICADOR", ((String) i)));
    Asignar.addNode(new Node("OP_ASIG","=>"));
    Asignar.addNode(c);
    RESULT=Asignar;
    :}| IDENTIFICADOR error:e {: System.out.println("ASIGNAR");Sintax.Asignar_Error(); :}
;
TIPOA::=
     CurlyIzq LISTA:t CurlyDer PuntoComa
     {:
    Node tipo= new Node("TIPO");
    tipo.addNode(t);
    RESULT=tipo;
    :}
    |
     CurlyIzq LISTA:t1 CurlyDer CurlyIzq LISTA:t2 CurlyDer PuntoComa
     {:
    Node tipo= new Node("TIPO");
    tipo.addNode(t1);
    tipo.addNode(t2);
    RESULT=tipo;
    :}
     |
     OPERACION_ARITMETICA:oa PuntoComa
     {:
    Node tipo= new Node("TIPO");
    tipo.addNode(oa);
    RESULT=tipo;
    :}
|
     LLAMAR_METODO:l PuntoComa
     {:
    Node tipo= new Node("TIPO");
    tipo.addNode(l);
    RESULT=tipo;
    :}
    |
     SHOWCOORDENADAS:l PuntoComa
     {:
    Node tipo= new Node("TIPO");
    tipo.addNode(l);
    RESULT=tipo;
    :}
    |  error:e {: System.out.println("TYPE");Sintax.TipoA_Error(); :}
;

LISTA::=
LISTA1:l
{:
Node lista=new Node("LISTA");
lista.addNode(l);
RESULT=lista;
:}
|
LISTA2:l
{:
Node lista=new Node("LISTA");
lista.addNode(l);
RESULT=lista;
:}
|
LISTA3:l
{:
Node lista=new Node("LISTA");
lista.addNode(l);
RESULT=lista;
:}
;

LISTA1::=
   ENTERO:t Coma LISTA1:l
    {:
    Node LISTA1= new Node("LISTAE");
    LISTA1.addNode(new Node("Int", ((String) t)));
    LISTA1.addNode(l);
    RESULT=LISTA1;
    :}
|
   ENTERO:t
    {:
    Node LISTA1= new Node("LISTAE");
    LISTA1.addNode(new Node("Int", ((String) t)));
    RESULT=LISTA1;
    :}
;
LISTA2::=
   CADENA:t Coma LISTA2:l
{:
    Node LISTA2= new Node("LISTAC");
    LISTA2.addNode(new Node("String", ((String) t)));
    LISTA2.addNode(l);
    RESULT=LISTA2;
:}
|  CADENA:t
    {:
    Node LISTA2= new Node("LISTAC");
    LISTA2.addNode(new Node("String", ((String) t)));
    RESULT=LISTA2;
    :}
;
LISTA3::=
DECIMAL:t Coma LISTA3:l
    {:
    Node LISTA3= new Node("LISTAD");
    LISTA3.addNode(new Node("Float", ((String) t)));
    LISTA3.addNode(l);
    RESULT=LISTA3;
    :}

|
   DECIMAL:t
{:
    Node LISTA3= new Node("LISTAD");
    LISTA3.addNode(new Node("Float", ((String) t)));
    RESULT=LISTA3;
    :}
;

PROPOSICION::=
    PROP1:p
    {:
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    :}
    |
    PROP2:p
    {:
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    :}
    |
    PROP3:p
    {:
    Node prop= new Node("PROPOSICION");
    prop.addNode(p);
    RESULT=prop;
    :}
    |
    TBool:t
{:
    Node prop= new Node("PROPOSICION");
    prop.addNode(new Node("Bool", ((String) t)));
    RESULT=prop;
    :}|error
;

PROP3::=
   ParIzq PROP2:p ParDer OP_LOGIC:t PROP3:p1
    {:
    Node prop3= new Node("PROPOSICION3");
    prop3.addNode(p);
    prop3.addNode(new Node("OP_LOGIC", ((String) t)));
    prop3.addNode(p1);
    RESULT=prop3;
    :}
    |
   ParIzq PROP2:p ParDer
    {:
    Node prop3= new Node("PROPOSICION3");
    prop3.addNode(p);
    RESULT=prop3;
    :}| ParIzq error:e {:System.out.println("Prop3"); Sintax.Prop2_Error(); :}
;
PROP2::=
    ParIzq PROP1:p ParDer OP_LOGIC:t PROP2:p1
        {:
    Node prop2= new Node("PROPOSICION2");
    prop2.addNode(p);
    prop2.addNode(new Node("OP_LOGIC", ((String) t)));
    prop2.addNode(p1);
    RESULT=prop2;
    :}
    |
    ParIzq PROP1:p ParDer
    {:
    Node prop2= new Node("PROPOSICION2");
    prop2.addNode(p);
    RESULT=prop2;
    :}

;

PROP1::=
    FY:f1 OP_RELA:o FY:f2
    {:
    Node prop= new Node("PROPOSICION1");
    prop.addNode(f1);
    prop.addNode(new Node("OP_RELA", ((String) o)));
    prop.addNode(f2);
    RESULT=prop;
    :}
    |
    TY:f1 
    {:
    Node prop= new Node("PROPOSICION1");
    prop.addNode(f1);
    RESULT=prop;
    :}
;

TY::=
    FY:f1 OP_RELA2:o FY:f2
    {:
    Node ty= new Node("PROPOSICION1-2");
    ty.addNode(f1);
    ty.addNode(new Node("OP_RELA", ((String) o)));
    ty.addNode(f2);
    RESULT=ty;
    :}
;

FY::=
	IDENTIFICADOR:o
         {:
        Node fy= new Node("IDENTIFICADOR", ((String) o));
        RESULT=fy;
         :}
        |
	ENTERO:o
         {:
        Node fy= new Node("Int", ((String) o));
        RESULT=fy;
         :}
        |
	CADENA:o
         {:
        Node fy= new Node("String", ((String) o));
        RESULT=fy;
         :}
         |
	DECIMAL:o
         {:
        Node fy= new Node("Float", ((String) o));
        RESULT=fy;
         :}
;

OPERACION_ARITMETICA::=
   OPERACION_ARITMETICA:oa OP_SUMA:s TX:t
    {:
    Node operacionA= new Node("operacionA");
    operacionA.addNode(oa);
    operacionA.addNode(new Node("OP_SUMA", ((String) s)));
    operacionA.addNode(t); 
    RESULT=operacionA;
    :}
    |TX:oa {:
        Node operacionA= new Node("op");
        operacionA.addNode(oa);
        RESULT=operacionA;
    :}
;
TX::=
    TX:t OP_MULT:o FX:f
    {:
        Node TX= new Node("operacionA-M");
        TX.addNode(t);
        TX.addNode(new Node("OP_MULT", ((String) o)));
        TX.addNode(f);
        RESULT=TX;
    :}
    |TX:t OP_DIV:o FX:f
    {:
        Node TX= new Node("operacionA-D");
        TX.addNode(t);
        TX.addNode(new Node("OP_DIV", ((String) o)));
        TX.addNode(f);
        RESULT=TX;
    :}
    |FX:f
    {:
        Node TX= new Node("Valor");
        TX.addNode(f);
        RESULT=TX;
    :}
;
FX::=
    VALOR:o
    {:
        Node FX= new Node("Valoro");
        FX.addNode(o);
        RESULT=FX;
    :}
    |ParIzq OPERACION_ARITMETICA:o ParDer
         {:
        Node FX= new Node("operacionA");
        FX.addNode(o);
        RESULT=FX;
    :}
;


IMPRIMIR::=
    ImpLn ParIzq CADENA:c ParDer PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("String", ((String) c)));
    RESULT=imprimir;
    :}
    |
    Imp ParIzq CADENA:c ParDer  PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("String", ((String) c)));
    RESULT=imprimir;
    :}
    |    
    ImpLn ParIzq SHOWCOORDENADAS:c ParDer PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(c); 
    RESULT=imprimir;
    :}
    |
    Imp ParIzq SHOWCOORDENADAS:c ParDer  PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(c);
    RESULT=imprimir;
    :}| ImpLn error:e {: System.out.println("PRINTLN");Sintax.Print_Error(); :}
    |

    ImpLn ParIzq IDENTIFICADOR:c ParDer PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("IDENTIFICADOR", ((String) c)));
    RESULT=imprimir;
    :}
    |
    Imp ParIzq IDENTIFICADOR:c ParDer  PuntoComa
    {:
    Node imprimir= new Node("IMPRIMIR");
    imprimir.addNode(new Node("IDENTIFICADOR", ((String) c))); 
    RESULT=imprimir;
    :}| Imp error:e {: System.out.println("PRINTLN");Sintax.Print_Error(); :}
;

SWITCH_ESTRUCTURA::=
    Case ParIzq IDENTIFICADOR:i ParDer Of
        CASOS:c
        Default DosPuntos SENTENCIA:s
    EndCase
    {:
    Node Switch= new Node("switch");
    Switch.addNode(new Node("IDENTIFICADOR", ((String) i)));
    Switch.addNode(c);
    Switch.addNode(s);
    RESULT=Switch;
    :}|  Case error:e {: System.out.println("SWITCH");Sintax.Switch(); :}
;
CASOS::=
    CASOC:c
    {:
    Node caso= new Node("case");
    caso.addNode(c);
    RESULT=caso;
    :}
    |CASOE:c
    {:
    Node caso= new Node("case");
    caso.addNode(c);
    RESULT=caso;
    :}
    
;
CASOC::=
    CADENA:c DosPuntos SENTENCIA:s CASOC:c1
    {:
    Node casoc= new Node("caseC");
    casoc.addNode(new Node("cadena", ((String) c)));    
    casoc.addNode(s);    
    casoc.addNode(c1);
    RESULT=casoc;
    :}
    |
    CADENA:c DosPuntos SENTENCIA:s
    {:
    Node casoc= new Node("caseC");
    casoc.addNode(new Node("cadena", ((String) c)));    
    casoc.addNode(s);    
    RESULT=casoc;
    :}
;
CASOE::=
    ENTERO:e DosPuntos SENTENCIA:s CASOE:c1
    {:
    Node casoe= new Node("caseE");
    casoe.addNode(new Node("entero", ((String) e)));    
    casoe.addNode(s);    
    casoe.addNode(c1);
    RESULT=casoe;
    :}
    |
    ENTERO:e DosPuntos SENTENCIA:s
    {:
    Node casoe= new Node("caseE");
    casoe.addNode(new Node("entero", ((String) e)));    
    casoe.addNode(s);    
    RESULT=casoe;
    :}
;
LLAMAR_METODO::=
    IDENTIFICADOR:i ParIzq ARGUMENTO:a ParDer 
    {:
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    cmetodo.addNode(a);    
    RESULT=cmetodo;
    :}
    |
    IDENTIFICADOR:i ParIzq ParDer
    {:
    Node cmetodo= new Node("llamar metodo");
    cmetodo.addNode(new Node("INDENTIFICADOR", ((String) i)));    
    RESULT=cmetodo;
    :}|  IDENTIFICADOR error:e {: System.out.println("FUNCION PARAMETRO");Sintax.Parametro_Error(); :}
;
ARGUMENTO::=
    OPERACION_ARITMETICA:oa Coma ARGUMENTO:a
    {:
    Node argumento= new Node("argumento");    
    argumento.addNode(oa);
    argumento.addNode(a);
    RESULT=argumento;
    :}
    |
    OPERACION_ARITMETICA:oa
    {:
    Node argumento= new Node("argumento");    
    argumento.addNode(oa);
    RESULT=argumento;
    :}
;

ENTRADA::=
    put IDENTIFICADOR:i PuntoComa
    {:
    Node entrada= new Node("Entrada");
    entrada.addNode(new Node("IDENTIFICADOR", ((String) i)));
    RESULT=entrada;
    :}|put error:e {: System.out.println("ENTRADA"); Sintax.Entrada_Error(); :}
;
SHOWCOORDENADAS::=
    IDENTIFICADOR:i SquareBIzq VALOR:e SquareBDer
    {:
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(e);
    RESULT=showCoor;
    :}
    |
    IDENTIFICADOR:i SquareBIzq VALOR:e1 SquareBDer SquareBIzq VALOR:e2 SquareBDer
    {:
    Node showCoor= new Node("Coordenadas");
    showCoor.addNode(new Node("IDENTIFICADOR", ((String) i)));
    showCoor.addNode(e1);
    showCoor.addNode(e2);
    RESULT=showCoor;
    :}|error:e {: System.out.println("MATRIZ"); Sintax.Coordenadas_Error(); :}
;
COMENTAR::=
    COMENTARIO
;

VALOR::=
    ENTERO:e
    {:
        Node valoro=new Node("Int", ((String) e) );
        RESULT=valoro;
    :}
    |CADENA:e
    {:
        Node valoro=new Node("String", ((String) e) );
        RESULT=valoro;
    :}
    |DECIMAL:e
    {:
        Node valoro=new Node("Float", ((String) e) );
        RESULT=valoro;
    :}
    |IDENTIFICADOR:e
    {:
        Node valoro=new Node("IDENTIFICADOR", ((String) e) );
        RESULT=valoro;
    :}
    |TBool:e
    {:
        Node valoro=new Node("Bool", ((String) e) );
        RESULT=valoro;
    :}
;