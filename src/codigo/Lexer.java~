/* The following code was generated by JFlex 1.4.3 on 09-21-20 10:29 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09-21-20 10:29 PM from the specification file
 * <tt>C:/Users/Franklin Garcia/Desktop/Proyecto Compi/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\10\2\0\1\10\22\0\1\20\1\50\1\6\1\65"+
    "\1\0\1\74\1\62\1\63\1\66\1\67\1\45\1\43\1\61\1\1"+
    "\1\3\1\11\1\5\11\7\1\57\1\60\1\50\1\51\1\50\1\74"+
    "\1\64\1\46\1\41\3\4\1\34\1\56\1\4\1\33\2\4\1\36"+
    "\1\37\1\4\1\47\1\55\2\4\1\35\7\4\1\70\1\0\1\71"+
    "\1\12\1\2\1\0\1\27\1\54\1\52\1\17\1\15\1\14\1\30"+
    "\1\24\1\13\2\4\1\21\1\53\1\16\1\25\1\32\1\4\1\26"+
    "\1\22\1\23\1\42\1\4\1\31\2\4\1\40\1\72\1\44\1\73"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\2\1\6"+
    "\1\7\1\10\1\11\16\5\1\2\1\12\2\5\2\13"+
    "\5\5\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\11\3\0"+
    "\1\31\1\7\1\32\1\33\7\5\1\34\11\5\1\0"+
    "\1\5\1\35\6\5\1\36\1\37\11\5\1\40\5\5"+
    "\1\41\5\5\1\42\1\43\1\0\1\44\1\5\1\45"+
    "\1\46\5\5\1\47\1\5\1\50\1\51\1\52\1\53"+
    "\2\5\7\0\2\5\1\54\1\55\1\56\2\5\1\57"+
    "\1\60\1\61\6\0\1\5\1\62\1\63\1\64\1\5"+
    "\1\65\5\0\1\66\1\67\1\70\1\71\1\0\1\72"+
    "\1\73\1\74\1\0\1\75\1\0\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\75\0\172\0\267\0\364\0\u0131"+
    "\0\u016e\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\75\0\u05b8\0\u05f5\0\u0632\0\75\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\u07a0\0\267\0\364\0\75\0\75\0\172"+
    "\0\172\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\172\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\172\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u07a0\0\172\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\172\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\75\0\u10eb\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\172\0\172\0\u121c\0\u1259\0\u1296\0\172"+
    "\0\172\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\172\0\u1404"+
    "\0\172\0\172\0\172\0\172\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\172"+
    "\0\172\0\172\0\u16e0\0\u171d\0\172\0\u175a\0\75\0\u1797"+
    "\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\172\0\172"+
    "\0\172\0\u1942\0\75\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73"+
    "\0\75\0\172\0\172\0\u1ab0\0\u1aed\0\75\0\75\0\75"+
    "\0\u1b2a\0\75\0\u1b67\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\5\1\17\1\11"+
    "\2\5\1\20\1\5\1\21\1\22\2\5\1\23\1\5"+
    "\1\24\1\25\1\26\1\27\1\30\1\5\1\31\1\5"+
    "\1\32\1\2\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\76\0\2\5\1\0\2\5\1\0\1\5"+
    "\3\0\5\5\1\0\22\5\3\0\2\5\2\0\5\5"+
    "\21\0\1\63\1\0\1\64\1\0\1\64\71\0\2\65"+
    "\1\66\1\65\3\0\5\65\1\0\22\65\3\0\2\65"+
    "\2\0\5\65\21\0\1\63\1\0\1\10\1\0\1\10"+
    "\75\0\1\11\7\0\1\11\66\0\1\67\73\0\1\67"+
    "\64\0\2\5\1\0\2\5\1\0\1\5\3\0\1\5"+
    "\1\70\1\5\1\71\1\5\1\0\22\5\3\0\2\5"+
    "\2\0\5\5\17\0\2\5\1\0\2\5\1\0\1\5"+
    "\3\0\5\5\1\0\4\5\1\72\1\5\1\73\13\5"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\3\5\1\74\1\5\1\0\1\75"+
    "\21\5\3\0\2\5\2\0\5\5\17\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\2\5\1\76\2\5\1\0"+
    "\22\5\3\0\2\5\2\0\5\5\17\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\5\5\1\0\3\5\1\77"+
    "\1\5\1\100\14\5\3\0\2\5\2\0\5\5\17\0"+
    "\2\5\1\0\2\5\1\0\1\5\3\0\1\5\1\101"+
    "\3\5\1\0\22\5\3\0\2\5\2\0\5\5\17\0"+
    "\2\5\1\0\2\5\1\0\1\5\3\0\2\5\1\102"+
    "\2\5\1\0\6\5\1\103\13\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\5\5\1\0\3\5\1\104\16\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\3\5\1\105\1\5\1\0\22\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\5\5\1\0\1\106\21\5\3\0\2\5\2\0\5\5"+
    "\17\0\2\5\1\0\2\5\1\0\1\5\3\0\5\5"+
    "\1\0\2\5\1\107\17\5\3\0\2\5\2\0\5\5"+
    "\17\0\2\5\1\0\2\5\1\0\1\5\3\0\1\110"+
    "\4\5\1\0\22\5\3\0\2\5\2\0\5\5\17\0"+
    "\2\5\1\0\2\5\1\0\1\5\3\0\5\5\1\0"+
    "\6\5\1\111\13\5\3\0\2\5\2\0\5\5\17\0"+
    "\2\5\1\0\2\5\1\0\1\5\3\0\5\5\1\0"+
    "\4\5\1\112\15\5\3\0\2\5\2\0\5\5\62\0"+
    "\1\113\31\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\3\5\1\114\1\5\1\0\22\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\5\5\1\0\5\5\1\115\14\5\3\0\2\5\2\0"+
    "\5\5\67\0\1\37\24\0\2\5\1\0\2\5\1\0"+
    "\1\5\3\0\5\5\1\0\6\5\1\116\13\5\3\0"+
    "\2\5\2\0\5\5\17\0\2\5\1\0\2\5\1\0"+
    "\1\5\3\0\5\5\1\0\6\5\1\117\13\5\3\0"+
    "\2\5\2\0\5\5\17\0\2\5\1\0\2\5\1\0"+
    "\1\5\3\0\2\5\1\120\2\5\1\0\22\5\3\0"+
    "\2\5\2\0\5\5\17\0\2\5\1\0\2\5\1\0"+
    "\1\5\3\0\5\5\1\0\5\5\1\121\13\5\1\122"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\2\5\1\123\2\5\1\0\22\5"+
    "\3\0\2\5\2\0\5\5\23\0\1\124\1\0\1\124"+
    "\66\0\2\5\1\0\2\5\1\0\1\5\3\0\5\5"+
    "\1\0\5\5\1\125\14\5\3\0\2\5\2\0\5\5"+
    "\17\0\2\5\1\0\2\5\1\0\1\5\3\0\5\5"+
    "\1\0\1\126\21\5\3\0\2\5\2\0\5\5\17\0"+
    "\2\5\1\0\2\5\1\0\1\5\3\0\4\5\1\127"+
    "\1\0\22\5\3\0\2\5\2\0\5\5\17\0\2\5"+
    "\1\0\2\5\1\0\1\5\3\0\5\5\1\0\1\5"+
    "\1\130\20\5\3\0\2\5\2\0\5\5\17\0\2\5"+
    "\1\0\2\5\1\0\1\5\3\0\1\5\1\131\3\5"+
    "\1\0\22\5\3\0\2\5\2\0\5\5\17\0\2\5"+
    "\1\0\2\5\1\0\1\5\3\0\2\5\1\132\2\5"+
    "\1\0\22\5\3\0\2\5\2\0\5\5\17\0\2\5"+
    "\1\0\2\5\1\0\1\5\3\0\5\5\1\0\21\5"+
    "\1\133\3\0\2\5\2\0\5\5\17\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\5\5\1\0\11\5\1\134"+
    "\10\5\3\0\2\5\2\0\5\5\17\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\3\5\1\135\1\5\1\0"+
    "\22\5\3\0\2\5\2\0\5\5\17\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\1\136\4\5\1\0\22\5"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\5\5\1\0\2\5\1\137\17\5"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\5\5\1\0\4\5\1\140\15\5"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\5\5\1\0\5\5\1\141\14\5"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\5\5\1\0\1\5\1\142\20\5"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\5\5\1\0\2\5\1\143\17\5"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\5\5\1\0\4\5\1\144\15\5"+
    "\3\0\2\5\2\0\5\5\17\0\1\145\74\0\2\5"+
    "\1\0\2\5\1\0\1\5\3\0\4\5\1\115\1\0"+
    "\22\5\3\0\2\5\2\0\5\5\17\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\5\5\1\0\1\146\1\147"+
    "\20\5\3\0\2\5\2\0\5\5\17\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\1\150\4\5\1\0\22\5"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\5\5\1\0\7\5\1\151\12\5"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\1\152\4\5\1\0\22\5\3\0"+
    "\2\5\2\0\5\5\17\0\2\5\1\0\2\5\1\0"+
    "\1\5\3\0\5\5\1\0\2\5\1\153\17\5\3\0"+
    "\2\5\2\0\5\5\17\0\2\5\1\0\2\5\1\0"+
    "\1\5\3\0\5\5\1\0\2\5\1\154\17\5\3\0"+
    "\2\5\2\0\5\5\17\0\2\5\1\0\2\5\1\0"+
    "\1\5\3\0\5\5\1\0\1\5\1\133\20\5\3\0"+
    "\2\5\2\0\5\5\17\0\2\5\1\0\2\5\1\0"+
    "\1\5\3\0\5\5\1\155\22\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\2\5\1\156\2\5\1\0\22\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\5\5\1\0\6\5\1\157\13\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\3\5\1\160\1\5\1\0\22\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\2\5\1\161\2\5\1\0\22\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\2\5\1\162\2\5\1\0\22\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\5\5\1\0\7\5\1\163\12\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\5\5\1\0\1\164\21\5\3\0\2\5\2\0\5\5"+
    "\17\0\2\5\1\0\2\5\1\0\1\5\3\0\5\5"+
    "\1\0\6\5\1\165\13\5\3\0\2\5\2\0\5\5"+
    "\17\0\2\5\1\0\2\5\1\0\1\5\3\0\1\166"+
    "\4\5\1\0\22\5\3\0\2\5\2\0\5\5\17\0"+
    "\2\5\1\0\2\5\1\0\1\5\3\0\5\5\1\0"+
    "\2\5\1\167\17\5\3\0\2\5\2\0\5\5\17\0"+
    "\2\5\1\0\2\5\1\0\1\5\3\0\5\5\1\0"+
    "\5\5\1\170\14\5\3\0\2\5\2\0\5\5\17\0"+
    "\2\5\1\0\2\5\1\0\1\5\3\0\5\5\1\0"+
    "\1\171\21\5\3\0\2\5\2\0\5\5\17\0\2\5"+
    "\1\0\2\5\1\0\1\5\3\0\5\5\1\0\1\172"+
    "\21\5\3\0\2\5\2\0\5\5\17\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\2\5\1\173\2\5\1\0"+
    "\22\5\3\0\2\5\2\0\5\5\17\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\3\5\1\174\1\5\1\0"+
    "\22\5\3\0\2\5\2\0\5\5\17\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\1\175\4\5\1\0\22\5"+
    "\3\0\2\5\2\0\5\5\17\0\2\5\1\0\2\5"+
    "\1\0\1\5\3\0\3\5\1\176\1\5\1\0\22\5"+
    "\3\0\2\5\2\0\5\5\31\0\1\177\1\200\1\201"+
    "\13\0\1\202\20\0\1\203\1\204\22\0\2\5\1\0"+
    "\2\5\1\0\1\5\3\0\5\5\1\205\22\5\3\0"+
    "\2\5\2\0\5\5\17\0\2\5\1\0\2\5\1\0"+
    "\1\5\3\0\5\5\1\0\21\5\1\206\3\0\2\5"+
    "\2\0\5\5\17\0\2\5\1\0\2\5\1\0\1\5"+
    "\3\0\5\5\1\0\6\5\1\207\13\5\3\0\2\5"+
    "\2\0\5\5\17\0\2\5\1\0\2\5\1\0\1\5"+
    "\3\0\2\5\1\210\2\5\1\0\22\5\3\0\2\5"+
    "\2\0\5\5\17\0\2\5\1\0\2\5\1\0\1\5"+
    "\3\0\2\5\1\211\2\5\1\0\22\5\3\0\2\5"+
    "\2\0\5\5\17\0\2\5\1\0\2\5\1\0\1\5"+
    "\3\0\5\5\1\0\2\5\1\212\17\5\3\0\2\5"+
    "\2\0\5\5\17\0\2\5\1\0\2\5\1\0\1\5"+
    "\3\0\3\5\1\213\1\5\1\0\22\5\3\0\2\5"+
    "\2\0\5\5\17\0\2\5\1\0\2\5\1\0\1\5"+
    "\3\0\1\214\4\5\1\0\22\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\3\5\1\215\1\5\1\0\22\5\3\0\2\5\2\0"+
    "\5\5\17\0\2\5\1\0\2\5\1\0\1\5\3\0"+
    "\5\5\1\0\2\5\1\216\17\5\3\0\2\5\2\0"+
    "\5\5\32\0\1\217\105\0\1\220\70\0\1\221\77\0"+
    "\1\222\77\0\1\223\74\0\1\224\60\0\1\225\62\0"+
    "\2\5\1\0\2\5\1\0\1\5\3\0\5\5\1\0"+
    "\1\226\21\5\3\0\2\5\2\0\5\5\17\0\2\5"+
    "\1\0\2\5\1\0\1\5\3\0\5\5\1\0\2\5"+
    "\1\227\17\5\3\0\2\5\2\0\5\5\17\0\2\5"+
    "\1\0\2\5\1\0\1\5\3\0\5\5\1\0\7\5"+
    "\1\230\12\5\3\0\2\5\2\0\5\5\17\0\2\5"+
    "\1\0\2\5\1\0\1\5\3\0\5\5\1\0\17\5"+
    "\1\231\2\5\3\0\2\5\2\0\5\5\17\0\2\5"+
    "\1\0\2\5\1\0\1\5\3\0\5\5\1\0\1\232"+
    "\21\5\3\0\2\5\2\0\5\5\44\0\1\233\70\0"+
    "\1\234\65\0\1\235\102\0\1\236\1\237\65\0\1\240"+
    "\75\0\1\241\61\0\2\5\1\0\2\5\1\0\1\5"+
    "\3\0\5\5\1\0\2\5\1\242\17\5\3\0\2\5"+
    "\2\0\5\5\17\0\2\5\1\0\2\5\1\0\1\5"+
    "\3\0\3\5\1\243\1\5\1\0\22\5\3\0\2\5"+
    "\2\0\5\5\33\0\1\244\100\0\1\245\74\0\1\246"+
    "\70\0\1\247\75\0\1\250\76\0\1\251\71\0\1\252"+
    "\72\0\1\253\75\0\1\254\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7076];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\11\26\1\1\11\3\1\1\11\5\1\16\11"+
    "\3\0\2\11\23\1\1\0\31\1\1\11\7\1\1\0"+
    "\21\1\7\0\11\1\1\11\6\0\5\1\1\11\5\0"+
    "\1\11\3\1\1\0\3\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { lexeme=yytext(); return Then;
          }
        case 63: break;
        case 46: 
          { lexeme=yytext(); return TypeFloat;
          }
        case 64: break;
        case 61: 
          { lexeme=yytext(); return EndWhile;
          }
        case 65: break;
        case 6: 
          { lexeme=yytext(); return ENTERO;
          }
        case 66: break;
        case 36: 
          { lexeme=yytext(); return Else;
          }
        case 67: break;
        case 34: 
          { lexeme=yytext(); return put;
          }
        case 68: break;
        case 3: 
          { lexeme=yytext(); return GuionBajo;
          }
        case 69: break;
        case 12: 
          { lexeme=yytext(); return DosPuntos;
          }
        case 70: break;
        case 42: 
          { lexeme=yytext(); return Case;
          }
        case 71: break;
        case 9: 
          { lexeme=yytext(); return special_characters;
          }
        case 72: break;
        case 21: 
          { lexeme=yytext(); return SquareBIzq;
          }
        case 73: break;
        case 62: 
          { lexeme=yytext(); return EndElseIf;
          }
        case 74: break;
        case 31: 
          { lexeme=yytext(); return For;
          }
        case 75: break;
        case 60: 
          { lexeme=yytext(); return EndMain;
          }
        case 76: break;
        case 22: 
          { lexeme=yytext(); return SquareBDer;
          }
        case 77: break;
        case 28: 
          { lexeme=yytext(); return Of;
          }
        case 78: break;
        case 58: 
          { lexeme=yytext(); return EndCall;
          }
        case 79: break;
        case 35: 
          { lexeme=yytext(); return get;
          }
        case 80: break;
        case 10: 
          { lexeme=yytext(); return OP_MULT;
          }
        case 81: break;
        case 27: 
          { lexeme=yytext(); return In;
          }
        case 82: break;
        case 48: 
          { lexeme=yytext(); return Imp;
          }
        case 83: break;
        case 11: 
          { lexeme=yytext(); return OP_ASIG;
          }
        case 84: break;
        case 29: 
          { lexeme=yytext(); return OP_LOGIC;
          }
        case 85: break;
        case 23: 
          { lexeme=yytext(); return CurlyIzq;
          }
        case 86: break;
        case 24: 
          { lexeme=yytext(); return CurlyDer;
          }
        case 87: break;
        case 52: 
          { lexeme=yytext(); return TypeMatriz;
          }
        case 88: break;
        case 8: 
          { lexeme=yytext(); return OP_DIV;
          }
        case 89: break;
        case 47: 
          { lexeme=yytext(); return Begin;
          }
        case 90: break;
        case 1: 
          { lexeme=yytext(); return OP_RELA;
          }
        case 91: break;
        case 39: 
          { lexeme=yytext(); return TypeList;
          }
        case 92: break;
        case 38: 
          { lexeme=yytext(); return TBool;
          }
        case 93: break;
        case 55: 
          { lexeme=yytext(); return Default;
          }
        case 94: break;
        case 4: 
          { lexeme=yytext(); return Punto;
          }
        case 95: break;
        case 18: 
          { lexeme=yytext(); return Numeral;
          }
        case 96: break;
        case 13: 
          { lexeme=yytext(); return PuntoComa;
          }
        case 97: break;
        case 43: 
          { lexeme=yytext(); return Main;
          }
        case 98: break;
        case 19: 
          { lexeme=yytext(); return ParIzq;
          }
        case 99: break;
        case 30: 
          { lexeme=yytext(); return DECIMAL;
          }
        case 100: break;
        case 50: 
          { lexeme=yytext(); return Repeat;
          }
        case 101: break;
        case 49: 
          { lexeme=yytext(); return EndIf;
          }
        case 102: break;
        case 41: 
          { lexeme=yytext(); return Call;
          }
        case 103: break;
        case 32: 
          { lexeme=yytext(); return TypeInt;
          }
        case 104: break;
        case 16: 
          { lexeme=yytext(); return Apostrofe;
          }
        case 105: break;
        case 20: 
          { lexeme=yytext(); return ParDer;
          }
        case 106: break;
        case 57: 
          { lexeme=yytext(); return EndElse;
          }
        case 107: break;
        case 33: 
          { lexeme=yytext(); return OP_SUMA;
          }
        case 108: break;
        case 59: 
          { lexeme=yytext(); return EndCase;
          }
        case 109: break;
        case 5: 
          { lexeme=yytext(); return IDENTIFICADOR;
          }
        case 110: break;
        case 51: 
          { lexeme=yytext(); return TypeString;
          }
        case 111: break;
        case 15: 
          { lexeme=yytext(); return Ampersand;
          }
        case 112: break;
        case 54: 
          { lexeme=yytext(); return ElseIf;
          }
        case 113: break;
        case 25: 
          { lexeme=yytext(); return CADENA;
          }
        case 114: break;
        case 40: 
          { lexeme=yytext(); return TypeBool;
          }
        case 115: break;
        case 2: 
          { return ERROR;
          }
        case 116: break;
        case 53: 
          { lexeme=yytext(); return EndFor;
          }
        case 117: break;
        case 44: 
          { lexeme=yytext(); return Range;
          }
        case 118: break;
        case 14: 
          { lexeme=yytext(); return Coma;
          }
        case 119: break;
        case 45: 
          { lexeme=yytext(); return While;
          }
        case 120: break;
        case 7: 
          { /*Ignore*/
          }
        case 121: break;
        case 26: 
          { lexeme=yytext(); return If;
          }
        case 122: break;
        case 56: 
          { lexeme=yytext(); return ImpLn;
          }
        case 123: break;
        case 17: 
          { lexeme=yytext(); return Arroba;
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
